syntax = "proto3";

package pbaccount;

option go_package = "server/proto/pbaccount";

import "google/api/annotations.proto";

service Api {
    // Account info.
    rpc GetUser (GetRequestUser) returns (ResponseUser) {
        option (google.api.http) = {
            post: "/v2/account/get-user",
            body: "*"
        };
    }
    // Account info update.
    rpc SetUser (SetRequestUserManual) returns (ResponseUser) {
        option (google.api.http) = {
            post: "/v2/account/set-user",
            body: "*"
        };
    }
    // Actions list.
    rpc GetActions (GetRequestActions) returns (ResponseActions) {
        option (google.api.http) = {
            post: "/v2/account/get-actions",
            body: "*"
        };
    }

    // Secure api.
    // Set secure 2fa.
    rpc SetFactor (SetRequestFactor) returns (ResponseFactor) {
        option (google.api.http) = {
            post: "/v2/account/set-factor",
            body: "*"
        };
    }
    // Get secure 2fa.
    rpc GetFactor (GetRequestFactor) returns (ResponseFactor) {
        option (google.api.http) = {
            post: "/v2/account/get-factor",
            body: "*"
        };
    }

    // Administration api.
    // Get accounts.
    rpc GetAccountsRule (GetRequestUsersRule) returns (ResponseUser) {
        option (google.api.http) = {
            post: "/v2/admin/account/get-accounts",
            body: "*"
        };
    }
    // Get account.
    rpc GetAccountRule (GetRequestUserRule) returns (ResponseUser) {
        option (google.api.http) = {
            post: "/v2/admin/account/get-account",
            body: "*"
        };
    }
    // Set account.
    rpc SetAccountRule (SetRequestUserManual) returns (ResponseUser) {
        option (google.api.http) = {
            post: "/v2/admin/account/set-account",
            body: "*"
        };
    }
}

// Rule structure.
message Rules {
    repeated string default = 1;
    repeated string spot = 2;
}

// Counts structure.
message Counts {
    int32 transaction = 1;
    int32 order = 2;
    int32 asset = 3;
}

// User structure.
message User {
    int64 id = 1;
    string name = 2;
    string email = 3;
    string create_at = 4;
    bool status = 5;
    Counts counts = 6;
    Rules rules = 7;
    repeated Action actions = 8;
    repeated string sample = 9;
    bool factor_secure = 10;
    string factor_secret = 11;
    bool kyc_secure = 12;
    string kyc_secret = 13;
}

// Action structure.
message Action {
    int64 id = 1;
    string os = 2;
    string device = 3;
    string ip = 4;
    int64 user_id = 6;
    repeated string browser = 7;
    string create_at = 8;
}

// User structure.
message GetRequestUser {}
message GetRequestUserRule {
    int64 id = 1;
}
message GetRequestUsersRule {
    int64 id = 1;
    int64 page = 2;
    int64 limit = 3;
    string search = 4;
}
message SetRequestUserManual {
    int64 id = 1;
    string sample = 2;
    string old_password = 3;
    string new_password = 4;
    User user = 5;
}

// Factor structure.
message SetRequestFactor {
    string secret = 1;
    string code = 2;
}
message GetRequestFactor {}
message ResponseFactor {
    string secret = 1;
    string url = 2;
}

// Actions structure.
message GetRequestActions {
    int64 page = 1;
    int64 limit = 2;
}
message ResponseActions {
    repeated Action fields = 1;
    int32 count = 2;
}

// User structure.
message ResponseUser {
    repeated User fields = 1;
    int32 count = 2;
}