syntax = "proto3";

package basic;

option go_package = "github.com/cryptogateway/backend-envoys/server/proto";

// An enum is a type that stores named constants. In this example, the enum Type has two constants, SPOT and STOCK. These
// constants can be used to represent different types. For example, they could be used to differentiate between
// different types of financial instruments, such as spot trades and stock trades.
enum Type {
  SPOT = 0;
  STOCK = 1;
}

// Enums are used to assign symbolic names to constant values. The purpose of the above enum is to assign symbolic names
// to constants that have a specific meaning in the context of a financial trading system. BUY and SELL are used to
// denote the type of order for a financial transaction, MARKET_PRICE is used to denote the default market price for a
// particular security, and DEFAULT is used to denote the default values in the system.
enum Assigning {
  BUY = 0;
  SELL = 1;
  MARKET_PRICE = 2;
  DEFAULT = 3;
}

// The enum Side is used to define the different sides of a trade. ASK is the side of the trade where a trader is looking
// to sell an asset, and BID is the side of the trade where a trader is looking to buy an asset. By assigning numerical
// values to each side, it makes it easier to keep track of the different sides of a trade, side "bid" - "buy" and "ask" - "sell".
enum Side {
  ASK = 0;
  BID = 1;
}

// The enum Trading is a way to assign a numerical value to each type of trade. In this case, MARKET is assigned the
// value 0, and LIMIT is assigned the value 1. This is useful when creating a trading system, as it allows trades to be
// easily identified and categorized.
enum Trading {
  MARKET = 0;
  LIMIT = 1;
}

// Enums are used to define a set of named constants. The enum Balance above sets the constants MINUS and PLUS to the
// values 0 and 1 respectively. This can be used to indicate a balance between two values (e.g., a bank account balance
// between a credit and debit).
enum Balance {
  MINUS = 0;
  PLUS = 1;
}

// Enums are used to declare a set of named constants. In this case, the enum Summary is declaring two constants, BASE
// and QUOTE, with the values 0 and 1 respectively. These constants can then be used to refer to specific values in a
// program. For example, an if-else statement could use the constants to check if a condition is true or false.
enum Summary {
  BASE = 0;
  QUOTE = 1;
}

// Enums are used to define a set of named constants. In this example, the enum Assignment is used to assign numerical values
// to two named constants: DEPOSIT and WITHDRAWS. This can be used as an identifier for a type of transaction, such as a
// deposit or a withdrawal.
enum Assignment {
  DEPOSIT = 0;
  WITHDRAWS = 1;
}

// Enums are used in programming languages to define a set of named constants. In this case, the enum is used to define a
// set of constants related to a status of a certain task or process. The constants can represent such statuses as
// CANCEL, FILLED, PENDING, RESERVE, PROCESSING, FAILED, LOCK, ACCESS, REJECTED, and BLOCKED. This allows the programmer
// to easily refer to one of the constants instead of writing out the entire status name.
enum Status {
  CANCEL = 0;
  FILLED = 1;
  PENDING = 2;
  RESERVE = 3;
  PROCESSING = 4;
  FAILED = 5;
  LOCK = 6;
  ACCESS = 7;
  REJECTED = 8;
  BLOCKED = 9;
}

// The purpose of this message is to define the structure of an Order object. The message includes details such as the
// order ID, user ID, base and quote unit, creation time, price, value, quantity, fees, count and the assigning, trading
// and status of the order. This message will be used to create Order objects with the given attributes.
message Order {
  int64 id = 1;
  int64 user_id = 2;
  string base_unit = 3;
  string quote_unit = 4;
  double price = 5;
  double value = 6;
  double quantity = 7;
  double fees = 8;
  int32 count = 9;
  string create_at = 10;
  Assigning assigning = 11;
  Trading trading = 12;
  Status status = 13;
}

// The message Pair is a data structure used to store information about a currency pair. It stores the currency pair's
// ID, symbol, base unit, quote unit, icon, price, ratio, base decimal, quote decimal, status, and graph clearance. This
// data structure is used to provide information about the currency pair to other applications or services.
message Pair {
  int64 id = 1;
  string symbol = 2;
  string base_unit = 3;
  string quote_unit = 4;
  string icon = 5;
  double price = 6;
  double ratio = 7;
  double base_decimal = 8;
  double quote_decimal = 9;
  bool status = 10;
  bool graph_clear = 11;
}

// The message Ticker is a protocol buffer that is used to store and exchange information about a given ticker. This
// includes information such as the ticker's unique identifier, the time, the base unit and quote unit, the high, low,
// open, close, price, volume, ask price, and bid price. This information can then be used to analyze trends in the
// market, track prices, and make predictions.
message Ticker {
  int64 id = 1;
  int64 time = 2;
  string base_unit = 3;
  string quote_unit = 4;
  double high = 5;
  double low = 6;
  double open = 7;
  double close = 8;
  double price = 9;
  double volume = 10;
  double ask_price = 11;
  double bid_price = 12;
}

// The purpose of this message Stats is to provide a structure for storing statistics about a particular topic. The
// variables high, low, last, first, previous, volume, and count hold specific values that represent different aspects
// of the topic's statistical information. For example, high might represent the highest value of the topic, low might
// represent the lowest value, and so on. The structure allows for efficient storage and retrieval of the statistical data.
message Stats {
  double high = 1;
  double low = 2;
  double last = 3;
  double first = 5;
  double previous = 4;
  double volume = 6;
  int32 count = 7;
}

// This message is used to define the fields of a Trade. It establishes the type of data that each field can contain
// (i.e. int64, string, double, bool). The purpose of this message is to provide a standard format for communication
// between different systems. By doing so, it allows for more efficient and accurate data exchange.
message Trade {
  int64 id = 1;
  int64 user_id = 2;
  string base_unit = 3;
  string quote_unit = 4;
  string create_at = 5;
  double price = 6;
  double quantity = 7;
  double fees = 8;
  bool maker = 9;
  basic.Assigning assigning = 10;
}