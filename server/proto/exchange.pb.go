// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: server/proto/exchange.proto

package proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum chain tag structure.
type Tag int32

const (
	Tag_C_NONE      Tag = 0
	Tag_C_BITCOIN   Tag = 1
	Tag_C_ETHEREUM  Tag = 2
	Tag_C_BINANCE   Tag = 3
	Tag_C_TRON      Tag = 4
	Tag_C_POLYGON   Tag = 5
	Tag_C_CRONOS    Tag = 6
	Tag_C_FANTOM    Tag = 7
	Tag_C_AVALANCHE Tag = 8
)

// Enum value maps for Tag.
var (
	Tag_name = map[int32]string{
		0: "C_NONE",
		1: "C_BITCOIN",
		2: "C_ETHEREUM",
		3: "C_BINANCE",
		4: "C_TRON",
		5: "C_POLYGON",
		6: "C_CRONOS",
		7: "C_FANTOM",
		8: "C_AVALANCHE",
	}
	Tag_value = map[string]int32{
		"C_NONE":      0,
		"C_BITCOIN":   1,
		"C_ETHEREUM":  2,
		"C_BINANCE":   3,
		"C_TRON":      4,
		"C_POLYGON":   5,
		"C_CRONOS":    6,
		"C_FANTOM":    7,
		"C_AVALANCHE": 8,
	}
)

func (x Tag) Enum() *Tag {
	p := new(Tag)
	*p = x
	return p
}

func (x Tag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[0].Descriptor()
}

func (Tag) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[0]
}

func (x Tag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag.Descriptor instead.
func (Tag) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{0}
}

// Enum currency protocol structure.
type Protocol int32

const (
	Protocol_MAINNET Protocol = 0
	Protocol_ERC20   Protocol = 1
	Protocol_ERC721  Protocol = 2
	Protocol_ERC1155 Protocol = 3
	Protocol_ERC998  Protocol = 4
	Protocol_ERC223  Protocol = 5
	Protocol_BEP20   Protocol = 6
	Protocol_BEP721  Protocol = 7
	Protocol_BEP1155 Protocol = 8
	Protocol_TRC20   Protocol = 9
	Protocol_TRC721  Protocol = 10
	Protocol_BEP998  Protocol = 11
	Protocol_BEP223  Protocol = 12
	Protocol_PRC20   Protocol = 13
	Protocol_PRC721  Protocol = 14
	Protocol_PRC1155 Protocol = 15
	Protocol_PRC998  Protocol = 16
	Protocol_PRC223  Protocol = 17
	Protocol_CRC20   Protocol = 18
	Protocol_CRC721  Protocol = 19
	Protocol_CRC1155 Protocol = 20
	Protocol_CRC998  Protocol = 21
	Protocol_CRC223  Protocol = 22
	Protocol_FRC20   Protocol = 23
	Protocol_FRC721  Protocol = 24
	Protocol_FRC1155 Protocol = 25
	Protocol_FRC998  Protocol = 26
	Protocol_FRC223  Protocol = 27
	Protocol_ARC20   Protocol = 28
	Protocol_ARC721  Protocol = 29
	Protocol_ARC1155 Protocol = 30
	Protocol_ARC998  Protocol = 31
	Protocol_ARC223  Protocol = 32
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:  "MAINNET",
		1:  "ERC20",
		2:  "ERC721",
		3:  "ERC1155",
		4:  "ERC998",
		5:  "ERC223",
		6:  "BEP20",
		7:  "BEP721",
		8:  "BEP1155",
		9:  "TRC20",
		10: "TRC721",
		11: "BEP998",
		12: "BEP223",
		13: "PRC20",
		14: "PRC721",
		15: "PRC1155",
		16: "PRC998",
		17: "PRC223",
		18: "CRC20",
		19: "CRC721",
		20: "CRC1155",
		21: "CRC998",
		22: "CRC223",
		23: "FRC20",
		24: "FRC721",
		25: "FRC1155",
		26: "FRC998",
		27: "FRC223",
		28: "ARC20",
		29: "ARC721",
		30: "ARC1155",
		31: "ARC998",
		32: "ARC223",
	}
	Protocol_value = map[string]int32{
		"MAINNET": 0,
		"ERC20":   1,
		"ERC721":  2,
		"ERC1155": 3,
		"ERC998":  4,
		"ERC223":  5,
		"BEP20":   6,
		"BEP721":  7,
		"BEP1155": 8,
		"TRC20":   9,
		"TRC721":  10,
		"BEP998":  11,
		"BEP223":  12,
		"PRC20":   13,
		"PRC721":  14,
		"PRC1155": 15,
		"PRC998":  16,
		"PRC223":  17,
		"CRC20":   18,
		"CRC721":  19,
		"CRC1155": 20,
		"CRC998":  21,
		"CRC223":  22,
		"FRC20":   23,
		"FRC721":  24,
		"FRC1155": 25,
		"FRC998":  26,
		"FRC223":  27,
		"ARC20":   28,
		"ARC721":  29,
		"ARC1155": 30,
		"ARC998":  31,
		"ARC223":  32,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{1}
}

// Enum purpose of trades to sell or buy, market liquidity of trades.
type Assigning int32

const (
	Assigning_BUY          Assigning = 0
	Assigning_SELL         Assigning = 1
	Assigning_MARKET_PRICE Assigning = 2
	Assigning_DEFAULT      Assigning = 3
)

// Enum value maps for Assigning.
var (
	Assigning_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "MARKET_PRICE",
		3: "DEFAULT",
	}
	Assigning_value = map[string]int32{
		"BUY":          0,
		"SELL":         1,
		"MARKET_PRICE": 2,
		"DEFAULT":      3,
	}
)

func (x Assigning) Enum() *Assigning {
	p := new(Assigning)
	*p = x
	return p
}

func (x Assigning) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assigning) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[2].Descriptor()
}

func (Assigning) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[2]
}

func (x Assigning) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assigning.Descriptor instead.
func (Assigning) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{2}
}

// Enum buying at the seller's price or selling at the buyer's price.
type Spread int32

const (
	Spread_ASK Spread = 0
	Spread_BID Spread = 1
)

// Enum value maps for Spread.
var (
	Spread_name = map[int32]string{
		0: "ASK",
		1: "BID",
	}
	Spread_value = map[string]int32{
		"ASK": 0,
		"BID": 1,
	}
)

func (x Spread) Enum() *Spread {
	p := new(Spread)
	*p = x
	return p
}

func (x Spread) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Spread) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[3].Descriptor()
}

func (Spread) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[3]
}

func (x Spread) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Spread.Descriptor instead.
func (Spread) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{3}
}

// Enum trading types, the marker type is responsible for
// selling or buying at the market price,
// the limit type is buying or selling at the price that the user sets.
type TradeType int32

const (
	TradeType_MARKET TradeType = 0
	TradeType_LIMIT  TradeType = 1
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "MARKET",
		1: "LIMIT",
	}
	TradeType_value = map[string]int32{
		"MARKET": 0,
		"LIMIT":  1,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[4].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[4]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{4}
}

// Enum transaction type, there are 2 types of deposit and withdrawal.
type TxType int32

const (
	TxType_DEPOSIT   TxType = 0
	TxType_WITHDRAWS TxType = 1
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAWS",
	}
	TxType_value = map[string]int32{
		"DEPOSIT":   0,
		"WITHDRAWS": 1,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[5].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[5]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{5}
}

// Enum type of finance, is it a type of cryptocurrency or fiat.
type FinType int32

const (
	FinType_CRYPTO FinType = 0
	FinType_FIAT   FinType = 1
)

// Enum value maps for FinType.
var (
	FinType_name = map[int32]string{
		0: "CRYPTO",
		1: "FIAT",
	}
	FinType_value = map[string]int32{
		"CRYPTO": 0,
		"FIAT":   1,
	}
)

func (x FinType) Enum() *FinType {
	p := new(FinType)
	*p = x
	return p
}

func (x FinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[6].Descriptor()
}

func (FinType) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[6]
}

func (x FinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinType.Descriptor instead.
func (FinType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{6}
}

// Enum order type.
type OrderType int32

const (
	OrderType_SPOT   OrderType = 0
	OrderType_MARGIN OrderType = 1
	OrderType_BROKER OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "SPOT",
		1: "MARGIN",
		3: "BROKER",
	}
	OrderType_value = map[string]int32{
		"SPOT":   0,
		"MARGIN": 1,
		"BROKER": 3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[7].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[7]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{7}
}

// Enum statuses, such as order statuses,
// this list has the status canceled, completed, and pending.
type Status int32

const (
	Status_CANCEL     Status = 0
	Status_FILLED     Status = 1
	Status_PENDING    Status = 2
	Status_RESERVE    Status = 3
	Status_PROCESSING Status = 4
	Status_FAILED     Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "CANCEL",
		1: "FILLED",
		2: "PENDING",
		3: "RESERVE",
		4: "PROCESSING",
		5: "FAILED",
	}
	Status_value = map[string]int32{
		"CANCEL":     0,
		"FILLED":     1,
		"PENDING":    2,
		"RESERVE":    3,
		"PROCESSING": 4,
		"FAILED":     5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[8].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[8]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{8}
}

// Enum base and quote is the dominance of pair trading,
// these flags are used for correct conversion and not only.
type Summary int32

const (
	Summary_BASE  Summary = 0
	Summary_QUOTE Summary = 1
)

// Enum value maps for Summary.
var (
	Summary_name = map[int32]string{
		0: "BASE",
		1: "QUOTE",
	}
	Summary_value = map[string]int32{
		"BASE":  0,
		"QUOTE": 1,
	}
)

func (x Summary) Enum() *Summary {
	p := new(Summary)
	*p = x
	return p
}

func (x Summary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Summary) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[9].Descriptor()
}

func (Summary) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[9]
}

func (x Summary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Summary.Descriptor instead.
func (Summary) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{9}
}

// Enum cryptocurrency parent platforms, list of underlying platforms.
type Platform int32

const (
	Platform_BITCOIN    Platform = 0
	Platform_ETHEREUM   Platform = 1
	Platform_TRON       Platform = 2
	Platform_VISA       Platform = 3
	Platform_MASTERCARD Platform = 4
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "BITCOIN",
		1: "ETHEREUM",
		2: "TRON",
		3: "VISA",
		4: "MASTERCARD",
	}
	Platform_value = map[string]int32{
		"BITCOIN":    0,
		"ETHEREUM":   1,
		"TRON":       2,
		"VISA":       3,
		"MASTERCARD": 4,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[10].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[10]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{10}
}

// Enum pointers to update the user's balance,
// select the assigned amount or add the assigned amount.
type Balance int32

const (
	Balance_MINUS Balance = 0
	Balance_PLUS  Balance = 1
)

// Enum value maps for Balance.
var (
	Balance_name = map[int32]string{
		0: "MINUS",
		1: "PLUS",
	}
	Balance_value = map[string]int32{
		"MINUS": 0,
		"PLUS":  1,
	}
)

func (x Balance) Enum() *Balance {
	p := new(Balance)
	*p = x
	return p
}

func (x Balance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Balance) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[11].Descriptor()
}

func (Balance) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[11]
}

func (x Balance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Balance.Descriptor instead.
func (Balance) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{11}
}

// Enum pusher structure.
type Pusher int32

const (
	Pusher_TradeStatusPublic Pusher = 0
	Pusher_TradePublic       Pusher = 1
	Pusher_DepositPublic     Pusher = 2
	Pusher_WithdrawPublic    Pusher = 3
	Pusher_OrderCreatePublic Pusher = 4
)

// Enum value maps for Pusher.
var (
	Pusher_name = map[int32]string{
		0: "TradeStatusPublic",
		1: "TradePublic",
		2: "DepositPublic",
		3: "WithdrawPublic",
		4: "OrderCreatePublic",
	}
	Pusher_value = map[string]int32{
		"TradeStatusPublic": 0,
		"TradePublic":       1,
		"DepositPublic":     2,
		"WithdrawPublic":    3,
		"OrderCreatePublic": 4,
	}
)

func (x Pusher) Enum() *Pusher {
	p := new(Pusher)
	*p = x
	return p
}

func (x Pusher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pusher) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_exchange_proto_enumTypes[12].Descriptor()
}

func (Pusher) Type() protoreflect.EnumType {
	return &file_server_proto_exchange_proto_enumTypes[12]
}

func (x Pusher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pusher.Descriptor instead.
func (Pusher) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{12}
}

// Contract message structure.
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainId      int64    `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainName    string   `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ParentSymbol string   `protobuf:"bytes,4,opt,name=parent_symbol,json=parentSymbol,proto3" json:"parent_symbol,omitempty"`
	Symbol       string   `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address      string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	FeesWithdraw float64  `protobuf:"fixed64,7,opt,name=fees_withdraw,json=feesWithdraw,proto3" json:"fees_withdraw,omitempty"`
	Decimals     int32    `protobuf:"varint,8,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Platform     Platform `protobuf:"varint,9,opt,name=platform,proto3,enum=proto.Platform" json:"platform,omitempty"`
	Protocol     Protocol `protobuf:"varint,10,opt,name=protocol,proto3,enum=proto.Protocol" json:"protocol,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{0}
}

func (x *Contract) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contract) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Contract) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *Contract) GetParentSymbol() string {
	if x != nil {
		return x.ParentSymbol
	}
	return ""
}

func (x *Contract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Contract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Contract) GetFeesWithdraw() float64 {
	if x != nil {
		return x.FeesWithdraw
	}
	return 0
}

func (x *Contract) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Contract) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Contract) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

// Currency message structure.
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol       string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreateAt     string   `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Balance      float64  `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`
	FeesTrade    float64  `protobuf:"fixed64,6,opt,name=fees_trade,json=feesTrade,proto3" json:"fees_trade,omitempty"`
	FeesDiscount float64  `protobuf:"fixed64,7,opt,name=fees_discount,json=feesDiscount,proto3" json:"fees_discount,omitempty"`
	FeesCharges  float64  `protobuf:"fixed64,8,opt,name=fees_charges,json=feesCharges,proto3" json:"fees_charges,omitempty"`
	FeesCosts    float64  `protobuf:"fixed64,9,opt,name=fees_costs,json=feesCosts,proto3" json:"fees_costs,omitempty"`
	MinWithdraw  float64  `protobuf:"fixed64,10,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw  float64  `protobuf:"fixed64,11,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	MinDeposit   float64  `protobuf:"fixed64,12,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MinTrade     float64  `protobuf:"fixed64,13,opt,name=min_trade,json=minTrade,proto3" json:"min_trade,omitempty"`
	MaxTrade     float64  `protobuf:"fixed64,14,opt,name=max_trade,json=maxTrade,proto3" json:"max_trade,omitempty"`
	Volume       float64  `protobuf:"fixed64,15,opt,name=volume,proto3" json:"volume,omitempty"`
	Chains       []*Chain `protobuf:"bytes,16,rep,name=chains,proto3" json:"chains,omitempty"`
	Pairs        []*Pair  `protobuf:"bytes,17,rep,name=pairs,proto3" json:"pairs,omitempty"`
	ChainsIds    []int64  `protobuf:"varint,18,rep,packed,name=chains_ids,json=chainsIds,proto3" json:"chains_ids,omitempty"`
	Marker       bool     `protobuf:"varint,19,opt,name=marker,proto3" json:"marker,omitempty"`
	Icon         bool     `protobuf:"varint,20,opt,name=icon,proto3" json:"icon,omitempty"`
	Status       bool     `protobuf:"varint,21,opt,name=status,proto3" json:"status,omitempty"`
	FinType      FinType  `protobuf:"varint,22,opt,name=fin_type,json=finType,proto3,enum=proto.FinType" json:"fin_type,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{1}
}

func (x *Currency) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Currency) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Currency) GetFeesTrade() float64 {
	if x != nil {
		return x.FeesTrade
	}
	return 0
}

func (x *Currency) GetFeesDiscount() float64 {
	if x != nil {
		return x.FeesDiscount
	}
	return 0
}

func (x *Currency) GetFeesCharges() float64 {
	if x != nil {
		return x.FeesCharges
	}
	return 0
}

func (x *Currency) GetFeesCosts() float64 {
	if x != nil {
		return x.FeesCosts
	}
	return 0
}

func (x *Currency) GetMinWithdraw() float64 {
	if x != nil {
		return x.MinWithdraw
	}
	return 0
}

func (x *Currency) GetMaxWithdraw() float64 {
	if x != nil {
		return x.MaxWithdraw
	}
	return 0
}

func (x *Currency) GetMinDeposit() float64 {
	if x != nil {
		return x.MinDeposit
	}
	return 0
}

func (x *Currency) GetMinTrade() float64 {
	if x != nil {
		return x.MinTrade
	}
	return 0
}

func (x *Currency) GetMaxTrade() float64 {
	if x != nil {
		return x.MaxTrade
	}
	return 0
}

func (x *Currency) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Currency) GetChains() []*Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *Currency) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Currency) GetChainsIds() []int64 {
	if x != nil {
		return x.ChainsIds
	}
	return nil
}

func (x *Currency) GetMarker() bool {
	if x != nil {
		return x.Marker
	}
	return false
}

func (x *Currency) GetIcon() bool {
	if x != nil {
		return x.Icon
	}
	return false
}

func (x *Currency) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Currency) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

// Chain message structure.
type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentSymbol string    `protobuf:"bytes,3,opt,name=parent_symbol,json=parentSymbol,proto3" json:"parent_symbol,omitempty"`
	ExplorerLink string    `protobuf:"bytes,4,opt,name=explorer_link,json=explorerLink,proto3" json:"explorer_link,omitempty"`
	Address      string    `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Rpc          string    `protobuf:"bytes,6,opt,name=rpc,proto3" json:"rpc,omitempty"`
	RpcKey       string    `protobuf:"bytes,7,opt,name=rpc_key,json=rpcKey,proto3" json:"rpc_key,omitempty"`
	RpcUser      string    `protobuf:"bytes,8,opt,name=rpc_user,json=rpcUser,proto3" json:"rpc_user,omitempty"`
	RpcPassword  string    `protobuf:"bytes,9,opt,name=rpc_password,json=rpcPassword,proto3" json:"rpc_password,omitempty"`
	Block        int64     `protobuf:"varint,10,opt,name=block,proto3" json:"block,omitempty"`
	Network      int64     `protobuf:"varint,11,opt,name=network,proto3" json:"network,omitempty"`
	Confirmation int64     `protobuf:"varint,12,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	TimeWithdraw int64     `protobuf:"varint,13,opt,name=time_withdraw,json=timeWithdraw,proto3" json:"time_withdraw,omitempty"`
	Status       bool      `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Exist        bool      `protobuf:"varint,15,opt,name=exist,proto3" json:"exist,omitempty"`
	Reserve      float64   `protobuf:"fixed64,16,opt,name=reserve,proto3" json:"reserve,omitempty"`
	FeesWithdraw float64   `protobuf:"fixed64,17,opt,name=fees_withdraw,json=feesWithdraw,proto3" json:"fees_withdraw,omitempty"`
	Platform     Platform  `protobuf:"varint,18,opt,name=platform,proto3,enum=proto.Platform" json:"platform,omitempty"`
	Contract     *Contract `protobuf:"bytes,19,opt,name=contract,proto3" json:"contract,omitempty"`
	Tag          Tag       `protobuf:"varint,20,opt,name=tag,proto3,enum=proto.Tag" json:"tag,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{2}
}

func (x *Chain) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chain) GetParentSymbol() string {
	if x != nil {
		return x.ParentSymbol
	}
	return ""
}

func (x *Chain) GetExplorerLink() string {
	if x != nil {
		return x.ExplorerLink
	}
	return ""
}

func (x *Chain) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Chain) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *Chain) GetRpcKey() string {
	if x != nil {
		return x.RpcKey
	}
	return ""
}

func (x *Chain) GetRpcUser() string {
	if x != nil {
		return x.RpcUser
	}
	return ""
}

func (x *Chain) GetRpcPassword() string {
	if x != nil {
		return x.RpcPassword
	}
	return ""
}

func (x *Chain) GetBlock() int64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Chain) GetNetwork() int64 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *Chain) GetConfirmation() int64 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *Chain) GetTimeWithdraw() int64 {
	if x != nil {
		return x.TimeWithdraw
	}
	return 0
}

func (x *Chain) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Chain) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *Chain) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *Chain) GetFeesWithdraw() float64 {
	if x != nil {
		return x.FeesWithdraw
	}
	return 0
}

func (x *Chain) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Chain) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Chain) GetTag() Tag {
	if x != nil {
		return x.Tag
	}
	return Tag_C_NONE
}

// Pair message structure.
type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol       string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	BaseUnit     string  `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit    string  `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Icon         string  `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Price        float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Ratio        float64 `protobuf:"fixed64,7,opt,name=ratio,proto3" json:"ratio,omitempty"`
	BaseDecimal  float64 `protobuf:"fixed64,8,opt,name=base_decimal,json=baseDecimal,proto3" json:"base_decimal,omitempty"`
	QuoteDecimal float64 `protobuf:"fixed64,9,opt,name=quote_decimal,json=quoteDecimal,proto3" json:"quote_decimal,omitempty"`
	Status       bool    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	GraphClear   bool    `protobuf:"varint,11,opt,name=graph_clear,json=graphClear,proto3" json:"graph_clear,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{3}
}

func (x *Pair) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pair) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Pair) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Pair) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Pair) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Pair) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Pair) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *Pair) GetBaseDecimal() float64 {
	if x != nil {
		return x.BaseDecimal
	}
	return 0
}

func (x *Pair) GetQuoteDecimal() float64 {
	if x != nil {
		return x.QuoteDecimal
	}
	return 0
}

func (x *Pair) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Pair) GetGraphClear() bool {
	if x != nil {
		return x.GraphClear
	}
	return false
}

// Graph message structure.
type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time      int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	BaseUnit  string  `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string  `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	High      float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Open      float64 `protobuf:"fixed64,7,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	Price     float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Volume    float64 `protobuf:"fixed64,10,opt,name=volume,proto3" json:"volume,omitempty"`
	AskPrice  float64 `protobuf:"fixed64,11,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	BidPrice  float64 `protobuf:"fixed64,12,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{4}
}

func (x *Graph) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Graph) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Graph) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Graph) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Graph) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Graph) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Graph) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Graph) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Graph) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Graph) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Graph) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Graph) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

// Graph stats message structure.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High     float64 `protobuf:"fixed64,1,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64 `protobuf:"fixed64,2,opt,name=low,proto3" json:"low,omitempty"`
	Last     float64 `protobuf:"fixed64,3,opt,name=last,proto3" json:"last,omitempty"`
	First    float64 `protobuf:"fixed64,5,opt,name=first,proto3" json:"first,omitempty"`
	Previous float64 `protobuf:"fixed64,4,opt,name=previous,proto3" json:"previous,omitempty"`
	Volume   float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Count    int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{5}
}

func (x *Stats) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Stats) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Stats) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *Stats) GetFirst() float64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Stats) GetPrevious() float64 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *Stats) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Stats) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Trade message structure.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,2,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,3,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string    `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64   `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Fees      float64   `protobuf:"fixed64,7,opt,name=fees,proto3" json:"fees,omitempty"`
	Assigning Assigning `protobuf:"varint,8,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{6}
}

func (x *Trade) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trade) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Trade) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Trade) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Trade) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

// Order message structure.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string    `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64   `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Value     float64   `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`
	Quantity  float64   `protobuf:"fixed64,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Count     int32     `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	Assigning Assigning `protobuf:"varint,10,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
	Status    Status    `protobuf:"varint,11,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{7}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Order) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Order) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Order) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Order) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Order) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

func (x *Order) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

// Transaction message structure.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction internal ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Chain/Blockchain internal ID.
	ChainId int64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Account user internal ID.
	UserId int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Currency symbol.
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Blockchain hash ID.
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transaction creation time.
	CreateAt string `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Recipient's address.
	To string `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	// Address from whom the transfer was made.
	From string `protobuf:"bytes,8,opt,name=from,proto3" json:"from,omitempty"`
	// Number of funds.
	Value float64 `protobuf:"fixed64,9,opt,name=value,proto3" json:"value,omitempty"`
	// Blockchain network fee for transferring funds.
	Fees float64 `protobuf:"fixed64,10,opt,name=fees,proto3" json:"fees,omitempty"`
	// Freeze currency conversion price.
	Price float64 `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`
	// Blockchain network confirmations.
	Confirmation int64 `protobuf:"varint,12,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	// Number of blocks in the blockchain network.
	Block int64 `protobuf:"varint,13,opt,name=block,proto3" json:"block,omitempty"`
	// Data update via socket gateway [true - update, false - create].
	Hook bool `protobuf:"varint,14,opt,name=hook,proto3" json:"hook,omitempty"`
	// Requiring commission for withdrawal of funds.
	Claim    bool     `protobuf:"varint,15,opt,name=claim,proto3" json:"claim,omitempty"`
	TxType   TxType   `protobuf:"varint,16,opt,name=tx_type,json=txType,proto3,enum=proto.TxType" json:"tx_type,omitempty"`
	FinType  FinType  `protobuf:"varint,17,opt,name=fin_type,json=finType,proto3,enum=proto.FinType" json:"fin_type,omitempty"`
	Platform Platform `protobuf:"varint,18,opt,name=platform,proto3,enum=proto.Platform" json:"platform,omitempty"`
	Protocol Protocol `protobuf:"varint,19,opt,name=protocol,proto3,enum=proto.Protocol" json:"protocol,omitempty"`
	Status   Status   `protobuf:"varint,20,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	Chain    *Chain   `protobuf:"bytes,21,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{8}
}

func (x *Transaction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transaction) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Transaction) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Transaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transaction) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Transaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Transaction) GetConfirmation() int64 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *Transaction) GetBlock() int64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Transaction) GetHook() bool {
	if x != nil {
		return x.Hook
	}
	return false
}

func (x *Transaction) GetClaim() bool {
	if x != nil {
		return x.Claim
	}
	return false
}

func (x *Transaction) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_DEPOSIT
}

func (x *Transaction) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

func (x *Transaction) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Transaction) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

func (x *Transaction) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

func (x *Transaction) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

// Analysis message structure.
type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,2,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,3,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Price     float64   `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	BuyRatio  float64   `protobuf:"fixed64,5,opt,name=buy_ratio,json=buyRatio,proto3" json:"buy_ratio,omitempty"`
	SelRatio  float64   `protobuf:"fixed64,6,opt,name=sel_ratio,json=selRatio,proto3" json:"sel_ratio,omitempty"`
	Chart     []float64 `protobuf:"fixed64,7,rep,packed,name=chart,proto3" json:"chart,omitempty"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{9}
}

func (x *Analysis) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Analysis) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Analysis) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Analysis) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Analysis) GetBuyRatio() float64 {
	if x != nil {
		return x.BuyRatio
	}
	return 0
}

func (x *Analysis) GetSelRatio() float64 {
	if x != nil {
		return x.SelRatio
	}
	return 0
}

func (x *Analysis) GetChart() []float64 {
	if x != nil {
		return x.Chart
	}
	return nil
}

// Transfer message structure.
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string    `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64   `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Fees      float64   `protobuf:"fixed64,8,opt,name=fees,proto3" json:"fees,omitempty"`
	Assigning Assigning `protobuf:"varint,9,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{10}
}

func (x *Transfer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transfer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transfer) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Transfer) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Transfer) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Transfer) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Transfer) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Transfer) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Transfer) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

// Price structure.
type GetExchangeRequestPriceManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetExchangeRequestPriceManual) Reset() {
	*x = GetExchangeRequestPriceManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestPriceManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestPriceManual) ProtoMessage() {}

func (x *GetExchangeRequestPriceManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestPriceManual.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestPriceManual) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{11}
}

func (x *GetExchangeRequestPriceManual) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestPriceManual) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type ResponsePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *ResponsePrice) Reset() {
	*x = ResponsePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePrice) ProtoMessage() {}

func (x *ResponsePrice) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePrice.ProtoReflect.Descriptor instead.
func (*ResponsePrice) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{12}
}

func (x *ResponsePrice) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// Contract structure.
type GetExchangeRequestContractsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetExchangeRequestContractsRule) Reset() {
	*x = GetExchangeRequestContractsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestContractsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestContractsRule) ProtoMessage() {}

func (x *GetExchangeRequestContractsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestContractsRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestContractsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{13}
}

func (x *GetExchangeRequestContractsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestContractsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExchangeRequestContractsRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetExchangeRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExchangeRequestContractRule) Reset() {
	*x = GetExchangeRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestContractRule) ProtoMessage() {}

func (x *GetExchangeRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestContractRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{14}
}

func (x *GetExchangeRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetExchangeRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Contract *Contract `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *SetExchangeRequestContractRule) Reset() {
	*x = SetExchangeRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestContractRule) ProtoMessage() {}

func (x *SetExchangeRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestContractRule.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{15}
}

func (x *SetExchangeRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetExchangeRequestContractRule) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type DeleteExchangeRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteExchangeRequestContractRule) Reset() {
	*x = DeleteExchangeRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExchangeRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExchangeRequestContractRule) ProtoMessage() {}

func (x *DeleteExchangeRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExchangeRequestContractRule.ProtoReflect.Descriptor instead.
func (*DeleteExchangeRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteExchangeRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Contract `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool        `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseContract) Reset() {
	*x = ResponseContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseContract) ProtoMessage() {}

func (x *ResponseContract) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseContract.ProtoReflect.Descriptor instead.
func (*ResponseContract) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseContract) GetFields() []*Contract {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseContract) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseContract) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Chain structure.
type GetExchangeRequestChainsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetExchangeRequestChainsRule) Reset() {
	*x = GetExchangeRequestChainsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestChainsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestChainsRule) ProtoMessage() {}

func (x *GetExchangeRequestChainsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestChainsRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestChainsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{18}
}

func (x *GetExchangeRequestChainsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestChainsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetExchangeRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExchangeRequestChainRule) Reset() {
	*x = GetExchangeRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestChainRule) ProtoMessage() {}

func (x *GetExchangeRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestChainRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{19}
}

func (x *GetExchangeRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetExchangeRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Chain *Chain `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *SetExchangeRequestChainRule) Reset() {
	*x = SetExchangeRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestChainRule) ProtoMessage() {}

func (x *SetExchangeRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestChainRule.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{20}
}

func (x *SetExchangeRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetExchangeRequestChainRule) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

type DeleteExchangeRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteExchangeRequestChainRule) Reset() {
	*x = DeleteExchangeRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExchangeRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExchangeRequestChainRule) ProtoMessage() {}

func (x *DeleteExchangeRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExchangeRequestChainRule.ProtoReflect.Descriptor instead.
func (*DeleteExchangeRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteExchangeRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Chain `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseChain) Reset() {
	*x = ResponseChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseChain) ProtoMessage() {}

func (x *ResponseChain) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseChain.ProtoReflect.Descriptor instead.
func (*ResponseChain) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseChain) GetFields() []*Chain {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseChain) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseChain) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Currency structure.
type GetExchangeRequestCurrenciesRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetExchangeRequestCurrenciesRule) Reset() {
	*x = GetExchangeRequestCurrenciesRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestCurrenciesRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestCurrenciesRule) ProtoMessage() {}

func (x *GetExchangeRequestCurrenciesRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestCurrenciesRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestCurrenciesRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{23}
}

func (x *GetExchangeRequestCurrenciesRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetExchangeRequestCurrenciesRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestCurrenciesRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetExchangeRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetExchangeRequestCurrencyRule) Reset() {
	*x = GetExchangeRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestCurrencyRule) ProtoMessage() {}

func (x *GetExchangeRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{24}
}

func (x *GetExchangeRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SetExchangeRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string    `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image    []byte    `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Currency *Currency `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *SetExchangeRequestCurrencyRule) Reset() {
	*x = SetExchangeRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestCurrencyRule) ProtoMessage() {}

func (x *SetExchangeRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{25}
}

func (x *SetExchangeRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetExchangeRequestCurrencyRule) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *SetExchangeRequestCurrencyRule) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type DeleteExchangeRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *DeleteExchangeRequestCurrencyRule) Reset() {
	*x = DeleteExchangeRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExchangeRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExchangeRequestCurrencyRule) ProtoMessage() {}

func (x *DeleteExchangeRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExchangeRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*DeleteExchangeRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteExchangeRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ResponseCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Currency `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseCurrency) Reset() {
	*x = ResponseCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCurrency) ProtoMessage() {}

func (x *ResponseCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCurrency.ProtoReflect.Descriptor instead.
func (*ResponseCurrency) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{27}
}

func (x *ResponseCurrency) GetFields() []*Currency {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseCurrency) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Pair structure.
type GetExchangeRequestPairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetExchangeRequestPairs) Reset() {
	*x = GetExchangeRequestPairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestPairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestPairs) ProtoMessage() {}

func (x *GetExchangeRequestPairs) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestPairs.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestPairs) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{28}
}

func (x *GetExchangeRequestPairs) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetExchangeRequestPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetExchangeRequestPair) Reset() {
	*x = GetExchangeRequestPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestPair) ProtoMessage() {}

func (x *GetExchangeRequestPair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestPair.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestPair) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{29}
}

func (x *GetExchangeRequestPair) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestPair) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type GetExchangeRequestPairsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetExchangeRequestPairsRule) Reset() {
	*x = GetExchangeRequestPairsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestPairsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestPairsRule) ProtoMessage() {}

func (x *GetExchangeRequestPairsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestPairsRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestPairsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{30}
}

func (x *GetExchangeRequestPairsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestPairsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExchangeRequestPairsRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetExchangeRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExchangeRequestPairRule) Reset() {
	*x = GetExchangeRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestPairRule) ProtoMessage() {}

func (x *GetExchangeRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestPairRule.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{31}
}

func (x *GetExchangeRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetExchangeRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pair *Pair `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *SetExchangeRequestPairRule) Reset() {
	*x = SetExchangeRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestPairRule) ProtoMessage() {}

func (x *SetExchangeRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestPairRule.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{32}
}

func (x *SetExchangeRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetExchangeRequestPairRule) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

type DeleteExchangeRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteExchangeRequestPairRule) Reset() {
	*x = DeleteExchangeRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExchangeRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExchangeRequestPairRule) ProtoMessage() {}

func (x *DeleteExchangeRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExchangeRequestPairRule.ProtoReflect.Descriptor instead.
func (*DeleteExchangeRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteExchangeRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponsePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Pair `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool    `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponsePair) Reset() {
	*x = ResponsePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePair) ProtoMessage() {}

func (x *ResponsePair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePair.ProtoReflect.Descriptor instead.
func (*ResponsePair) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{34}
}

func (x *ResponsePair) GetFields() []*Pair {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponsePair) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponsePair) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Asset structure.
type GetExchangeRequestAssetsManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetExchangeRequestAssetsManual) Reset() {
	*x = GetExchangeRequestAssetsManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestAssetsManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestAssetsManual) ProtoMessage() {}

func (x *GetExchangeRequestAssetsManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestAssetsManual.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestAssetsManual) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{35}
}

type GetExchangeRequestAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetExchangeRequestAsset) Reset() {
	*x = GetExchangeRequestAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestAsset) ProtoMessage() {}

func (x *GetExchangeRequestAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestAsset.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{36}
}

func (x *GetExchangeRequestAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SetExchangeRequestAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Platform Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=proto.Platform" json:"platform,omitempty"`
	Protocol Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=proto.Protocol" json:"protocol,omitempty"`
	FinType  FinType  `protobuf:"varint,4,opt,name=fin_type,json=finType,proto3,enum=proto.FinType" json:"fin_type,omitempty"`
}

func (x *SetExchangeRequestAsset) Reset() {
	*x = SetExchangeRequestAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestAsset) ProtoMessage() {}

func (x *SetExchangeRequestAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestAsset.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{37}
}

func (x *SetExchangeRequestAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetExchangeRequestAsset) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *SetExchangeRequestAsset) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

func (x *SetExchangeRequestAsset) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

type ResponseAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Currency `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Address string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Success bool        `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseAsset) Reset() {
	*x = ResponseAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAsset) ProtoMessage() {}

func (x *ResponseAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAsset.ProtoReflect.Descriptor instead.
func (*ResponseAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseAsset) GetFields() []*Currency {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseAsset) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Symbol structure.
type GetExchangeRequestSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetExchangeRequestSymbol) Reset() {
	*x = GetExchangeRequestSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestSymbol) ProtoMessage() {}

func (x *GetExchangeRequestSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestSymbol.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestSymbol) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{39}
}

func (x *GetExchangeRequestSymbol) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestSymbol) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type ResponseSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseSymbol) Reset() {
	*x = ResponseSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSymbol) ProtoMessage() {}

func (x *ResponseSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSymbol.ProtoReflect.Descriptor instead.
func (*ResponseSymbol) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{40}
}

func (x *ResponseSymbol) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Analysis structure.
type GetExchangeRequestAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetExchangeRequestAnalysis) Reset() {
	*x = GetExchangeRequestAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestAnalysis) ProtoMessage() {}

func (x *GetExchangeRequestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestAnalysis.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestAnalysis) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{41}
}

func (x *GetExchangeRequestAnalysis) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestAnalysis) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResponseAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Analysis `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseAnalysis) Reset() {
	*x = ResponseAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAnalysis) ProtoMessage() {}

func (x *ResponseAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAnalysis.ProtoReflect.Descriptor instead.
func (*ResponseAnalysis) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{42}
}

func (x *ResponseAnalysis) GetFields() []*Analysis {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseAnalysis) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Marker structure.
type GetExchangeRequestMarkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetExchangeRequestMarkers) Reset() {
	*x = GetExchangeRequestMarkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestMarkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestMarkers) ProtoMessage() {}

func (x *GetExchangeRequestMarkers) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestMarkers.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestMarkers) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{43}
}

type ResponseMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseMarker) Reset() {
	*x = ResponseMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMarker) ProtoMessage() {}

func (x *ResponseMarker) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMarker.ProtoReflect.Descriptor instead.
func (*ResponseMarker) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseMarker) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Order structure.
type SetExchangeRequestOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     float64   `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	TradeType TradeType `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,enum=proto.TradeType" json:"trade_type,omitempty"`
	Assigning Assigning `protobuf:"varint,6,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
}

func (x *SetExchangeRequestOrder) Reset() {
	*x = SetExchangeRequestOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestOrder) ProtoMessage() {}

func (x *SetExchangeRequestOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestOrder.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{45}
}

func (x *SetExchangeRequestOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SetExchangeRequestOrder) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SetExchangeRequestOrder) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *SetExchangeRequestOrder) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *SetExchangeRequestOrder) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_MARKET
}

func (x *SetExchangeRequestOrder) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type GetExchangeRequestOrdersManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     bool      `protobuf:"varint,1,opt,name=owner,proto3" json:"owner,omitempty"`
	UserId    int64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit     int64     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int64     `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Decimal   float64   `protobuf:"fixed64,5,opt,name=decimal,proto3" json:"decimal,omitempty"`
	BaseUnit  string    `protobuf:"bytes,6,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,7,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Assigning Assigning `protobuf:"varint,8,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
	Status    Status    `protobuf:"varint,9,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (x *GetExchangeRequestOrdersManual) Reset() {
	*x = GetExchangeRequestOrdersManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestOrdersManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestOrdersManual) ProtoMessage() {}

func (x *GetExchangeRequestOrdersManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestOrdersManual.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestOrdersManual) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{46}
}

func (x *GetExchangeRequestOrdersManual) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *GetExchangeRequestOrdersManual) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetExchangeRequestOrdersManual) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestOrdersManual) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExchangeRequestOrdersManual) GetDecimal() float64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *GetExchangeRequestOrdersManual) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestOrdersManual) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetExchangeRequestOrdersManual) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

func (x *GetExchangeRequestOrdersManual) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

type CancelExchangeRequestOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelExchangeRequestOrder) Reset() {
	*x = CancelExchangeRequestOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelExchangeRequestOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelExchangeRequestOrder) ProtoMessage() {}

func (x *CancelExchangeRequestOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelExchangeRequestOrder.ProtoReflect.Descriptor instead.
func (*CancelExchangeRequestOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{47}
}

func (x *CancelExchangeRequestOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Order `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Volume  float64  `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Count   int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Success bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseOrder) Reset() {
	*x = ResponseOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOrder) ProtoMessage() {}

func (x *ResponseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOrder.ProtoReflect.Descriptor instead.
func (*ResponseOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{48}
}

func (x *ResponseOrder) GetFields() []*Order {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseOrder) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ResponseOrder) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseOrder) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Graph structure.
type GetExchangeRequestGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	From       int64  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         int64  `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	BaseUnit   string `protobuf:"bytes,4,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit  string `protobuf:"bytes,5,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Resolution string `protobuf:"bytes,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *GetExchangeRequestGraph) Reset() {
	*x = GetExchangeRequestGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestGraph) ProtoMessage() {}

func (x *GetExchangeRequestGraph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestGraph.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestGraph) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{49}
}

func (x *GetExchangeRequestGraph) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestGraph) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetExchangeRequestGraph) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *GetExchangeRequestGraph) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestGraph) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetExchangeRequestGraph) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type ResponseGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Graph `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Stats  *Stats   `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *ResponseGraph) Reset() {
	*x = ResponseGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGraph) ProtoMessage() {}

func (x *ResponseGraph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGraph.ProtoReflect.Descriptor instead.
func (*ResponseGraph) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{50}
}

func (x *ResponseGraph) GetFields() []*Graph {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseGraph) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Transfer structure.
type GetExchangeRequestTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     bool      `protobuf:"varint,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Limit     int64     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderId   int64     `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Assigning Assigning `protobuf:"varint,4,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
}

func (x *GetExchangeRequestTransfers) Reset() {
	*x = GetExchangeRequestTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestTransfers) ProtoMessage() {}

func (x *GetExchangeRequestTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestTransfers.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestTransfers) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{51}
}

func (x *GetExchangeRequestTransfers) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *GetExchangeRequestTransfers) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestTransfers) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GetExchangeRequestTransfers) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type ResponseTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Transfer `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseTransfer) Reset() {
	*x = ResponseTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTransfer) ProtoMessage() {}

func (x *ResponseTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTransfer.ProtoReflect.Descriptor instead.
func (*ResponseTransfer) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{52}
}

func (x *ResponseTransfer) GetFields() []*Transfer {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Trade structure.
type GetExchangeRequestTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int64     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int64     `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Assigning Assigning `protobuf:"varint,11,opt,name=assigning,proto3,enum=proto.Assigning" json:"assigning,omitempty"`
}

func (x *GetExchangeRequestTrades) Reset() {
	*x = GetExchangeRequestTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestTrades) ProtoMessage() {}

func (x *GetExchangeRequestTrades) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestTrades.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestTrades) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{53}
}

func (x *GetExchangeRequestTrades) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestTrades) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExchangeRequestTrades) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetExchangeRequestTrades) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetExchangeRequestTrades) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type ResponseTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Trade `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseTrades) Reset() {
	*x = ResponseTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrades) ProtoMessage() {}

func (x *ResponseTrades) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrades.ProtoReflect.Descriptor instead.
func (*ResponseTrades) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{54}
}

func (x *ResponseTrades) GetFields() []*Trade {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseTrades) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Transaction structure.
type GetExchangeRequestTransactionsManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	TxType TxType `protobuf:"varint,6,opt,name=tx_type,json=txType,proto3,enum=proto.TxType" json:"tx_type,omitempty"`
}

func (x *GetExchangeRequestTransactionsManual) Reset() {
	*x = GetExchangeRequestTransactionsManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRequestTransactionsManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRequestTransactionsManual) ProtoMessage() {}

func (x *GetExchangeRequestTransactionsManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRequestTransactionsManual.ProtoReflect.Descriptor instead.
func (*GetExchangeRequestTransactionsManual) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{55}
}

func (x *GetExchangeRequestTransactionsManual) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetExchangeRequestTransactionsManual) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExchangeRequestTransactionsManual) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExchangeRequestTransactionsManual) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetExchangeRequestTransactionsManual) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetExchangeRequestTransactionsManual) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_DEPOSIT
}

type ResponseTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Transaction `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseTransaction) Reset() {
	*x = ResponseTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTransaction) ProtoMessage() {}

func (x *ResponseTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTransaction.ProtoReflect.Descriptor instead.
func (*ResponseTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{56}
}

func (x *ResponseTransaction) GetFields() []*Transaction {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseTransaction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Withdraw structure.
type SetExchangeRequestWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Secure   string   `protobuf:"bytes,4,opt,name=secure,proto3" json:"secure,omitempty"`
	Price    float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity float64  `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Refresh  bool     `protobuf:"varint,7,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Platform Platform `protobuf:"varint,8,opt,name=platform,proto3,enum=proto.Platform" json:"platform,omitempty"`
}

func (x *SetExchangeRequestWithdraw) Reset() {
	*x = SetExchangeRequestWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExchangeRequestWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExchangeRequestWithdraw) ProtoMessage() {}

func (x *SetExchangeRequestWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExchangeRequestWithdraw.ProtoReflect.Descriptor instead.
func (*SetExchangeRequestWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{57}
}

func (x *SetExchangeRequestWithdraw) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetExchangeRequestWithdraw) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetExchangeRequestWithdraw) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SetExchangeRequestWithdraw) GetSecure() string {
	if x != nil {
		return x.Secure
	}
	return ""
}

func (x *SetExchangeRequestWithdraw) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SetExchangeRequestWithdraw) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SetExchangeRequestWithdraw) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *SetExchangeRequestWithdraw) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

type CancelExchangeRequestWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelExchangeRequestWithdraw) Reset() {
	*x = CancelExchangeRequestWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelExchangeRequestWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelExchangeRequestWithdraw) ProtoMessage() {}

func (x *CancelExchangeRequestWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelExchangeRequestWithdraw.ProtoReflect.Descriptor instead.
func (*CancelExchangeRequestWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{58}
}

func (x *CancelExchangeRequestWithdraw) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseWithdraw) Reset() {
	*x = ResponseWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_exchange_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWithdraw) ProtoMessage() {}

func (x *ResponseWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_exchange_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWithdraw.ProtoReflect.Descriptor instead.
func (*ResponseWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_exchange_proto_rawDescGZIP(), []int{59}
}

func (x *ResponseWithdraw) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_server_proto_exchange_proto protoreflect.FileDescriptor

var file_server_proto_exchange_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x93, 0x05, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x66, 0x65, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd6, 0x04, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x70, 0x63, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xab, 0x02, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6,
	0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x26, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x63, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51,
	0x0a, 0x1b, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x38, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x7b, 0x0a, 0x1e, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3b, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x51, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x54, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x22, 0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x4d, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x2f,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x63, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x23, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x28, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0xa6, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x1a, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x4c, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xef, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0x2f, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x87,
	0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x5f, 0x46,
	0x41, 0x4e, 0x54, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x5f, 0x41, 0x56, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x10, 0x08, 0x2a, 0x96, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x43,
	0x31, 0x31, 0x35, 0x35, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x39, 0x39, 0x38,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x45, 0x50, 0x32, 0x30, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x50,
	0x37, 0x32, 0x31, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x50, 0x31, 0x31, 0x35, 0x35,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x43, 0x32, 0x30, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x50,
	0x39, 0x39, 0x38, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x50, 0x32, 0x32, 0x33, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x43, 0x32, 0x30, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x43, 0x31,
	0x31, 0x35, 0x35, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10,
	0x10, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x11, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x52, 0x43, 0x32, 0x30, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x43, 0x37,
	0x32, 0x31, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10,
	0x14, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10, 0x15, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x43,
	0x32, 0x30, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x18,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x19, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x43,
	0x32, 0x32, 0x33, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x43, 0x32, 0x30, 0x10, 0x1c,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43,
	0x39, 0x39, 0x38, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10,
	0x20, 0x2a, 0x3d, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03,
	0x2a, 0x1a, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x4b, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x44, 0x10, 0x01, 0x2a, 0x22, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01,
	0x2a, 0x24, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x53, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x41, 0x54, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52,
	0x4f, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x1e,
	0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x49,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49,
	0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x56, 0x49, 0x53, 0x41, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x1e, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x2a, 0x6e, 0x0a, 0x06, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x04, 0x32, 0xff, 0x22, 0x0a, 0x08, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73,
	0x65, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x67,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32,
	0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f,
	0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c,
	0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x3b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x01, 0x2a, 0x5a,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x72, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a,
	0x12, 0x80, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f,
	0x73, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0x80, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x0e, 0x5a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_server_proto_exchange_proto_rawDescOnce sync.Once
	file_server_proto_exchange_proto_rawDescData = file_server_proto_exchange_proto_rawDesc
)

func file_server_proto_exchange_proto_rawDescGZIP() []byte {
	file_server_proto_exchange_proto_rawDescOnce.Do(func() {
		file_server_proto_exchange_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_exchange_proto_rawDescData)
	})
	return file_server_proto_exchange_proto_rawDescData
}

var file_server_proto_exchange_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_server_proto_exchange_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_server_proto_exchange_proto_goTypes = []interface{}{
	(Tag)(0),                                // 0: proto.Tag
	(Protocol)(0),                           // 1: proto.Protocol
	(Assigning)(0),                          // 2: proto.Assigning
	(Spread)(0),                             // 3: proto.Spread
	(TradeType)(0),                          // 4: proto.TradeType
	(TxType)(0),                             // 5: proto.TxType
	(FinType)(0),                            // 6: proto.FinType
	(OrderType)(0),                          // 7: proto.OrderType
	(Status)(0),                             // 8: proto.Status
	(Summary)(0),                            // 9: proto.Summary
	(Platform)(0),                           // 10: proto.Platform
	(Balance)(0),                            // 11: proto.Balance
	(Pusher)(0),                             // 12: proto.Pusher
	(*Contract)(nil),                        // 13: proto.Contract
	(*Currency)(nil),                        // 14: proto.Currency
	(*Chain)(nil),                           // 15: proto.Chain
	(*Pair)(nil),                            // 16: proto.Pair
	(*Graph)(nil),                           // 17: proto.Graph
	(*Stats)(nil),                           // 18: proto.Stats
	(*Trade)(nil),                           // 19: proto.Trade
	(*Order)(nil),                           // 20: proto.Order
	(*Transaction)(nil),                     // 21: proto.Transaction
	(*Analysis)(nil),                        // 22: proto.Analysis
	(*Transfer)(nil),                        // 23: proto.Transfer
	(*GetExchangeRequestPriceManual)(nil),   // 24: proto.GetExchangeRequestPriceManual
	(*ResponsePrice)(nil),                   // 25: proto.ResponsePrice
	(*GetExchangeRequestContractsRule)(nil), // 26: proto.GetExchangeRequestContractsRule
	(*GetExchangeRequestContractRule)(nil),  // 27: proto.GetExchangeRequestContractRule
	(*SetExchangeRequestContractRule)(nil),  // 28: proto.SetExchangeRequestContractRule
	(*DeleteExchangeRequestContractRule)(nil),    // 29: proto.DeleteExchangeRequestContractRule
	(*ResponseContract)(nil),                     // 30: proto.ResponseContract
	(*GetExchangeRequestChainsRule)(nil),         // 31: proto.GetExchangeRequestChainsRule
	(*GetExchangeRequestChainRule)(nil),          // 32: proto.GetExchangeRequestChainRule
	(*SetExchangeRequestChainRule)(nil),          // 33: proto.SetExchangeRequestChainRule
	(*DeleteExchangeRequestChainRule)(nil),       // 34: proto.DeleteExchangeRequestChainRule
	(*ResponseChain)(nil),                        // 35: proto.ResponseChain
	(*GetExchangeRequestCurrenciesRule)(nil),     // 36: proto.GetExchangeRequestCurrenciesRule
	(*GetExchangeRequestCurrencyRule)(nil),       // 37: proto.GetExchangeRequestCurrencyRule
	(*SetExchangeRequestCurrencyRule)(nil),       // 38: proto.SetExchangeRequestCurrencyRule
	(*DeleteExchangeRequestCurrencyRule)(nil),    // 39: proto.DeleteExchangeRequestCurrencyRule
	(*ResponseCurrency)(nil),                     // 40: proto.ResponseCurrency
	(*GetExchangeRequestPairs)(nil),              // 41: proto.GetExchangeRequestPairs
	(*GetExchangeRequestPair)(nil),               // 42: proto.GetExchangeRequestPair
	(*GetExchangeRequestPairsRule)(nil),          // 43: proto.GetExchangeRequestPairsRule
	(*GetExchangeRequestPairRule)(nil),           // 44: proto.GetExchangeRequestPairRule
	(*SetExchangeRequestPairRule)(nil),           // 45: proto.SetExchangeRequestPairRule
	(*DeleteExchangeRequestPairRule)(nil),        // 46: proto.DeleteExchangeRequestPairRule
	(*ResponsePair)(nil),                         // 47: proto.ResponsePair
	(*GetExchangeRequestAssetsManual)(nil),       // 48: proto.GetExchangeRequestAssetsManual
	(*GetExchangeRequestAsset)(nil),              // 49: proto.GetExchangeRequestAsset
	(*SetExchangeRequestAsset)(nil),              // 50: proto.SetExchangeRequestAsset
	(*ResponseAsset)(nil),                        // 51: proto.ResponseAsset
	(*GetExchangeRequestSymbol)(nil),             // 52: proto.GetExchangeRequestSymbol
	(*ResponseSymbol)(nil),                       // 53: proto.ResponseSymbol
	(*GetExchangeRequestAnalysis)(nil),           // 54: proto.GetExchangeRequestAnalysis
	(*ResponseAnalysis)(nil),                     // 55: proto.ResponseAnalysis
	(*GetExchangeRequestMarkers)(nil),            // 56: proto.GetExchangeRequestMarkers
	(*ResponseMarker)(nil),                       // 57: proto.ResponseMarker
	(*SetExchangeRequestOrder)(nil),              // 58: proto.SetExchangeRequestOrder
	(*GetExchangeRequestOrdersManual)(nil),       // 59: proto.GetExchangeRequestOrdersManual
	(*CancelExchangeRequestOrder)(nil),           // 60: proto.CancelExchangeRequestOrder
	(*ResponseOrder)(nil),                        // 61: proto.ResponseOrder
	(*GetExchangeRequestGraph)(nil),              // 62: proto.GetExchangeRequestGraph
	(*ResponseGraph)(nil),                        // 63: proto.ResponseGraph
	(*GetExchangeRequestTransfers)(nil),          // 64: proto.GetExchangeRequestTransfers
	(*ResponseTransfer)(nil),                     // 65: proto.ResponseTransfer
	(*GetExchangeRequestTrades)(nil),             // 66: proto.GetExchangeRequestTrades
	(*ResponseTrades)(nil),                       // 67: proto.ResponseTrades
	(*GetExchangeRequestTransactionsManual)(nil), // 68: proto.GetExchangeRequestTransactionsManual
	(*ResponseTransaction)(nil),                  // 69: proto.ResponseTransaction
	(*SetExchangeRequestWithdraw)(nil),           // 70: proto.SetExchangeRequestWithdraw
	(*CancelExchangeRequestWithdraw)(nil),        // 71: proto.CancelExchangeRequestWithdraw
	(*ResponseWithdraw)(nil),                     // 72: proto.ResponseWithdraw
}
var file_server_proto_exchange_proto_depIdxs = []int32{
	10, // 0: proto.Contract.platform:type_name -> proto.Platform
	1,  // 1: proto.Contract.protocol:type_name -> proto.Protocol
	15, // 2: proto.Currency.chains:type_name -> proto.Chain
	16, // 3: proto.Currency.pairs:type_name -> proto.Pair
	6,  // 4: proto.Currency.fin_type:type_name -> proto.FinType
	10, // 5: proto.Chain.platform:type_name -> proto.Platform
	13, // 6: proto.Chain.contract:type_name -> proto.Contract
	0,  // 7: proto.Chain.tag:type_name -> proto.Tag
	2,  // 8: proto.Trade.assigning:type_name -> proto.Assigning
	2,  // 9: proto.Order.assigning:type_name -> proto.Assigning
	8,  // 10: proto.Order.status:type_name -> proto.Status
	5,  // 11: proto.Transaction.tx_type:type_name -> proto.TxType
	6,  // 12: proto.Transaction.fin_type:type_name -> proto.FinType
	10, // 13: proto.Transaction.platform:type_name -> proto.Platform
	1,  // 14: proto.Transaction.protocol:type_name -> proto.Protocol
	8,  // 15: proto.Transaction.status:type_name -> proto.Status
	15, // 16: proto.Transaction.chain:type_name -> proto.Chain
	2,  // 17: proto.Transfer.assigning:type_name -> proto.Assigning
	13, // 18: proto.SetExchangeRequestContractRule.contract:type_name -> proto.Contract
	13, // 19: proto.ResponseContract.fields:type_name -> proto.Contract
	15, // 20: proto.SetExchangeRequestChainRule.chain:type_name -> proto.Chain
	15, // 21: proto.ResponseChain.fields:type_name -> proto.Chain
	14, // 22: proto.SetExchangeRequestCurrencyRule.currency:type_name -> proto.Currency
	14, // 23: proto.ResponseCurrency.fields:type_name -> proto.Currency
	16, // 24: proto.SetExchangeRequestPairRule.pair:type_name -> proto.Pair
	16, // 25: proto.ResponsePair.fields:type_name -> proto.Pair
	10, // 26: proto.SetExchangeRequestAsset.platform:type_name -> proto.Platform
	1,  // 27: proto.SetExchangeRequestAsset.protocol:type_name -> proto.Protocol
	6,  // 28: proto.SetExchangeRequestAsset.fin_type:type_name -> proto.FinType
	14, // 29: proto.ResponseAsset.fields:type_name -> proto.Currency
	22, // 30: proto.ResponseAnalysis.fields:type_name -> proto.Analysis
	4,  // 31: proto.SetExchangeRequestOrder.trade_type:type_name -> proto.TradeType
	2,  // 32: proto.SetExchangeRequestOrder.assigning:type_name -> proto.Assigning
	2,  // 33: proto.GetExchangeRequestOrdersManual.assigning:type_name -> proto.Assigning
	8,  // 34: proto.GetExchangeRequestOrdersManual.status:type_name -> proto.Status
	20, // 35: proto.ResponseOrder.fields:type_name -> proto.Order
	17, // 36: proto.ResponseGraph.fields:type_name -> proto.Graph
	18, // 37: proto.ResponseGraph.stats:type_name -> proto.Stats
	2,  // 38: proto.GetExchangeRequestTransfers.assigning:type_name -> proto.Assigning
	23, // 39: proto.ResponseTransfer.fields:type_name -> proto.Transfer
	2,  // 40: proto.GetExchangeRequestTrades.assigning:type_name -> proto.Assigning
	19, // 41: proto.ResponseTrades.fields:type_name -> proto.Trade
	5,  // 42: proto.GetExchangeRequestTransactionsManual.tx_type:type_name -> proto.TxType
	21, // 43: proto.ResponseTransaction.fields:type_name -> proto.Transaction
	10, // 44: proto.SetExchangeRequestWithdraw.platform:type_name -> proto.Platform
	50, // 45: proto.Exchange.SetAsset:input_type -> proto.SetExchangeRequestAsset
	48, // 46: proto.Exchange.GetAssets:input_type -> proto.GetExchangeRequestAssetsManual
	49, // 47: proto.Exchange.GetAsset:input_type -> proto.GetExchangeRequestAsset
	52, // 48: proto.Exchange.GetSymbol:input_type -> proto.GetExchangeRequestSymbol
	54, // 49: proto.Exchange.GetAnalysis:input_type -> proto.GetExchangeRequestAnalysis
	56, // 50: proto.Exchange.GetMarkers:input_type -> proto.GetExchangeRequestMarkers
	41, // 51: proto.Exchange.GetPairs:input_type -> proto.GetExchangeRequestPairs
	42, // 52: proto.Exchange.GetPair:input_type -> proto.GetExchangeRequestPair
	58, // 53: proto.Exchange.SetOrder:input_type -> proto.SetExchangeRequestOrder
	60, // 54: proto.Exchange.CancelOrder:input_type -> proto.CancelExchangeRequestOrder
	59, // 55: proto.Exchange.GetOrders:input_type -> proto.GetExchangeRequestOrdersManual
	62, // 56: proto.Exchange.GetGraph:input_type -> proto.GetExchangeRequestGraph
	64, // 57: proto.Exchange.GetTransfers:input_type -> proto.GetExchangeRequestTransfers
	66, // 58: proto.Exchange.GetTrades:input_type -> proto.GetExchangeRequestTrades
	24, // 59: proto.Exchange.GetPrice:input_type -> proto.GetExchangeRequestPriceManual
	68, // 60: proto.Exchange.GetTransactions:input_type -> proto.GetExchangeRequestTransactionsManual
	70, // 61: proto.Exchange.SetWithdraw:input_type -> proto.SetExchangeRequestWithdraw
	71, // 62: proto.Exchange.CancelWithdraw:input_type -> proto.CancelExchangeRequestWithdraw
	24, // 63: proto.Exchange.GetMarketPriceRule:input_type -> proto.GetExchangeRequestPriceManual
	38, // 64: proto.Exchange.SetCurrencyRule:input_type -> proto.SetExchangeRequestCurrencyRule
	37, // 65: proto.Exchange.GetCurrencyRule:input_type -> proto.GetExchangeRequestCurrencyRule
	36, // 66: proto.Exchange.GetCurrenciesRule:input_type -> proto.GetExchangeRequestCurrenciesRule
	39, // 67: proto.Exchange.DeleteCurrencyRule:input_type -> proto.DeleteExchangeRequestCurrencyRule
	31, // 68: proto.Exchange.GetChainsRule:input_type -> proto.GetExchangeRequestChainsRule
	32, // 69: proto.Exchange.GetChainRule:input_type -> proto.GetExchangeRequestChainRule
	33, // 70: proto.Exchange.SetChainRule:input_type -> proto.SetExchangeRequestChainRule
	34, // 71: proto.Exchange.DeleteChainRule:input_type -> proto.DeleteExchangeRequestChainRule
	43, // 72: proto.Exchange.GetPairsRule:input_type -> proto.GetExchangeRequestPairsRule
	44, // 73: proto.Exchange.GetPairRule:input_type -> proto.GetExchangeRequestPairRule
	45, // 74: proto.Exchange.SetPairRule:input_type -> proto.SetExchangeRequestPairRule
	46, // 75: proto.Exchange.DeletePairRule:input_type -> proto.DeleteExchangeRequestPairRule
	26, // 76: proto.Exchange.GetContractsRule:input_type -> proto.GetExchangeRequestContractsRule
	27, // 77: proto.Exchange.GetContractRule:input_type -> proto.GetExchangeRequestContractRule
	28, // 78: proto.Exchange.SetContractRule:input_type -> proto.SetExchangeRequestContractRule
	29, // 79: proto.Exchange.DeleteContractRule:input_type -> proto.DeleteExchangeRequestContractRule
	68, // 80: proto.Exchange.GetTransactionsRule:input_type -> proto.GetExchangeRequestTransactionsManual
	59, // 81: proto.Exchange.GetOrdersRule:input_type -> proto.GetExchangeRequestOrdersManual
	48, // 82: proto.Exchange.GetAssetsRule:input_type -> proto.GetExchangeRequestAssetsManual
	51, // 83: proto.Exchange.SetAsset:output_type -> proto.ResponseAsset
	51, // 84: proto.Exchange.GetAssets:output_type -> proto.ResponseAsset
	51, // 85: proto.Exchange.GetAsset:output_type -> proto.ResponseAsset
	53, // 86: proto.Exchange.GetSymbol:output_type -> proto.ResponseSymbol
	55, // 87: proto.Exchange.GetAnalysis:output_type -> proto.ResponseAnalysis
	57, // 88: proto.Exchange.GetMarkers:output_type -> proto.ResponseMarker
	47, // 89: proto.Exchange.GetPairs:output_type -> proto.ResponsePair
	47, // 90: proto.Exchange.GetPair:output_type -> proto.ResponsePair
	61, // 91: proto.Exchange.SetOrder:output_type -> proto.ResponseOrder
	61, // 92: proto.Exchange.CancelOrder:output_type -> proto.ResponseOrder
	61, // 93: proto.Exchange.GetOrders:output_type -> proto.ResponseOrder
	63, // 94: proto.Exchange.GetGraph:output_type -> proto.ResponseGraph
	65, // 95: proto.Exchange.GetTransfers:output_type -> proto.ResponseTransfer
	67, // 96: proto.Exchange.GetTrades:output_type -> proto.ResponseTrades
	25, // 97: proto.Exchange.GetPrice:output_type -> proto.ResponsePrice
	69, // 98: proto.Exchange.GetTransactions:output_type -> proto.ResponseTransaction
	72, // 99: proto.Exchange.SetWithdraw:output_type -> proto.ResponseWithdraw
	72, // 100: proto.Exchange.CancelWithdraw:output_type -> proto.ResponseWithdraw
	25, // 101: proto.Exchange.GetMarketPriceRule:output_type -> proto.ResponsePrice
	40, // 102: proto.Exchange.SetCurrencyRule:output_type -> proto.ResponseCurrency
	40, // 103: proto.Exchange.GetCurrencyRule:output_type -> proto.ResponseCurrency
	40, // 104: proto.Exchange.GetCurrenciesRule:output_type -> proto.ResponseCurrency
	40, // 105: proto.Exchange.DeleteCurrencyRule:output_type -> proto.ResponseCurrency
	35, // 106: proto.Exchange.GetChainsRule:output_type -> proto.ResponseChain
	35, // 107: proto.Exchange.GetChainRule:output_type -> proto.ResponseChain
	35, // 108: proto.Exchange.SetChainRule:output_type -> proto.ResponseChain
	35, // 109: proto.Exchange.DeleteChainRule:output_type -> proto.ResponseChain
	47, // 110: proto.Exchange.GetPairsRule:output_type -> proto.ResponsePair
	47, // 111: proto.Exchange.GetPairRule:output_type -> proto.ResponsePair
	47, // 112: proto.Exchange.SetPairRule:output_type -> proto.ResponsePair
	47, // 113: proto.Exchange.DeletePairRule:output_type -> proto.ResponsePair
	30, // 114: proto.Exchange.GetContractsRule:output_type -> proto.ResponseContract
	30, // 115: proto.Exchange.GetContractRule:output_type -> proto.ResponseContract
	30, // 116: proto.Exchange.SetContractRule:output_type -> proto.ResponseContract
	30, // 117: proto.Exchange.DeleteContractRule:output_type -> proto.ResponseContract
	69, // 118: proto.Exchange.GetTransactionsRule:output_type -> proto.ResponseTransaction
	61, // 119: proto.Exchange.GetOrdersRule:output_type -> proto.ResponseOrder
	51, // 120: proto.Exchange.GetAssetsRule:output_type -> proto.ResponseAsset
	83, // [83:121] is the sub-list for method output_type
	45, // [45:83] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_server_proto_exchange_proto_init() }
func file_server_proto_exchange_proto_init() {
	if File_server_proto_exchange_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_exchange_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestPriceManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestContractsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExchangeRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestChainsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExchangeRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestCurrenciesRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExchangeRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestPairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestPairsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExchangeRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestAssetsManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestMarkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestOrdersManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelExchangeRequestOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRequestTransactionsManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExchangeRequestWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelExchangeRequestWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_exchange_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_exchange_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_exchange_proto_goTypes,
		DependencyIndexes: file_server_proto_exchange_proto_depIdxs,
		EnumInfos:         file_server_proto_exchange_proto_enumTypes,
		MessageInfos:      file_server_proto_exchange_proto_msgTypes,
	}.Build()
	File_server_proto_exchange_proto = out.File
	file_server_proto_exchange_proto_rawDesc = nil
	file_server_proto_exchange_proto_goTypes = nil
	file_server_proto_exchange_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeClient interface {
	// Set asset address.
	SetAsset(ctx context.Context, in *SetExchangeRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get assets.
	GetAssets(ctx context.Context, in *GetExchangeRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get asset.
	GetAsset(ctx context.Context, in *GetExchangeRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get symbol.
	GetSymbol(ctx context.Context, in *GetExchangeRequestSymbol, opts ...grpc.CallOption) (*ResponseSymbol, error)
	// Get analysis.
	GetAnalysis(ctx context.Context, in *GetExchangeRequestAnalysis, opts ...grpc.CallOption) (*ResponseAnalysis, error)
	// Get markers.
	GetMarkers(ctx context.Context, in *GetExchangeRequestMarkers, opts ...grpc.CallOption) (*ResponseMarker, error)
	// Get pairs.
	GetPairs(ctx context.Context, in *GetExchangeRequestPairs, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get pair.
	GetPair(ctx context.Context, in *GetExchangeRequestPair, opts ...grpc.CallOption) (*ResponsePair, error)
	// Set order.
	SetOrder(ctx context.Context, in *SetExchangeRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Cancel order.
	CancelOrder(ctx context.Context, in *CancelExchangeRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get order.
	GetOrders(ctx context.Context, in *GetExchangeRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get graph.
	GetGraph(ctx context.Context, in *GetExchangeRequestGraph, opts ...grpc.CallOption) (*ResponseGraph, error)
	// Get trade transfers.
	GetTransfers(ctx context.Context, in *GetExchangeRequestTransfers, opts ...grpc.CallOption) (*ResponseTransfer, error)
	// Get trades.
	GetTrades(ctx context.Context, in *GetExchangeRequestTrades, opts ...grpc.CallOption) (*ResponseTrades, error)
	// Get price.
	GetPrice(ctx context.Context, in *GetExchangeRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error)
	// Get transactions.
	GetTransactions(ctx context.Context, in *GetExchangeRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error)
	// Set withdraw.
	SetWithdraw(ctx context.Context, in *SetExchangeRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error)
	// Cancel withdraw.
	CancelWithdraw(ctx context.Context, in *CancelExchangeRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error)
	// Administration api.
	// Get market-price.
	GetMarketPriceRule(ctx context.Context, in *GetExchangeRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error)
	// Set currency.
	SetCurrencyRule(ctx context.Context, in *SetExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get currency.
	GetCurrencyRule(ctx context.Context, in *GetExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get currencies.
	GetCurrenciesRule(ctx context.Context, in *GetExchangeRequestCurrenciesRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Delete currency.
	DeleteCurrencyRule(ctx context.Context, in *DeleteExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get chains.
	GetChainsRule(ctx context.Context, in *GetExchangeRequestChainsRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Get chain.
	GetChainRule(ctx context.Context, in *GetExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Set chain.
	SetChainRule(ctx context.Context, in *SetExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Delete chain.
	DeleteChainRule(ctx context.Context, in *DeleteExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Get pairs.
	GetPairsRule(ctx context.Context, in *GetExchangeRequestPairsRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get pair.
	GetPairRule(ctx context.Context, in *GetExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Set pair.
	SetPairRule(ctx context.Context, in *SetExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Delete pair.
	DeletePairRule(ctx context.Context, in *DeleteExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get contracts.
	GetContractsRule(ctx context.Context, in *GetExchangeRequestContractsRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Get contract.
	GetContractRule(ctx context.Context, in *GetExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Set contract.
	SetContractRule(ctx context.Context, in *SetExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Delete contract.
	DeleteContractRule(ctx context.Context, in *DeleteExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Get transactions.
	GetTransactionsRule(ctx context.Context, in *GetExchangeRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error)
	// Get orders.
	GetOrdersRule(ctx context.Context, in *GetExchangeRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get assets.
	GetAssetsRule(ctx context.Context, in *GetExchangeRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) SetAsset(ctx context.Context, in *SetExchangeRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetAssets(ctx context.Context, in *GetExchangeRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetAsset(ctx context.Context, in *GetExchangeRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetSymbol(ctx context.Context, in *GetExchangeRequestSymbol, opts ...grpc.CallOption) (*ResponseSymbol, error) {
	out := new(ResponseSymbol)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetAnalysis(ctx context.Context, in *GetExchangeRequestAnalysis, opts ...grpc.CallOption) (*ResponseAnalysis, error) {
	out := new(ResponseAnalysis)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetMarkers(ctx context.Context, in *GetExchangeRequestMarkers, opts ...grpc.CallOption) (*ResponseMarker, error) {
	out := new(ResponseMarker)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetMarkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetPairs(ctx context.Context, in *GetExchangeRequestPairs, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetPair(ctx context.Context, in *GetExchangeRequestPair, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetOrder(ctx context.Context, in *SetExchangeRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CancelOrder(ctx context.Context, in *CancelExchangeRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/proto.Exchange/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOrders(ctx context.Context, in *GetExchangeRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetGraph(ctx context.Context, in *GetExchangeRequestGraph, opts ...grpc.CallOption) (*ResponseGraph, error) {
	out := new(ResponseGraph)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetTransfers(ctx context.Context, in *GetExchangeRequestTransfers, opts ...grpc.CallOption) (*ResponseTransfer, error) {
	out := new(ResponseTransfer)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetTrades(ctx context.Context, in *GetExchangeRequestTrades, opts ...grpc.CallOption) (*ResponseTrades, error) {
	out := new(ResponseTrades)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetPrice(ctx context.Context, in *GetExchangeRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error) {
	out := new(ResponsePrice)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetTransactions(ctx context.Context, in *GetExchangeRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error) {
	out := new(ResponseTransaction)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetWithdraw(ctx context.Context, in *SetExchangeRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error) {
	out := new(ResponseWithdraw)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CancelWithdraw(ctx context.Context, in *CancelExchangeRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error) {
	out := new(ResponseWithdraw)
	err := c.cc.Invoke(ctx, "/proto.Exchange/CancelWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetMarketPriceRule(ctx context.Context, in *GetExchangeRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error) {
	out := new(ResponsePrice)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetMarketPriceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetCurrencyRule(ctx context.Context, in *SetExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetCurrencyRule(ctx context.Context, in *GetExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetCurrenciesRule(ctx context.Context, in *GetExchangeRequestCurrenciesRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetCurrenciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteCurrencyRule(ctx context.Context, in *DeleteExchangeRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/proto.Exchange/DeleteCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetChainsRule(ctx context.Context, in *GetExchangeRequestChainsRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetChainsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetChainRule(ctx context.Context, in *GetExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetChainRule(ctx context.Context, in *SetExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteChainRule(ctx context.Context, in *DeleteExchangeRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/proto.Exchange/DeleteChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetPairsRule(ctx context.Context, in *GetExchangeRequestPairsRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetPairsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetPairRule(ctx context.Context, in *GetExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetPairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetPairRule(ctx context.Context, in *SetExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetPairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeletePairRule(ctx context.Context, in *DeleteExchangeRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/proto.Exchange/DeletePairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetContractsRule(ctx context.Context, in *GetExchangeRequestContractsRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetContractsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetContractRule(ctx context.Context, in *GetExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) SetContractRule(ctx context.Context, in *SetExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/proto.Exchange/SetContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteContractRule(ctx context.Context, in *DeleteExchangeRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/proto.Exchange/DeleteContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetTransactionsRule(ctx context.Context, in *GetExchangeRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error) {
	out := new(ResponseTransaction)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetTransactionsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOrdersRule(ctx context.Context, in *GetExchangeRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetOrdersRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetAssetsRule(ctx context.Context, in *GetExchangeRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/proto.Exchange/GetAssetsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
type ExchangeServer interface {
	// Set asset address.
	SetAsset(context.Context, *SetExchangeRequestAsset) (*ResponseAsset, error)
	// Get assets.
	GetAssets(context.Context, *GetExchangeRequestAssetsManual) (*ResponseAsset, error)
	// Get asset.
	GetAsset(context.Context, *GetExchangeRequestAsset) (*ResponseAsset, error)
	// Get symbol.
	GetSymbol(context.Context, *GetExchangeRequestSymbol) (*ResponseSymbol, error)
	// Get analysis.
	GetAnalysis(context.Context, *GetExchangeRequestAnalysis) (*ResponseAnalysis, error)
	// Get markers.
	GetMarkers(context.Context, *GetExchangeRequestMarkers) (*ResponseMarker, error)
	// Get pairs.
	GetPairs(context.Context, *GetExchangeRequestPairs) (*ResponsePair, error)
	// Get pair.
	GetPair(context.Context, *GetExchangeRequestPair) (*ResponsePair, error)
	// Set order.
	SetOrder(context.Context, *SetExchangeRequestOrder) (*ResponseOrder, error)
	// Cancel order.
	CancelOrder(context.Context, *CancelExchangeRequestOrder) (*ResponseOrder, error)
	// Get order.
	GetOrders(context.Context, *GetExchangeRequestOrdersManual) (*ResponseOrder, error)
	// Get graph.
	GetGraph(context.Context, *GetExchangeRequestGraph) (*ResponseGraph, error)
	// Get trade transfers.
	GetTransfers(context.Context, *GetExchangeRequestTransfers) (*ResponseTransfer, error)
	// Get trades.
	GetTrades(context.Context, *GetExchangeRequestTrades) (*ResponseTrades, error)
	// Get price.
	GetPrice(context.Context, *GetExchangeRequestPriceManual) (*ResponsePrice, error)
	// Get transactions.
	GetTransactions(context.Context, *GetExchangeRequestTransactionsManual) (*ResponseTransaction, error)
	// Set withdraw.
	SetWithdraw(context.Context, *SetExchangeRequestWithdraw) (*ResponseWithdraw, error)
	// Cancel withdraw.
	CancelWithdraw(context.Context, *CancelExchangeRequestWithdraw) (*ResponseWithdraw, error)
	// Administration api.
	// Get market-price.
	GetMarketPriceRule(context.Context, *GetExchangeRequestPriceManual) (*ResponsePrice, error)
	// Set currency.
	SetCurrencyRule(context.Context, *SetExchangeRequestCurrencyRule) (*ResponseCurrency, error)
	// Get currency.
	GetCurrencyRule(context.Context, *GetExchangeRequestCurrencyRule) (*ResponseCurrency, error)
	// Get currencies.
	GetCurrenciesRule(context.Context, *GetExchangeRequestCurrenciesRule) (*ResponseCurrency, error)
	// Delete currency.
	DeleteCurrencyRule(context.Context, *DeleteExchangeRequestCurrencyRule) (*ResponseCurrency, error)
	// Get chains.
	GetChainsRule(context.Context, *GetExchangeRequestChainsRule) (*ResponseChain, error)
	// Get chain.
	GetChainRule(context.Context, *GetExchangeRequestChainRule) (*ResponseChain, error)
	// Set chain.
	SetChainRule(context.Context, *SetExchangeRequestChainRule) (*ResponseChain, error)
	// Delete chain.
	DeleteChainRule(context.Context, *DeleteExchangeRequestChainRule) (*ResponseChain, error)
	// Get pairs.
	GetPairsRule(context.Context, *GetExchangeRequestPairsRule) (*ResponsePair, error)
	// Get pair.
	GetPairRule(context.Context, *GetExchangeRequestPairRule) (*ResponsePair, error)
	// Set pair.
	SetPairRule(context.Context, *SetExchangeRequestPairRule) (*ResponsePair, error)
	// Delete pair.
	DeletePairRule(context.Context, *DeleteExchangeRequestPairRule) (*ResponsePair, error)
	// Get contracts.
	GetContractsRule(context.Context, *GetExchangeRequestContractsRule) (*ResponseContract, error)
	// Get contract.
	GetContractRule(context.Context, *GetExchangeRequestContractRule) (*ResponseContract, error)
	// Set contract.
	SetContractRule(context.Context, *SetExchangeRequestContractRule) (*ResponseContract, error)
	// Delete contract.
	DeleteContractRule(context.Context, *DeleteExchangeRequestContractRule) (*ResponseContract, error)
	// Get transactions.
	GetTransactionsRule(context.Context, *GetExchangeRequestTransactionsManual) (*ResponseTransaction, error)
	// Get orders.
	GetOrdersRule(context.Context, *GetExchangeRequestOrdersManual) (*ResponseOrder, error)
	// Get assets.
	GetAssetsRule(context.Context, *GetExchangeRequestAssetsManual) (*ResponseAsset, error)
}

// UnimplementedExchangeServer can be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (*UnimplementedExchangeServer) SetAsset(context.Context, *SetExchangeRequestAsset) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAsset not implemented")
}
func (*UnimplementedExchangeServer) GetAssets(context.Context, *GetExchangeRequestAssetsManual) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (*UnimplementedExchangeServer) GetAsset(context.Context, *GetExchangeRequestAsset) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (*UnimplementedExchangeServer) GetSymbol(context.Context, *GetExchangeRequestSymbol) (*ResponseSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbol not implemented")
}
func (*UnimplementedExchangeServer) GetAnalysis(context.Context, *GetExchangeRequestAnalysis) (*ResponseAnalysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (*UnimplementedExchangeServer) GetMarkers(context.Context, *GetExchangeRequestMarkers) (*ResponseMarker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkers not implemented")
}
func (*UnimplementedExchangeServer) GetPairs(context.Context, *GetExchangeRequestPairs) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairs not implemented")
}
func (*UnimplementedExchangeServer) GetPair(context.Context, *GetExchangeRequestPair) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPair not implemented")
}
func (*UnimplementedExchangeServer) SetOrder(context.Context, *SetExchangeRequestOrder) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrder not implemented")
}
func (*UnimplementedExchangeServer) CancelOrder(context.Context, *CancelExchangeRequestOrder) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedExchangeServer) GetOrders(context.Context, *GetExchangeRequestOrdersManual) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (*UnimplementedExchangeServer) GetGraph(context.Context, *GetExchangeRequestGraph) (*ResponseGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (*UnimplementedExchangeServer) GetTransfers(context.Context, *GetExchangeRequestTransfers) (*ResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (*UnimplementedExchangeServer) GetTrades(context.Context, *GetExchangeRequestTrades) (*ResponseTrades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (*UnimplementedExchangeServer) GetPrice(context.Context, *GetExchangeRequestPriceManual) (*ResponsePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (*UnimplementedExchangeServer) GetTransactions(context.Context, *GetExchangeRequestTransactionsManual) (*ResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedExchangeServer) SetWithdraw(context.Context, *SetExchangeRequestWithdraw) (*ResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWithdraw not implemented")
}
func (*UnimplementedExchangeServer) CancelWithdraw(context.Context, *CancelExchangeRequestWithdraw) (*ResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithdraw not implemented")
}
func (*UnimplementedExchangeServer) GetMarketPriceRule(context.Context, *GetExchangeRequestPriceManual) (*ResponsePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceRule not implemented")
}
func (*UnimplementedExchangeServer) SetCurrencyRule(context.Context, *SetExchangeRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrencyRule not implemented")
}
func (*UnimplementedExchangeServer) GetCurrencyRule(context.Context, *GetExchangeRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyRule not implemented")
}
func (*UnimplementedExchangeServer) GetCurrenciesRule(context.Context, *GetExchangeRequestCurrenciesRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrenciesRule not implemented")
}
func (*UnimplementedExchangeServer) DeleteCurrencyRule(context.Context, *DeleteExchangeRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyRule not implemented")
}
func (*UnimplementedExchangeServer) GetChainsRule(context.Context, *GetExchangeRequestChainsRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainsRule not implemented")
}
func (*UnimplementedExchangeServer) GetChainRule(context.Context, *GetExchangeRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainRule not implemented")
}
func (*UnimplementedExchangeServer) SetChainRule(context.Context, *SetExchangeRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChainRule not implemented")
}
func (*UnimplementedExchangeServer) DeleteChainRule(context.Context, *DeleteExchangeRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChainRule not implemented")
}
func (*UnimplementedExchangeServer) GetPairsRule(context.Context, *GetExchangeRequestPairsRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairsRule not implemented")
}
func (*UnimplementedExchangeServer) GetPairRule(context.Context, *GetExchangeRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairRule not implemented")
}
func (*UnimplementedExchangeServer) SetPairRule(context.Context, *SetExchangeRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPairRule not implemented")
}
func (*UnimplementedExchangeServer) DeletePairRule(context.Context, *DeleteExchangeRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePairRule not implemented")
}
func (*UnimplementedExchangeServer) GetContractsRule(context.Context, *GetExchangeRequestContractsRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsRule not implemented")
}
func (*UnimplementedExchangeServer) GetContractRule(context.Context, *GetExchangeRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractRule not implemented")
}
func (*UnimplementedExchangeServer) SetContractRule(context.Context, *SetExchangeRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContractRule not implemented")
}
func (*UnimplementedExchangeServer) DeleteContractRule(context.Context, *DeleteExchangeRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractRule not implemented")
}
func (*UnimplementedExchangeServer) GetTransactionsRule(context.Context, *GetExchangeRequestTransactionsManual) (*ResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsRule not implemented")
}
func (*UnimplementedExchangeServer) GetOrdersRule(context.Context, *GetExchangeRequestOrdersManual) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersRule not implemented")
}
func (*UnimplementedExchangeServer) GetAssetsRule(context.Context, *GetExchangeRequestAssetsManual) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsRule not implemented")
}

func RegisterExchangeServer(s *grpc.Server, srv ExchangeServer) {
	s.RegisterService(&_Exchange_serviceDesc, srv)
}

func _Exchange_SetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetAsset(ctx, req.(*SetExchangeRequestAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestAssetsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetAssets(ctx, req.(*GetExchangeRequestAssetsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetAsset(ctx, req.(*GetExchangeRequestAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetSymbol(ctx, req.(*GetExchangeRequestSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetAnalysis(ctx, req.(*GetExchangeRequestAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetMarkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestMarkers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetMarkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetMarkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetMarkers(ctx, req.(*GetExchangeRequestMarkers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetPairs(ctx, req.(*GetExchangeRequestPairs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetPair(ctx, req.(*GetExchangeRequestPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetOrder(ctx, req.(*SetExchangeRequestOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExchangeRequestOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CancelOrder(ctx, req.(*CancelExchangeRequestOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestOrdersManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOrders(ctx, req.(*GetExchangeRequestOrdersManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetGraph(ctx, req.(*GetExchangeRequestGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestTransfers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTransfers(ctx, req.(*GetExchangeRequestTransfers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestTrades)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTrades(ctx, req.(*GetExchangeRequestTrades))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPriceManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetPrice(ctx, req.(*GetExchangeRequestPriceManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestTransactionsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTransactions(ctx, req.(*GetExchangeRequestTransactionsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetWithdraw(ctx, req.(*SetExchangeRequestWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CancelWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExchangeRequestWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CancelWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/CancelWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CancelWithdraw(ctx, req.(*CancelExchangeRequestWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetMarketPriceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPriceManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetMarketPriceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetMarketPriceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetMarketPriceRule(ctx, req.(*GetExchangeRequestPriceManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetCurrencyRule(ctx, req.(*SetExchangeRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetCurrencyRule(ctx, req.(*GetExchangeRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetCurrenciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestCurrenciesRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetCurrenciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetCurrenciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetCurrenciesRule(ctx, req.(*GetExchangeRequestCurrenciesRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/DeleteCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteCurrencyRule(ctx, req.(*DeleteExchangeRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetChainsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestChainsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetChainsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetChainsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetChainsRule(ctx, req.(*GetExchangeRequestChainsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetChainRule(ctx, req.(*GetExchangeRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetChainRule(ctx, req.(*SetExchangeRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/DeleteChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteChainRule(ctx, req.(*DeleteExchangeRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetPairsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPairsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetPairsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetPairsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetPairsRule(ctx, req.(*GetExchangeRequestPairsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetPairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetPairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetPairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetPairRule(ctx, req.(*GetExchangeRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetPairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetPairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetPairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetPairRule(ctx, req.(*SetExchangeRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeletePairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeletePairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/DeletePairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeletePairRule(ctx, req.(*DeleteExchangeRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetContractsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestContractsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetContractsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetContractsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetContractsRule(ctx, req.(*GetExchangeRequestContractsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetContractRule(ctx, req.(*GetExchangeRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_SetContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SetContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/SetContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SetContractRule(ctx, req.(*SetExchangeRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/DeleteContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteContractRule(ctx, req.(*DeleteExchangeRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetTransactionsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestTransactionsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTransactionsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetTransactionsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTransactionsRule(ctx, req.(*GetExchangeRequestTransactionsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOrdersRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestOrdersManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOrdersRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetOrdersRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOrdersRule(ctx, req.(*GetExchangeRequestOrdersManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetAssetsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequestAssetsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetAssetsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exchange/GetAssetsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetAssetsRule(ctx, req.(*GetExchangeRequestAssetsManual))
	}
	return interceptor(ctx, in, info, handler)
}

var _Exchange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAsset",
			Handler:    _Exchange_SetAsset_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _Exchange_GetAssets_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _Exchange_GetAsset_Handler,
		},
		{
			MethodName: "GetSymbol",
			Handler:    _Exchange_GetSymbol_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _Exchange_GetAnalysis_Handler,
		},
		{
			MethodName: "GetMarkers",
			Handler:    _Exchange_GetMarkers_Handler,
		},
		{
			MethodName: "GetPairs",
			Handler:    _Exchange_GetPairs_Handler,
		},
		{
			MethodName: "GetPair",
			Handler:    _Exchange_GetPair_Handler,
		},
		{
			MethodName: "SetOrder",
			Handler:    _Exchange_SetOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Exchange_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Exchange_GetOrders_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _Exchange_GetGraph_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _Exchange_GetTransfers_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Exchange_GetTrades_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _Exchange_GetPrice_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Exchange_GetTransactions_Handler,
		},
		{
			MethodName: "SetWithdraw",
			Handler:    _Exchange_SetWithdraw_Handler,
		},
		{
			MethodName: "CancelWithdraw",
			Handler:    _Exchange_CancelWithdraw_Handler,
		},
		{
			MethodName: "GetMarketPriceRule",
			Handler:    _Exchange_GetMarketPriceRule_Handler,
		},
		{
			MethodName: "SetCurrencyRule",
			Handler:    _Exchange_SetCurrencyRule_Handler,
		},
		{
			MethodName: "GetCurrencyRule",
			Handler:    _Exchange_GetCurrencyRule_Handler,
		},
		{
			MethodName: "GetCurrenciesRule",
			Handler:    _Exchange_GetCurrenciesRule_Handler,
		},
		{
			MethodName: "DeleteCurrencyRule",
			Handler:    _Exchange_DeleteCurrencyRule_Handler,
		},
		{
			MethodName: "GetChainsRule",
			Handler:    _Exchange_GetChainsRule_Handler,
		},
		{
			MethodName: "GetChainRule",
			Handler:    _Exchange_GetChainRule_Handler,
		},
		{
			MethodName: "SetChainRule",
			Handler:    _Exchange_SetChainRule_Handler,
		},
		{
			MethodName: "DeleteChainRule",
			Handler:    _Exchange_DeleteChainRule_Handler,
		},
		{
			MethodName: "GetPairsRule",
			Handler:    _Exchange_GetPairsRule_Handler,
		},
		{
			MethodName: "GetPairRule",
			Handler:    _Exchange_GetPairRule_Handler,
		},
		{
			MethodName: "SetPairRule",
			Handler:    _Exchange_SetPairRule_Handler,
		},
		{
			MethodName: "DeletePairRule",
			Handler:    _Exchange_DeletePairRule_Handler,
		},
		{
			MethodName: "GetContractsRule",
			Handler:    _Exchange_GetContractsRule_Handler,
		},
		{
			MethodName: "GetContractRule",
			Handler:    _Exchange_GetContractRule_Handler,
		},
		{
			MethodName: "SetContractRule",
			Handler:    _Exchange_SetContractRule_Handler,
		},
		{
			MethodName: "DeleteContractRule",
			Handler:    _Exchange_DeleteContractRule_Handler,
		},
		{
			MethodName: "GetTransactionsRule",
			Handler:    _Exchange_GetTransactionsRule_Handler,
		},
		{
			MethodName: "GetOrdersRule",
			Handler:    _Exchange_GetOrdersRule_Handler,
		},
		{
			MethodName: "GetAssetsRule",
			Handler:    _Exchange_GetAssetsRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proto/exchange.proto",
}
