// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: server/proto/pbspot/spot.proto

package pbspot

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum chain tag structure.
type Tag int32

const (
	Tag_C_NONE      Tag = 0
	Tag_C_BITCOIN   Tag = 1
	Tag_C_ETHEREUM  Tag = 2
	Tag_C_BINANCE   Tag = 3
	Tag_C_TRON      Tag = 4
	Tag_C_POLYGON   Tag = 5
	Tag_C_CRONOS    Tag = 6
	Tag_C_FANTOM    Tag = 7
	Tag_C_AVALANCHE Tag = 8
)

// Enum value maps for Tag.
var (
	Tag_name = map[int32]string{
		0: "C_NONE",
		1: "C_BITCOIN",
		2: "C_ETHEREUM",
		3: "C_BINANCE",
		4: "C_TRON",
		5: "C_POLYGON",
		6: "C_CRONOS",
		7: "C_FANTOM",
		8: "C_AVALANCHE",
	}
	Tag_value = map[string]int32{
		"C_NONE":      0,
		"C_BITCOIN":   1,
		"C_ETHEREUM":  2,
		"C_BINANCE":   3,
		"C_TRON":      4,
		"C_POLYGON":   5,
		"C_CRONOS":    6,
		"C_FANTOM":    7,
		"C_AVALANCHE": 8,
	}
)

func (x Tag) Enum() *Tag {
	p := new(Tag)
	*p = x
	return p
}

func (x Tag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[0].Descriptor()
}

func (Tag) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[0]
}

func (x Tag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag.Descriptor instead.
func (Tag) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{0}
}

// Enum currency protocol structure.
type Protocol int32

const (
	Protocol_MAINNET Protocol = 0
	Protocol_ERC20   Protocol = 1
	Protocol_ERC721  Protocol = 2
	Protocol_ERC1155 Protocol = 3
	Protocol_ERC998  Protocol = 4
	Protocol_ERC223  Protocol = 5
	Protocol_BEP20   Protocol = 6
	Protocol_BEP721  Protocol = 7
	Protocol_BEP1155 Protocol = 8
	Protocol_TRC20   Protocol = 9
	Protocol_TRC721  Protocol = 10
	Protocol_BEP998  Protocol = 11
	Protocol_BEP223  Protocol = 12
	Protocol_PRC20   Protocol = 13
	Protocol_PRC721  Protocol = 14
	Protocol_PRC1155 Protocol = 15
	Protocol_PRC998  Protocol = 16
	Protocol_PRC223  Protocol = 17
	Protocol_CRC20   Protocol = 18
	Protocol_CRC721  Protocol = 19
	Protocol_CRC1155 Protocol = 20
	Protocol_CRC998  Protocol = 21
	Protocol_CRC223  Protocol = 22
	Protocol_FRC20   Protocol = 23
	Protocol_FRC721  Protocol = 24
	Protocol_FRC1155 Protocol = 25
	Protocol_FRC998  Protocol = 26
	Protocol_FRC223  Protocol = 27
	Protocol_ARC20   Protocol = 28
	Protocol_ARC721  Protocol = 29
	Protocol_ARC1155 Protocol = 30
	Protocol_ARC998  Protocol = 31
	Protocol_ARC223  Protocol = 32
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:  "MAINNET",
		1:  "ERC20",
		2:  "ERC721",
		3:  "ERC1155",
		4:  "ERC998",
		5:  "ERC223",
		6:  "BEP20",
		7:  "BEP721",
		8:  "BEP1155",
		9:  "TRC20",
		10: "TRC721",
		11: "BEP998",
		12: "BEP223",
		13: "PRC20",
		14: "PRC721",
		15: "PRC1155",
		16: "PRC998",
		17: "PRC223",
		18: "CRC20",
		19: "CRC721",
		20: "CRC1155",
		21: "CRC998",
		22: "CRC223",
		23: "FRC20",
		24: "FRC721",
		25: "FRC1155",
		26: "FRC998",
		27: "FRC223",
		28: "ARC20",
		29: "ARC721",
		30: "ARC1155",
		31: "ARC998",
		32: "ARC223",
	}
	Protocol_value = map[string]int32{
		"MAINNET": 0,
		"ERC20":   1,
		"ERC721":  2,
		"ERC1155": 3,
		"ERC998":  4,
		"ERC223":  5,
		"BEP20":   6,
		"BEP721":  7,
		"BEP1155": 8,
		"TRC20":   9,
		"TRC721":  10,
		"BEP998":  11,
		"BEP223":  12,
		"PRC20":   13,
		"PRC721":  14,
		"PRC1155": 15,
		"PRC998":  16,
		"PRC223":  17,
		"CRC20":   18,
		"CRC721":  19,
		"CRC1155": 20,
		"CRC998":  21,
		"CRC223":  22,
		"FRC20":   23,
		"FRC721":  24,
		"FRC1155": 25,
		"FRC998":  26,
		"FRC223":  27,
		"ARC20":   28,
		"ARC721":  29,
		"ARC1155": 30,
		"ARC998":  31,
		"ARC223":  32,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{1}
}

// Enum purpose of trades to sell or buy, market liquidity of trades.
type Assigning int32

const (
	Assigning_BUY          Assigning = 0
	Assigning_SELL         Assigning = 1
	Assigning_MARKET_PRICE Assigning = 2
	Assigning_DEFAULT      Assigning = 3
)

// Enum value maps for Assigning.
var (
	Assigning_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "MARKET_PRICE",
		3: "DEFAULT",
	}
	Assigning_value = map[string]int32{
		"BUY":          0,
		"SELL":         1,
		"MARKET_PRICE": 2,
		"DEFAULT":      3,
	}
)

func (x Assigning) Enum() *Assigning {
	p := new(Assigning)
	*p = x
	return p
}

func (x Assigning) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assigning) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[2].Descriptor()
}

func (Assigning) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[2]
}

func (x Assigning) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assigning.Descriptor instead.
func (Assigning) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{2}
}

// Enum buying at the seller's price or selling at the buyer's price, side "bid" - "buy" and "ask" - "sell".
type Side int32

const (
	Side_ASK Side = 0
	Side_BID Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "ASK",
		1: "BID",
	}
	Side_value = map[string]int32{
		"ASK": 0,
		"BID": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[3].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[3]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{3}
}

// Enum trading types, the marker type is responsible for
// selling or buying at the market price,
// the limit type is buying or selling at the price that the user sets.
type TradeType int32

const (
	TradeType_MARKET TradeType = 0
	TradeType_LIMIT  TradeType = 1
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "MARKET",
		1: "LIMIT",
	}
	TradeType_value = map[string]int32{
		"MARKET": 0,
		"LIMIT":  1,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[4].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[4]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{4}
}

// Enum transaction type, there are 2 types of deposit and withdrawal.
type TxType int32

const (
	TxType_DEPOSIT   TxType = 0
	TxType_WITHDRAWS TxType = 1
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAWS",
	}
	TxType_value = map[string]int32{
		"DEPOSIT":   0,
		"WITHDRAWS": 1,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[5].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[5]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{5}
}

// Enum type of finance, is it a type of cryptocurrency or fiat.
type FinType int32

const (
	FinType_CRYPTO FinType = 0
	FinType_FIAT   FinType = 1
)

// Enum value maps for FinType.
var (
	FinType_name = map[int32]string{
		0: "CRYPTO",
		1: "FIAT",
	}
	FinType_value = map[string]int32{
		"CRYPTO": 0,
		"FIAT":   1,
	}
)

func (x FinType) Enum() *FinType {
	p := new(FinType)
	*p = x
	return p
}

func (x FinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[6].Descriptor()
}

func (FinType) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[6]
}

func (x FinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinType.Descriptor instead.
func (FinType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{6}
}

// Enum order type.
type OrderType int32

const (
	OrderType_SPOT   OrderType = 0
	OrderType_MARGIN OrderType = 1
	OrderType_BROKER OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "SPOT",
		1: "MARGIN",
		3: "BROKER",
	}
	OrderType_value = map[string]int32{
		"SPOT":   0,
		"MARGIN": 1,
		"BROKER": 3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[7].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[7]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{7}
}

// Enum statuses, such as order statuses,
// this list has the status canceled, completed, and pending.
type Status int32

const (
	Status_CANCEL     Status = 0
	Status_FILLED     Status = 1
	Status_PENDING    Status = 2
	Status_RESERVE    Status = 3
	Status_PROCESSING Status = 4
	Status_FAILED     Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "CANCEL",
		1: "FILLED",
		2: "PENDING",
		3: "RESERVE",
		4: "PROCESSING",
		5: "FAILED",
	}
	Status_value = map[string]int32{
		"CANCEL":     0,
		"FILLED":     1,
		"PENDING":    2,
		"RESERVE":    3,
		"PROCESSING": 4,
		"FAILED":     5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[8].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[8]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{8}
}

// Enum base and quote is the dominance of pair trading,
// these flags are used for correct conversion and not only.
type Summary int32

const (
	Summary_BASE  Summary = 0
	Summary_QUOTE Summary = 1
)

// Enum value maps for Summary.
var (
	Summary_name = map[int32]string{
		0: "BASE",
		1: "QUOTE",
	}
	Summary_value = map[string]int32{
		"BASE":  0,
		"QUOTE": 1,
	}
)

func (x Summary) Enum() *Summary {
	p := new(Summary)
	*p = x
	return p
}

func (x Summary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Summary) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[9].Descriptor()
}

func (Summary) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[9]
}

func (x Summary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Summary.Descriptor instead.
func (Summary) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{9}
}

// Enum cryptocurrency parent platforms, list of underlying platforms.
type Platform int32

const (
	Platform_BITCOIN    Platform = 0
	Platform_ETHEREUM   Platform = 1
	Platform_TRON       Platform = 2
	Platform_VISA       Platform = 3
	Platform_MASTERCARD Platform = 4
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "BITCOIN",
		1: "ETHEREUM",
		2: "TRON",
		3: "VISA",
		4: "MASTERCARD",
	}
	Platform_value = map[string]int32{
		"BITCOIN":    0,
		"ETHEREUM":   1,
		"TRON":       2,
		"VISA":       3,
		"MASTERCARD": 4,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[10].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[10]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{10}
}

// Enum pointers to update the user's balance,
// select the assigned amount or add the assigned amount.
type Balance int32

const (
	Balance_MINUS Balance = 0
	Balance_PLUS  Balance = 1
)

// Enum value maps for Balance.
var (
	Balance_name = map[int32]string{
		0: "MINUS",
		1: "PLUS",
	}
	Balance_value = map[string]int32{
		"MINUS": 0,
		"PLUS":  1,
	}
)

func (x Balance) Enum() *Balance {
	p := new(Balance)
	*p = x
	return p
}

func (x Balance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Balance) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[11].Descriptor()
}

func (Balance) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[11]
}

func (x Balance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Balance.Descriptor instead.
func (Balance) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{11}
}

// Enum pusher structure.
type Pusher int32

const (
	Pusher_TradeStatusPublic Pusher = 0
	Pusher_TradePublic       Pusher = 1
	Pusher_DepositPublic     Pusher = 2
	Pusher_WithdrawPublic    Pusher = 3
	Pusher_OrderCreatePublic Pusher = 4
)

// Enum value maps for Pusher.
var (
	Pusher_name = map[int32]string{
		0: "TradeStatusPublic",
		1: "TradePublic",
		2: "DepositPublic",
		3: "WithdrawPublic",
		4: "OrderCreatePublic",
	}
	Pusher_value = map[string]int32{
		"TradeStatusPublic": 0,
		"TradePublic":       1,
		"DepositPublic":     2,
		"WithdrawPublic":    3,
		"OrderCreatePublic": 4,
	}
)

func (x Pusher) Enum() *Pusher {
	p := new(Pusher)
	*p = x
	return p
}

func (x Pusher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pusher) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_pbspot_spot_proto_enumTypes[12].Descriptor()
}

func (Pusher) Type() protoreflect.EnumType {
	return &file_server_proto_pbspot_spot_proto_enumTypes[12]
}

func (x Pusher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pusher.Descriptor instead.
func (Pusher) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{12}
}

// Contract message structure.
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainId      int64    `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainName    string   `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ParentSymbol string   `protobuf:"bytes,4,opt,name=parent_symbol,json=parentSymbol,proto3" json:"parent_symbol,omitempty"`
	Symbol       string   `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address      string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	FeesWithdraw float64  `protobuf:"fixed64,7,opt,name=fees_withdraw,json=feesWithdraw,proto3" json:"fees_withdraw,omitempty"`
	Decimals     int32    `protobuf:"varint,8,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Platform     Platform `protobuf:"varint,9,opt,name=platform,proto3,enum=pbspot.Platform" json:"platform,omitempty"`
	Protocol     Protocol `protobuf:"varint,10,opt,name=protocol,proto3,enum=pbspot.Protocol" json:"protocol,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{0}
}

func (x *Contract) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Contract) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Contract) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *Contract) GetParentSymbol() string {
	if x != nil {
		return x.ParentSymbol
	}
	return ""
}

func (x *Contract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Contract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Contract) GetFeesWithdraw() float64 {
	if x != nil {
		return x.FeesWithdraw
	}
	return 0
}

func (x *Contract) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Contract) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Contract) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

// Currency message structure.
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol       string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CreateAt     string   `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Balance      float64  `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`
	FeesTrade    float64  `protobuf:"fixed64,6,opt,name=fees_trade,json=feesTrade,proto3" json:"fees_trade,omitempty"`
	FeesDiscount float64  `protobuf:"fixed64,7,opt,name=fees_discount,json=feesDiscount,proto3" json:"fees_discount,omitempty"`
	FeesCharges  float64  `protobuf:"fixed64,8,opt,name=fees_charges,json=feesCharges,proto3" json:"fees_charges,omitempty"`
	FeesCosts    float64  `protobuf:"fixed64,9,opt,name=fees_costs,json=feesCosts,proto3" json:"fees_costs,omitempty"`
	MinWithdraw  float64  `protobuf:"fixed64,10,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw  float64  `protobuf:"fixed64,11,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	MinDeposit   float64  `protobuf:"fixed64,12,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MinTrade     float64  `protobuf:"fixed64,13,opt,name=min_trade,json=minTrade,proto3" json:"min_trade,omitempty"`
	MaxTrade     float64  `protobuf:"fixed64,14,opt,name=max_trade,json=maxTrade,proto3" json:"max_trade,omitempty"`
	Volume       float64  `protobuf:"fixed64,15,opt,name=volume,proto3" json:"volume,omitempty"`
	Chains       []*Chain `protobuf:"bytes,16,rep,name=chains,proto3" json:"chains,omitempty"`
	Pairs        []*Pair  `protobuf:"bytes,17,rep,name=pairs,proto3" json:"pairs,omitempty"`
	ChainsIds    []int64  `protobuf:"varint,18,rep,packed,name=chains_ids,json=chainsIds,proto3" json:"chains_ids,omitempty"`
	Marker       bool     `protobuf:"varint,19,opt,name=marker,proto3" json:"marker,omitempty"`
	Icon         bool     `protobuf:"varint,20,opt,name=icon,proto3" json:"icon,omitempty"`
	Status       bool     `protobuf:"varint,21,opt,name=status,proto3" json:"status,omitempty"`
	FinType      FinType  `protobuf:"varint,22,opt,name=fin_type,json=finType,proto3,enum=pbspot.FinType" json:"fin_type,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{1}
}

func (x *Currency) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Currency) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Currency) GetFeesTrade() float64 {
	if x != nil {
		return x.FeesTrade
	}
	return 0
}

func (x *Currency) GetFeesDiscount() float64 {
	if x != nil {
		return x.FeesDiscount
	}
	return 0
}

func (x *Currency) GetFeesCharges() float64 {
	if x != nil {
		return x.FeesCharges
	}
	return 0
}

func (x *Currency) GetFeesCosts() float64 {
	if x != nil {
		return x.FeesCosts
	}
	return 0
}

func (x *Currency) GetMinWithdraw() float64 {
	if x != nil {
		return x.MinWithdraw
	}
	return 0
}

func (x *Currency) GetMaxWithdraw() float64 {
	if x != nil {
		return x.MaxWithdraw
	}
	return 0
}

func (x *Currency) GetMinDeposit() float64 {
	if x != nil {
		return x.MinDeposit
	}
	return 0
}

func (x *Currency) GetMinTrade() float64 {
	if x != nil {
		return x.MinTrade
	}
	return 0
}

func (x *Currency) GetMaxTrade() float64 {
	if x != nil {
		return x.MaxTrade
	}
	return 0
}

func (x *Currency) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Currency) GetChains() []*Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *Currency) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Currency) GetChainsIds() []int64 {
	if x != nil {
		return x.ChainsIds
	}
	return nil
}

func (x *Currency) GetMarker() bool {
	if x != nil {
		return x.Marker
	}
	return false
}

func (x *Currency) GetIcon() bool {
	if x != nil {
		return x.Icon
	}
	return false
}

func (x *Currency) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Currency) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

// Chain message structure.
type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentSymbol string    `protobuf:"bytes,3,opt,name=parent_symbol,json=parentSymbol,proto3" json:"parent_symbol,omitempty"`
	ExplorerLink string    `protobuf:"bytes,4,opt,name=explorer_link,json=explorerLink,proto3" json:"explorer_link,omitempty"`
	Address      string    `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Rpc          string    `protobuf:"bytes,6,opt,name=rpc,proto3" json:"rpc,omitempty"`
	RpcKey       string    `protobuf:"bytes,7,opt,name=rpc_key,json=rpcKey,proto3" json:"rpc_key,omitempty"`
	RpcUser      string    `protobuf:"bytes,8,opt,name=rpc_user,json=rpcUser,proto3" json:"rpc_user,omitempty"`
	RpcPassword  string    `protobuf:"bytes,9,opt,name=rpc_password,json=rpcPassword,proto3" json:"rpc_password,omitempty"`
	Block        int64     `protobuf:"varint,10,opt,name=block,proto3" json:"block,omitempty"`
	Network      int64     `protobuf:"varint,11,opt,name=network,proto3" json:"network,omitempty"`
	Confirmation int64     `protobuf:"varint,12,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	TimeWithdraw int64     `protobuf:"varint,13,opt,name=time_withdraw,json=timeWithdraw,proto3" json:"time_withdraw,omitempty"`
	Status       bool      `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Exist        bool      `protobuf:"varint,15,opt,name=exist,proto3" json:"exist,omitempty"`
	Reserve      float64   `protobuf:"fixed64,16,opt,name=reserve,proto3" json:"reserve,omitempty"`
	FeesWithdraw float64   `protobuf:"fixed64,17,opt,name=fees_withdraw,json=feesWithdraw,proto3" json:"fees_withdraw,omitempty"`
	Platform     Platform  `protobuf:"varint,18,opt,name=platform,proto3,enum=pbspot.Platform" json:"platform,omitempty"`
	Contract     *Contract `protobuf:"bytes,19,opt,name=contract,proto3" json:"contract,omitempty"`
	Tag          Tag       `protobuf:"varint,20,opt,name=tag,proto3,enum=pbspot.Tag" json:"tag,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{2}
}

func (x *Chain) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chain) GetParentSymbol() string {
	if x != nil {
		return x.ParentSymbol
	}
	return ""
}

func (x *Chain) GetExplorerLink() string {
	if x != nil {
		return x.ExplorerLink
	}
	return ""
}

func (x *Chain) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Chain) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *Chain) GetRpcKey() string {
	if x != nil {
		return x.RpcKey
	}
	return ""
}

func (x *Chain) GetRpcUser() string {
	if x != nil {
		return x.RpcUser
	}
	return ""
}

func (x *Chain) GetRpcPassword() string {
	if x != nil {
		return x.RpcPassword
	}
	return ""
}

func (x *Chain) GetBlock() int64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Chain) GetNetwork() int64 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *Chain) GetConfirmation() int64 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *Chain) GetTimeWithdraw() int64 {
	if x != nil {
		return x.TimeWithdraw
	}
	return 0
}

func (x *Chain) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Chain) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *Chain) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *Chain) GetFeesWithdraw() float64 {
	if x != nil {
		return x.FeesWithdraw
	}
	return 0
}

func (x *Chain) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Chain) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Chain) GetTag() Tag {
	if x != nil {
		return x.Tag
	}
	return Tag_C_NONE
}

// Pair message structure.
type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol       string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	BaseUnit     string  `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit    string  `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Icon         string  `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Price        float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Ratio        float64 `protobuf:"fixed64,7,opt,name=ratio,proto3" json:"ratio,omitempty"`
	BaseDecimal  float64 `protobuf:"fixed64,8,opt,name=base_decimal,json=baseDecimal,proto3" json:"base_decimal,omitempty"`
	QuoteDecimal float64 `protobuf:"fixed64,9,opt,name=quote_decimal,json=quoteDecimal,proto3" json:"quote_decimal,omitempty"`
	Status       bool    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	GraphClear   bool    `protobuf:"varint,11,opt,name=graph_clear,json=graphClear,proto3" json:"graph_clear,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{3}
}

func (x *Pair) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pair) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Pair) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Pair) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Pair) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Pair) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Pair) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *Pair) GetBaseDecimal() float64 {
	if x != nil {
		return x.BaseDecimal
	}
	return 0
}

func (x *Pair) GetQuoteDecimal() float64 {
	if x != nil {
		return x.QuoteDecimal
	}
	return 0
}

func (x *Pair) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Pair) GetGraphClear() bool {
	if x != nil {
		return x.GraphClear
	}
	return false
}

// Graph message structure.
type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time      int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	BaseUnit  string  `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string  `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	High      float64 `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low       float64 `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Open      float64 `protobuf:"fixed64,7,opt,name=open,proto3" json:"open,omitempty"`
	Close     float64 `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`
	Price     float64 `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	Volume    float64 `protobuf:"fixed64,10,opt,name=volume,proto3" json:"volume,omitempty"`
	AskPrice  float64 `protobuf:"fixed64,11,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	BidPrice  float64 `protobuf:"fixed64,12,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{4}
}

func (x *Graph) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Graph) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Graph) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Graph) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Graph) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Graph) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Graph) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Graph) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Graph) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Graph) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Graph) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Graph) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

// Graph stats message structure.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High     float64 `protobuf:"fixed64,1,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64 `protobuf:"fixed64,2,opt,name=low,proto3" json:"low,omitempty"`
	Last     float64 `protobuf:"fixed64,3,opt,name=last,proto3" json:"last,omitempty"`
	First    float64 `protobuf:"fixed64,5,opt,name=first,proto3" json:"first,omitempty"`
	Previous float64 `protobuf:"fixed64,4,opt,name=previous,proto3" json:"previous,omitempty"`
	Volume   float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Count    int32   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{5}
}

func (x *Stats) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Stats) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Stats) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *Stats) GetFirst() float64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Stats) GetPrevious() float64 {
	if x != nil {
		return x.Previous
	}
	return 0
}

func (x *Stats) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Stats) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Trade message structure.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,2,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,3,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string    `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64   `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Fees      float64   `protobuf:"fixed64,7,opt,name=fees,proto3" json:"fees,omitempty"`
	Assigning Assigning `protobuf:"varint,8,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{6}
}

func (x *Trade) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trade) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Trade) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Trade) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Trade) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

// Order message structure.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BaseUnit  string       `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string       `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string       `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64      `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Value     float64      `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`
	Quantity  float64      `protobuf:"fixed64,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Count     int32        `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	Param     *Order_Param `protobuf:"bytes,10,opt,name=param,proto3" json:"param,omitempty"`
	Assigning Assigning    `protobuf:"varint,11,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
	Status    Status       `protobuf:"varint,12,opt,name=status,proto3,enum=pbspot.Status" json:"status,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{7}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Order) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Order) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Order) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Order) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Order) GetParam() *Order_Param {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Order) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

func (x *Order) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

// Transaction message structure.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction internal ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Chain/Blockchain internal ID.
	ChainId int64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Account user internal ID.
	UserId int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Currency symbol.
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Blockchain hash ID.
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// Transaction creation time.
	CreateAt string `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Recipient's address.
	To string `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	// Address from whom the transfer was made.
	From string `protobuf:"bytes,8,opt,name=from,proto3" json:"from,omitempty"`
	// Number of funds.
	Value float64 `protobuf:"fixed64,9,opt,name=value,proto3" json:"value,omitempty"`
	// Blockchain network fee for transferring funds.
	Fees float64 `protobuf:"fixed64,10,opt,name=fees,proto3" json:"fees,omitempty"`
	// Freeze currency conversion price.
	Price float64 `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`
	// Blockchain network confirmations.
	Confirmation int64 `protobuf:"varint,12,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	// Number of blocks in the blockchain network.
	Block int64 `protobuf:"varint,13,opt,name=block,proto3" json:"block,omitempty"`
	// Data update via socket gateway [true - update, false - create].
	Hook bool `protobuf:"varint,14,opt,name=hook,proto3" json:"hook,omitempty"`
	// Requiring commission for withdrawal of funds.
	Claim    bool     `protobuf:"varint,15,opt,name=claim,proto3" json:"claim,omitempty"`
	TxType   TxType   `protobuf:"varint,16,opt,name=tx_type,json=txType,proto3,enum=pbspot.TxType" json:"tx_type,omitempty"`
	FinType  FinType  `protobuf:"varint,17,opt,name=fin_type,json=finType,proto3,enum=pbspot.FinType" json:"fin_type,omitempty"`
	Platform Platform `protobuf:"varint,18,opt,name=platform,proto3,enum=pbspot.Platform" json:"platform,omitempty"`
	Protocol Protocol `protobuf:"varint,19,opt,name=protocol,proto3,enum=pbspot.Protocol" json:"protocol,omitempty"`
	Status   Status   `protobuf:"varint,20,opt,name=status,proto3,enum=pbspot.Status" json:"status,omitempty"`
	Chain    *Chain   `protobuf:"bytes,21,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{8}
}

func (x *Transaction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transaction) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Transaction) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transaction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Transaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transaction) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Transaction) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Transaction) GetConfirmation() int64 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

func (x *Transaction) GetBlock() int64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Transaction) GetHook() bool {
	if x != nil {
		return x.Hook
	}
	return false
}

func (x *Transaction) GetClaim() bool {
	if x != nil {
		return x.Claim
	}
	return false
}

func (x *Transaction) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_DEPOSIT
}

func (x *Transaction) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

func (x *Transaction) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *Transaction) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

func (x *Transaction) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

func (x *Transaction) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

// Analysis message structure.
type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,2,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,3,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Price     float64   `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	BuyRatio  float64   `protobuf:"fixed64,5,opt,name=buy_ratio,json=buyRatio,proto3" json:"buy_ratio,omitempty"`
	SelRatio  float64   `protobuf:"fixed64,6,opt,name=sel_ratio,json=selRatio,proto3" json:"sel_ratio,omitempty"`
	Chart     []float64 `protobuf:"fixed64,7,rep,packed,name=chart,proto3" json:"chart,omitempty"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{9}
}

func (x *Analysis) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Analysis) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Analysis) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Analysis) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Analysis) GetBuyRatio() float64 {
	if x != nil {
		return x.BuyRatio
	}
	return 0
}

func (x *Analysis) GetSelRatio() float64 {
	if x != nil {
		return x.SelRatio
	}
	return 0
}

func (x *Analysis) GetChart() []float64 {
	if x != nil {
		return x.Chart
	}
	return nil
}

// Transfer message structure.
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	CreateAt  string    `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Price     float64   `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Fees      float64   `protobuf:"fixed64,8,opt,name=fees,proto3" json:"fees,omitempty"`
	Assigning Assigning `protobuf:"varint,9,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{10}
}

func (x *Transfer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transfer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transfer) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *Transfer) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *Transfer) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Transfer) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Transfer) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Transfer) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

func (x *Transfer) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

// Price structure.
type GetRequestPriceManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetRequestPriceManual) Reset() {
	*x = GetRequestPriceManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestPriceManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestPriceManual) ProtoMessage() {}

func (x *GetRequestPriceManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestPriceManual.ProtoReflect.Descriptor instead.
func (*GetRequestPriceManual) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{11}
}

func (x *GetRequestPriceManual) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestPriceManual) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type ResponsePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *ResponsePrice) Reset() {
	*x = ResponsePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePrice) ProtoMessage() {}

func (x *ResponsePrice) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePrice.ProtoReflect.Descriptor instead.
func (*ResponsePrice) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{12}
}

func (x *ResponsePrice) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// Contract structure.
type GetRequestContractsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetRequestContractsRule) Reset() {
	*x = GetRequestContractsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestContractsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestContractsRule) ProtoMessage() {}

func (x *GetRequestContractsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestContractsRule.ProtoReflect.Descriptor instead.
func (*GetRequestContractsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{13}
}

func (x *GetRequestContractsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestContractsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRequestContractsRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequestContractRule) Reset() {
	*x = GetRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestContractRule) ProtoMessage() {}

func (x *GetRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestContractRule.ProtoReflect.Descriptor instead.
func (*GetRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{14}
}

func (x *GetRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Contract *Contract `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *SetRequestContractRule) Reset() {
	*x = SetRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestContractRule) ProtoMessage() {}

func (x *SetRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestContractRule.ProtoReflect.Descriptor instead.
func (*SetRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{15}
}

func (x *SetRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetRequestContractRule) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type DeleteRequestContractRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequestContractRule) Reset() {
	*x = DeleteRequestContractRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestContractRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestContractRule) ProtoMessage() {}

func (x *DeleteRequestContractRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestContractRule.ProtoReflect.Descriptor instead.
func (*DeleteRequestContractRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRequestContractRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Contract `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool        `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseContract) Reset() {
	*x = ResponseContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseContract) ProtoMessage() {}

func (x *ResponseContract) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseContract.ProtoReflect.Descriptor instead.
func (*ResponseContract) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseContract) GetFields() []*Contract {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseContract) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseContract) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Chain structure.
type GetRequestChainsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetRequestChainsRule) Reset() {
	*x = GetRequestChainsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestChainsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestChainsRule) ProtoMessage() {}

func (x *GetRequestChainsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestChainsRule.ProtoReflect.Descriptor instead.
func (*GetRequestChainsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{18}
}

func (x *GetRequestChainsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestChainsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequestChainRule) Reset() {
	*x = GetRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestChainRule) ProtoMessage() {}

func (x *GetRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestChainRule.ProtoReflect.Descriptor instead.
func (*GetRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{19}
}

func (x *GetRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Chain *Chain `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *SetRequestChainRule) Reset() {
	*x = SetRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestChainRule) ProtoMessage() {}

func (x *SetRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestChainRule.ProtoReflect.Descriptor instead.
func (*SetRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{20}
}

func (x *SetRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetRequestChainRule) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

type DeleteRequestChainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequestChainRule) Reset() {
	*x = DeleteRequestChainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestChainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestChainRule) ProtoMessage() {}

func (x *DeleteRequestChainRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestChainRule.ProtoReflect.Descriptor instead.
func (*DeleteRequestChainRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRequestChainRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Chain `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseChain) Reset() {
	*x = ResponseChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseChain) ProtoMessage() {}

func (x *ResponseChain) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseChain.ProtoReflect.Descriptor instead.
func (*ResponseChain) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseChain) GetFields() []*Chain {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseChain) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseChain) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Currency structure.
type GetRequestCurrenciesRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetRequestCurrenciesRule) Reset() {
	*x = GetRequestCurrenciesRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestCurrenciesRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestCurrenciesRule) ProtoMessage() {}

func (x *GetRequestCurrenciesRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestCurrenciesRule.ProtoReflect.Descriptor instead.
func (*GetRequestCurrenciesRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{23}
}

func (x *GetRequestCurrenciesRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetRequestCurrenciesRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestCurrenciesRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetRequestCurrencyRule) Reset() {
	*x = GetRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestCurrencyRule) ProtoMessage() {}

func (x *GetRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*GetRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{24}
}

func (x *GetRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SetRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string    `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image    []byte    `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Currency *Currency `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *SetRequestCurrencyRule) Reset() {
	*x = SetRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestCurrencyRule) ProtoMessage() {}

func (x *SetRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*SetRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{25}
}

func (x *SetRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetRequestCurrencyRule) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *SetRequestCurrencyRule) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type DeleteRequestCurrencyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *DeleteRequestCurrencyRule) Reset() {
	*x = DeleteRequestCurrencyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestCurrencyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestCurrencyRule) ProtoMessage() {}

func (x *DeleteRequestCurrencyRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestCurrencyRule.ProtoReflect.Descriptor instead.
func (*DeleteRequestCurrencyRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteRequestCurrencyRule) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type ResponseCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Currency `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseCurrency) Reset() {
	*x = ResponseCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCurrency) ProtoMessage() {}

func (x *ResponseCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCurrency.ProtoReflect.Descriptor instead.
func (*ResponseCurrency) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{27}
}

func (x *ResponseCurrency) GetFields() []*Currency {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseCurrency) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Pair structure.
type GetRequestPairs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetRequestPairs) Reset() {
	*x = GetRequestPairs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestPairs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestPairs) ProtoMessage() {}

func (x *GetRequestPairs) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestPairs.ProtoReflect.Descriptor instead.
func (*GetRequestPairs) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{28}
}

func (x *GetRequestPairs) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetRequestPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetRequestPair) Reset() {
	*x = GetRequestPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestPair) ProtoMessage() {}

func (x *GetRequestPair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestPair.ProtoReflect.Descriptor instead.
func (*GetRequestPair) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{29}
}

func (x *GetRequestPair) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestPair) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type GetRequestPairsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetRequestPairsRule) Reset() {
	*x = GetRequestPairsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestPairsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestPairsRule) ProtoMessage() {}

func (x *GetRequestPairsRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestPairsRule.ProtoReflect.Descriptor instead.
func (*GetRequestPairsRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{30}
}

func (x *GetRequestPairsRule) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestPairsRule) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRequestPairsRule) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequestPairRule) Reset() {
	*x = GetRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestPairRule) ProtoMessage() {}

func (x *GetRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestPairRule.ProtoReflect.Descriptor instead.
func (*GetRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{31}
}

func (x *GetRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pair *Pair `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *SetRequestPairRule) Reset() {
	*x = SetRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestPairRule) ProtoMessage() {}

func (x *SetRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestPairRule.ProtoReflect.Descriptor instead.
func (*SetRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{32}
}

func (x *SetRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetRequestPairRule) GetPair() *Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

type DeleteRequestPairRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequestPairRule) Reset() {
	*x = DeleteRequestPairRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequestPairRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequestPairRule) ProtoMessage() {}

func (x *DeleteRequestPairRule) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequestPairRule.ProtoReflect.Descriptor instead.
func (*DeleteRequestPairRule) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteRequestPairRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponsePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Pair `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count   int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Success bool    `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponsePair) Reset() {
	*x = ResponsePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePair) ProtoMessage() {}

func (x *ResponsePair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePair.ProtoReflect.Descriptor instead.
func (*ResponsePair) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{34}
}

func (x *ResponsePair) GetFields() []*Pair {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponsePair) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponsePair) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Asset structure.
type GetRequestAssetsManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRequestAssetsManual) Reset() {
	*x = GetRequestAssetsManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestAssetsManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestAssetsManual) ProtoMessage() {}

func (x *GetRequestAssetsManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestAssetsManual.ProtoReflect.Descriptor instead.
func (*GetRequestAssetsManual) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{35}
}

type GetRequestAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetRequestAsset) Reset() {
	*x = GetRequestAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestAsset) ProtoMessage() {}

func (x *GetRequestAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestAsset.ProtoReflect.Descriptor instead.
func (*GetRequestAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{36}
}

func (x *GetRequestAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type SetRequestAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Platform Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=pbspot.Platform" json:"platform,omitempty"`
	Protocol Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=pbspot.Protocol" json:"protocol,omitempty"`
	FinType  FinType  `protobuf:"varint,4,opt,name=fin_type,json=finType,proto3,enum=pbspot.FinType" json:"fin_type,omitempty"`
}

func (x *SetRequestAsset) Reset() {
	*x = SetRequestAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestAsset) ProtoMessage() {}

func (x *SetRequestAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestAsset.ProtoReflect.Descriptor instead.
func (*SetRequestAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{37}
}

func (x *SetRequestAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetRequestAsset) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

func (x *SetRequestAsset) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_MAINNET
}

func (x *SetRequestAsset) GetFinType() FinType {
	if x != nil {
		return x.FinType
	}
	return FinType_CRYPTO
}

type ResponseAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Currency `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Address string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Success bool        `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseAsset) Reset() {
	*x = ResponseAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAsset) ProtoMessage() {}

func (x *ResponseAsset) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAsset.ProtoReflect.Descriptor instead.
func (*ResponseAsset) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseAsset) GetFields() []*Currency {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseAsset) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ResponseAsset) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Symbol structure.
type GetRequestSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUnit  string `protobuf:"bytes,1,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string `protobuf:"bytes,2,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
}

func (x *GetRequestSymbol) Reset() {
	*x = GetRequestSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestSymbol) ProtoMessage() {}

func (x *GetRequestSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestSymbol.ProtoReflect.Descriptor instead.
func (*GetRequestSymbol) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{39}
}

func (x *GetRequestSymbol) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestSymbol) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

type ResponseSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseSymbol) Reset() {
	*x = ResponseSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSymbol) ProtoMessage() {}

func (x *ResponseSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSymbol.ProtoReflect.Descriptor instead.
func (*ResponseSymbol) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{40}
}

func (x *ResponseSymbol) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Analysis structure.
type GetRequestAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetRequestAnalysis) Reset() {
	*x = GetRequestAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestAnalysis) ProtoMessage() {}

func (x *GetRequestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestAnalysis.ProtoReflect.Descriptor instead.
func (*GetRequestAnalysis) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{41}
}

func (x *GetRequestAnalysis) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestAnalysis) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ResponseAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Analysis `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseAnalysis) Reset() {
	*x = ResponseAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAnalysis) ProtoMessage() {}

func (x *ResponseAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAnalysis.ProtoReflect.Descriptor instead.
func (*ResponseAnalysis) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{42}
}

func (x *ResponseAnalysis) GetFields() []*Analysis {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseAnalysis) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Marker structure.
type GetRequestMarkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRequestMarkers) Reset() {
	*x = GetRequestMarkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestMarkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestMarkers) ProtoMessage() {}

func (x *GetRequestMarkers) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestMarkers.ProtoReflect.Descriptor instead.
func (*GetRequestMarkers) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{43}
}

type ResponseMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseMarker) Reset() {
	*x = ResponseMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMarker) ProtoMessage() {}

func (x *ResponseMarker) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMarker.ProtoReflect.Descriptor instead.
func (*ResponseMarker) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseMarker) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Order structure.
type SetRequestOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     float64   `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64   `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	TradeType TradeType `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,enum=pbspot.TradeType" json:"trade_type,omitempty"`
	Assigning Assigning `protobuf:"varint,6,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
}

func (x *SetRequestOrder) Reset() {
	*x = SetRequestOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestOrder) ProtoMessage() {}

func (x *SetRequestOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestOrder.ProtoReflect.Descriptor instead.
func (*SetRequestOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{45}
}

func (x *SetRequestOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SetRequestOrder) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SetRequestOrder) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *SetRequestOrder) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *SetRequestOrder) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_MARKET
}

func (x *SetRequestOrder) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type GetRequestOrdersManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     bool      `protobuf:"varint,1,opt,name=owner,proto3" json:"owner,omitempty"`
	UserId    int64     `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit     int64     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int64     `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Decimal   float64   `protobuf:"fixed64,5,opt,name=decimal,proto3" json:"decimal,omitempty"`
	BaseUnit  string    `protobuf:"bytes,6,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,7,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Assigning Assigning `protobuf:"varint,8,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
	Status    Status    `protobuf:"varint,9,opt,name=status,proto3,enum=pbspot.Status" json:"status,omitempty"`
}

func (x *GetRequestOrdersManual) Reset() {
	*x = GetRequestOrdersManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestOrdersManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestOrdersManual) ProtoMessage() {}

func (x *GetRequestOrdersManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestOrdersManual.ProtoReflect.Descriptor instead.
func (*GetRequestOrdersManual) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{46}
}

func (x *GetRequestOrdersManual) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *GetRequestOrdersManual) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetRequestOrdersManual) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestOrdersManual) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRequestOrdersManual) GetDecimal() float64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *GetRequestOrdersManual) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestOrdersManual) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetRequestOrdersManual) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

func (x *GetRequestOrdersManual) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_CANCEL
}

type CancelRequestOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequestOrder) Reset() {
	*x = CancelRequestOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequestOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequestOrder) ProtoMessage() {}

func (x *CancelRequestOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequestOrder.ProtoReflect.Descriptor instead.
func (*CancelRequestOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{47}
}

func (x *CancelRequestOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields  []*Order `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Volume  float64  `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Count   int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Success bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseOrder) Reset() {
	*x = ResponseOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOrder) ProtoMessage() {}

func (x *ResponseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOrder.ProtoReflect.Descriptor instead.
func (*ResponseOrder) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{48}
}

func (x *ResponseOrder) GetFields() []*Order {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseOrder) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ResponseOrder) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseOrder) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Graph structure.
type GetRequestGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	From       int64  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To         int64  `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	BaseUnit   string `protobuf:"bytes,4,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit  string `protobuf:"bytes,5,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Resolution string `protobuf:"bytes,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *GetRequestGraph) Reset() {
	*x = GetRequestGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestGraph) ProtoMessage() {}

func (x *GetRequestGraph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestGraph.ProtoReflect.Descriptor instead.
func (*GetRequestGraph) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{49}
}

func (x *GetRequestGraph) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestGraph) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetRequestGraph) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *GetRequestGraph) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestGraph) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetRequestGraph) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type ResponseGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Graph `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Stats  *Stats   `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *ResponseGraph) Reset() {
	*x = ResponseGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGraph) ProtoMessage() {}

func (x *ResponseGraph) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGraph.ProtoReflect.Descriptor instead.
func (*ResponseGraph) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{50}
}

func (x *ResponseGraph) GetFields() []*Graph {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseGraph) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Transfer structure.
type GetRequestTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     bool      `protobuf:"varint,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Limit     int64     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderId   int64     `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Assigning Assigning `protobuf:"varint,4,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
}

func (x *GetRequestTransfers) Reset() {
	*x = GetRequestTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestTransfers) ProtoMessage() {}

func (x *GetRequestTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestTransfers.ProtoReflect.Descriptor instead.
func (*GetRequestTransfers) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{51}
}

func (x *GetRequestTransfers) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *GetRequestTransfers) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestTransfers) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GetRequestTransfers) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type ResponseTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Transfer `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseTransfer) Reset() {
	*x = ResponseTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTransfer) ProtoMessage() {}

func (x *ResponseTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTransfer.ProtoReflect.Descriptor instead.
func (*ResponseTransfer) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{52}
}

func (x *ResponseTransfer) GetFields() []*Transfer {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Trade structure.
type GetRequestTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int64     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int64     `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	BaseUnit  string    `protobuf:"bytes,3,opt,name=base_unit,json=baseUnit,proto3" json:"base_unit,omitempty"`
	QuoteUnit string    `protobuf:"bytes,4,opt,name=quote_unit,json=quoteUnit,proto3" json:"quote_unit,omitempty"`
	Assigning Assigning `protobuf:"varint,11,opt,name=assigning,proto3,enum=pbspot.Assigning" json:"assigning,omitempty"`
}

func (x *GetRequestTrades) Reset() {
	*x = GetRequestTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestTrades) ProtoMessage() {}

func (x *GetRequestTrades) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestTrades.ProtoReflect.Descriptor instead.
func (*GetRequestTrades) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{53}
}

func (x *GetRequestTrades) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestTrades) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRequestTrades) GetBaseUnit() string {
	if x != nil {
		return x.BaseUnit
	}
	return ""
}

func (x *GetRequestTrades) GetQuoteUnit() string {
	if x != nil {
		return x.QuoteUnit
	}
	return ""
}

func (x *GetRequestTrades) GetAssigning() Assigning {
	if x != nil {
		return x.Assigning
	}
	return Assigning_BUY
}

type ResponseTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Trade `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseTrades) Reset() {
	*x = ResponseTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTrades) ProtoMessage() {}

func (x *ResponseTrades) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTrades.ProtoReflect.Descriptor instead.
func (*ResponseTrades) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{54}
}

func (x *ResponseTrades) GetFields() []*Trade {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseTrades) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Transaction structure.
type GetRequestTransactionsManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	TxType TxType `protobuf:"varint,6,opt,name=tx_type,json=txType,proto3,enum=pbspot.TxType" json:"tx_type,omitempty"`
}

func (x *GetRequestTransactionsManual) Reset() {
	*x = GetRequestTransactionsManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequestTransactionsManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequestTransactionsManual) ProtoMessage() {}

func (x *GetRequestTransactionsManual) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequestTransactionsManual.ProtoReflect.Descriptor instead.
func (*GetRequestTransactionsManual) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{55}
}

func (x *GetRequestTransactionsManual) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetRequestTransactionsManual) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRequestTransactionsManual) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRequestTransactionsManual) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetRequestTransactionsManual) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetRequestTransactionsManual) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_DEPOSIT
}

type ResponseTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Transaction `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Count  int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ResponseTransaction) Reset() {
	*x = ResponseTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTransaction) ProtoMessage() {}

func (x *ResponseTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTransaction.ProtoReflect.Descriptor instead.
func (*ResponseTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{56}
}

func (x *ResponseTransaction) GetFields() []*Transaction {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResponseTransaction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Withdraw structure.
type SetRequestWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Secure   string   `protobuf:"bytes,4,opt,name=secure,proto3" json:"secure,omitempty"`
	Price    float64  `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Quantity float64  `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Refresh  bool     `protobuf:"varint,7,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Platform Platform `protobuf:"varint,8,opt,name=platform,proto3,enum=pbspot.Platform" json:"platform,omitempty"`
}

func (x *SetRequestWithdraw) Reset() {
	*x = SetRequestWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequestWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestWithdraw) ProtoMessage() {}

func (x *SetRequestWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestWithdraw.ProtoReflect.Descriptor instead.
func (*SetRequestWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{57}
}

func (x *SetRequestWithdraw) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetRequestWithdraw) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SetRequestWithdraw) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SetRequestWithdraw) GetSecure() string {
	if x != nil {
		return x.Secure
	}
	return ""
}

func (x *SetRequestWithdraw) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SetRequestWithdraw) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SetRequestWithdraw) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *SetRequestWithdraw) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_BITCOIN
}

type CancelRequestWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequestWithdraw) Reset() {
	*x = CancelRequestWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequestWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequestWithdraw) ProtoMessage() {}

func (x *CancelRequestWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequestWithdraw.ProtoReflect.Descriptor instead.
func (*CancelRequestWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{58}
}

func (x *CancelRequestWithdraw) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResponseWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResponseWithdraw) Reset() {
	*x = ResponseWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWithdraw) ProtoMessage() {}

func (x *ResponseWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWithdraw.ProtoReflect.Descriptor instead.
func (*ResponseWithdraw) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{59}
}

func (x *ResponseWithdraw) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Option message structure.
type Order_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turn  bool    `protobuf:"varint,1,opt,name=turn,proto3" json:"turn,omitempty"`
	Maker bool    `protobuf:"varint,2,opt,name=maker,proto3" json:"maker,omitempty"`
	Equal bool    `protobuf:"varint,3,opt,name=equal,proto3" json:"equal,omitempty"`
	Fees  float64 `protobuf:"fixed64,9,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (x *Order_Param) Reset() {
	*x = Order_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_pbspot_spot_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order_Param) ProtoMessage() {}

func (x *Order_Param) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_pbspot_spot_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order_Param.ProtoReflect.Descriptor instead.
func (*Order_Param) Descriptor() ([]byte, []int) {
	return file_server_proto_pbspot_spot_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Order_Param) GetTurn() bool {
	if x != nil {
		return x.Turn
	}
	return false
}

func (x *Order_Param) GetMaker() bool {
	if x != nil {
		return x.Maker
	}
	return false
}

func (x *Order_Param) GetEqual() bool {
	if x != nil {
		return x.Equal
	}
	return false
}

func (x *Order_Param) GetFees() float64 {
	if x != nil {
		return x.Fees
	}
	return 0
}

var File_server_proto_pbspot_spot_proto protoreflect.FileDescriptor

var file_server_proto_pbspot_spot_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x96, 0x05, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x65, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd9, 0x04, 0x0a, 0x05, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x70, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x70, 0x63, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x70, 0x63, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66,
	0x65, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xab, 0x02, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x22, 0xc8, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x5b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x22,
	0xe0, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x6f, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x25, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x40, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22,
	0x52, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x4c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x29, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x2a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22,
	0x28, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xa0,
	0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3c,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x27, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x87, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f,
	0x42, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x5f, 0x54,
	0x52, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x4f, 0x53,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x5f, 0x46, 0x41, 0x4e, 0x54, 0x4f, 0x4d, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x10,
	0x08, 0x2a, 0x96, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x50, 0x32, 0x30,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x50, 0x37, 0x32, 0x31, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x45, 0x50, 0x31, 0x31, 0x35, 0x35, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x52, 0x43, 0x37, 0x32, 0x31,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x50, 0x39, 0x39, 0x38, 0x10, 0x0b, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x45, 0x50, 0x32, 0x32, 0x33, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52,
	0x43, 0x32, 0x30, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10,
	0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x0f, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52,
	0x43, 0x32, 0x32, 0x33, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x43, 0x32, 0x30, 0x10,
	0x12, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x13, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
	0x43, 0x39, 0x39, 0x38, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x43, 0x32, 0x32, 0x33,
	0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x43, 0x32, 0x30, 0x10, 0x17, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x43,
	0x31, 0x31, 0x35, 0x35, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x43, 0x39, 0x39, 0x38,
	0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x1b, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x52, 0x43, 0x32, 0x30, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43,
	0x37, 0x32, 0x31, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x43, 0x31, 0x31, 0x35, 0x35,
	0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43, 0x39, 0x39, 0x38, 0x10, 0x1f, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x52, 0x43, 0x32, 0x32, 0x33, 0x10, 0x20, 0x2a, 0x3d, 0x0a, 0x09, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x2a, 0x18, 0x0a, 0x04, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49,
	0x44, 0x10, 0x01, 0x2a, 0x22, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x53, 0x10, 0x01, 0x2a, 0x1f, 0x0a,
	0x07, 0x46, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x41, 0x54, 0x10, 0x01, 0x2a, 0x2d,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x50, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x56, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x1e, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55,
	0x4f, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49, 0x53, 0x41, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04,
	0x2a, 0x1e, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x49, 0x4e, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01,
	0x2a, 0x6e, 0x0a, 0x06, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x04,
	0x32, 0xf4, 0x1f, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x59, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22,
	0x13, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x01,
	0x2a, 0x12, 0x65, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6f,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x22, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x68, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a,
	0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x18, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x15,
	0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x73, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70,
	0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x73, 0x70, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x18, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0x63, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x70,
	0x61, 0x69, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x70, 0x61, 0x69,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x73, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x15, 0x5a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x73, 0x70, 0x6f, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_pbspot_spot_proto_rawDescOnce sync.Once
	file_server_proto_pbspot_spot_proto_rawDescData = file_server_proto_pbspot_spot_proto_rawDesc
)

func file_server_proto_pbspot_spot_proto_rawDescGZIP() []byte {
	file_server_proto_pbspot_spot_proto_rawDescOnce.Do(func() {
		file_server_proto_pbspot_spot_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_pbspot_spot_proto_rawDescData)
	})
	return file_server_proto_pbspot_spot_proto_rawDescData
}

var file_server_proto_pbspot_spot_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_server_proto_pbspot_spot_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_server_proto_pbspot_spot_proto_goTypes = []interface{}{
	(Tag)(0),                             // 0: pbspot.Tag
	(Protocol)(0),                        // 1: pbspot.Protocol
	(Assigning)(0),                       // 2: pbspot.Assigning
	(Side)(0),                            // 3: pbspot.Side
	(TradeType)(0),                       // 4: pbspot.TradeType
	(TxType)(0),                          // 5: pbspot.TxType
	(FinType)(0),                         // 6: pbspot.FinType
	(OrderType)(0),                       // 7: pbspot.OrderType
	(Status)(0),                          // 8: pbspot.Status
	(Summary)(0),                         // 9: pbspot.Summary
	(Platform)(0),                        // 10: pbspot.Platform
	(Balance)(0),                         // 11: pbspot.Balance
	(Pusher)(0),                          // 12: pbspot.Pusher
	(*Contract)(nil),                     // 13: pbspot.Contract
	(*Currency)(nil),                     // 14: pbspot.Currency
	(*Chain)(nil),                        // 15: pbspot.Chain
	(*Pair)(nil),                         // 16: pbspot.Pair
	(*Graph)(nil),                        // 17: pbspot.Graph
	(*Stats)(nil),                        // 18: pbspot.Stats
	(*Trade)(nil),                        // 19: pbspot.Trade
	(*Order)(nil),                        // 20: pbspot.Order
	(*Transaction)(nil),                  // 21: pbspot.Transaction
	(*Analysis)(nil),                     // 22: pbspot.Analysis
	(*Transfer)(nil),                     // 23: pbspot.Transfer
	(*GetRequestPriceManual)(nil),        // 24: pbspot.GetRequestPriceManual
	(*ResponsePrice)(nil),                // 25: pbspot.ResponsePrice
	(*GetRequestContractsRule)(nil),      // 26: pbspot.GetRequestContractsRule
	(*GetRequestContractRule)(nil),       // 27: pbspot.GetRequestContractRule
	(*SetRequestContractRule)(nil),       // 28: pbspot.SetRequestContractRule
	(*DeleteRequestContractRule)(nil),    // 29: pbspot.DeleteRequestContractRule
	(*ResponseContract)(nil),             // 30: pbspot.ResponseContract
	(*GetRequestChainsRule)(nil),         // 31: pbspot.GetRequestChainsRule
	(*GetRequestChainRule)(nil),          // 32: pbspot.GetRequestChainRule
	(*SetRequestChainRule)(nil),          // 33: pbspot.SetRequestChainRule
	(*DeleteRequestChainRule)(nil),       // 34: pbspot.DeleteRequestChainRule
	(*ResponseChain)(nil),                // 35: pbspot.ResponseChain
	(*GetRequestCurrenciesRule)(nil),     // 36: pbspot.GetRequestCurrenciesRule
	(*GetRequestCurrencyRule)(nil),       // 37: pbspot.GetRequestCurrencyRule
	(*SetRequestCurrencyRule)(nil),       // 38: pbspot.SetRequestCurrencyRule
	(*DeleteRequestCurrencyRule)(nil),    // 39: pbspot.DeleteRequestCurrencyRule
	(*ResponseCurrency)(nil),             // 40: pbspot.ResponseCurrency
	(*GetRequestPairs)(nil),              // 41: pbspot.GetRequestPairs
	(*GetRequestPair)(nil),               // 42: pbspot.GetRequestPair
	(*GetRequestPairsRule)(nil),          // 43: pbspot.GetRequestPairsRule
	(*GetRequestPairRule)(nil),           // 44: pbspot.GetRequestPairRule
	(*SetRequestPairRule)(nil),           // 45: pbspot.SetRequestPairRule
	(*DeleteRequestPairRule)(nil),        // 46: pbspot.DeleteRequestPairRule
	(*ResponsePair)(nil),                 // 47: pbspot.ResponsePair
	(*GetRequestAssetsManual)(nil),       // 48: pbspot.GetRequestAssetsManual
	(*GetRequestAsset)(nil),              // 49: pbspot.GetRequestAsset
	(*SetRequestAsset)(nil),              // 50: pbspot.SetRequestAsset
	(*ResponseAsset)(nil),                // 51: pbspot.ResponseAsset
	(*GetRequestSymbol)(nil),             // 52: pbspot.GetRequestSymbol
	(*ResponseSymbol)(nil),               // 53: pbspot.ResponseSymbol
	(*GetRequestAnalysis)(nil),           // 54: pbspot.GetRequestAnalysis
	(*ResponseAnalysis)(nil),             // 55: pbspot.ResponseAnalysis
	(*GetRequestMarkers)(nil),            // 56: pbspot.GetRequestMarkers
	(*ResponseMarker)(nil),               // 57: pbspot.ResponseMarker
	(*SetRequestOrder)(nil),              // 58: pbspot.SetRequestOrder
	(*GetRequestOrdersManual)(nil),       // 59: pbspot.GetRequestOrdersManual
	(*CancelRequestOrder)(nil),           // 60: pbspot.CancelRequestOrder
	(*ResponseOrder)(nil),                // 61: pbspot.ResponseOrder
	(*GetRequestGraph)(nil),              // 62: pbspot.GetRequestGraph
	(*ResponseGraph)(nil),                // 63: pbspot.ResponseGraph
	(*GetRequestTransfers)(nil),          // 64: pbspot.GetRequestTransfers
	(*ResponseTransfer)(nil),             // 65: pbspot.ResponseTransfer
	(*GetRequestTrades)(nil),             // 66: pbspot.GetRequestTrades
	(*ResponseTrades)(nil),               // 67: pbspot.ResponseTrades
	(*GetRequestTransactionsManual)(nil), // 68: pbspot.GetRequestTransactionsManual
	(*ResponseTransaction)(nil),          // 69: pbspot.ResponseTransaction
	(*SetRequestWithdraw)(nil),           // 70: pbspot.SetRequestWithdraw
	(*CancelRequestWithdraw)(nil),        // 71: pbspot.CancelRequestWithdraw
	(*ResponseWithdraw)(nil),             // 72: pbspot.ResponseWithdraw
	(*Order_Param)(nil),                  // 73: pbspot.Order.Param
}
var file_server_proto_pbspot_spot_proto_depIdxs = []int32{
	10, // 0: pbspot.Contract.platform:type_name -> pbspot.Platform
	1,  // 1: pbspot.Contract.protocol:type_name -> pbspot.Protocol
	15, // 2: pbspot.Currency.chains:type_name -> pbspot.Chain
	16, // 3: pbspot.Currency.pairs:type_name -> pbspot.Pair
	6,  // 4: pbspot.Currency.fin_type:type_name -> pbspot.FinType
	10, // 5: pbspot.Chain.platform:type_name -> pbspot.Platform
	13, // 6: pbspot.Chain.contract:type_name -> pbspot.Contract
	0,  // 7: pbspot.Chain.tag:type_name -> pbspot.Tag
	2,  // 8: pbspot.Trade.assigning:type_name -> pbspot.Assigning
	73, // 9: pbspot.Order.param:type_name -> pbspot.Order.Param
	2,  // 10: pbspot.Order.assigning:type_name -> pbspot.Assigning
	8,  // 11: pbspot.Order.status:type_name -> pbspot.Status
	5,  // 12: pbspot.Transaction.tx_type:type_name -> pbspot.TxType
	6,  // 13: pbspot.Transaction.fin_type:type_name -> pbspot.FinType
	10, // 14: pbspot.Transaction.platform:type_name -> pbspot.Platform
	1,  // 15: pbspot.Transaction.protocol:type_name -> pbspot.Protocol
	8,  // 16: pbspot.Transaction.status:type_name -> pbspot.Status
	15, // 17: pbspot.Transaction.chain:type_name -> pbspot.Chain
	2,  // 18: pbspot.Transfer.assigning:type_name -> pbspot.Assigning
	13, // 19: pbspot.SetRequestContractRule.contract:type_name -> pbspot.Contract
	13, // 20: pbspot.ResponseContract.fields:type_name -> pbspot.Contract
	15, // 21: pbspot.SetRequestChainRule.chain:type_name -> pbspot.Chain
	15, // 22: pbspot.ResponseChain.fields:type_name -> pbspot.Chain
	14, // 23: pbspot.SetRequestCurrencyRule.currency:type_name -> pbspot.Currency
	14, // 24: pbspot.ResponseCurrency.fields:type_name -> pbspot.Currency
	16, // 25: pbspot.SetRequestPairRule.pair:type_name -> pbspot.Pair
	16, // 26: pbspot.ResponsePair.fields:type_name -> pbspot.Pair
	10, // 27: pbspot.SetRequestAsset.platform:type_name -> pbspot.Platform
	1,  // 28: pbspot.SetRequestAsset.protocol:type_name -> pbspot.Protocol
	6,  // 29: pbspot.SetRequestAsset.fin_type:type_name -> pbspot.FinType
	14, // 30: pbspot.ResponseAsset.fields:type_name -> pbspot.Currency
	22, // 31: pbspot.ResponseAnalysis.fields:type_name -> pbspot.Analysis
	4,  // 32: pbspot.SetRequestOrder.trade_type:type_name -> pbspot.TradeType
	2,  // 33: pbspot.SetRequestOrder.assigning:type_name -> pbspot.Assigning
	2,  // 34: pbspot.GetRequestOrdersManual.assigning:type_name -> pbspot.Assigning
	8,  // 35: pbspot.GetRequestOrdersManual.status:type_name -> pbspot.Status
	20, // 36: pbspot.ResponseOrder.fields:type_name -> pbspot.Order
	17, // 37: pbspot.ResponseGraph.fields:type_name -> pbspot.Graph
	18, // 38: pbspot.ResponseGraph.stats:type_name -> pbspot.Stats
	2,  // 39: pbspot.GetRequestTransfers.assigning:type_name -> pbspot.Assigning
	23, // 40: pbspot.ResponseTransfer.fields:type_name -> pbspot.Transfer
	2,  // 41: pbspot.GetRequestTrades.assigning:type_name -> pbspot.Assigning
	19, // 42: pbspot.ResponseTrades.fields:type_name -> pbspot.Trade
	5,  // 43: pbspot.GetRequestTransactionsManual.tx_type:type_name -> pbspot.TxType
	21, // 44: pbspot.ResponseTransaction.fields:type_name -> pbspot.Transaction
	10, // 45: pbspot.SetRequestWithdraw.platform:type_name -> pbspot.Platform
	50, // 46: pbspot.Api.SetAsset:input_type -> pbspot.SetRequestAsset
	48, // 47: pbspot.Api.GetAssets:input_type -> pbspot.GetRequestAssetsManual
	49, // 48: pbspot.Api.GetAsset:input_type -> pbspot.GetRequestAsset
	52, // 49: pbspot.Api.GetSymbol:input_type -> pbspot.GetRequestSymbol
	54, // 50: pbspot.Api.GetAnalysis:input_type -> pbspot.GetRequestAnalysis
	56, // 51: pbspot.Api.GetMarkers:input_type -> pbspot.GetRequestMarkers
	41, // 52: pbspot.Api.GetPairs:input_type -> pbspot.GetRequestPairs
	42, // 53: pbspot.Api.GetPair:input_type -> pbspot.GetRequestPair
	58, // 54: pbspot.Api.SetOrder:input_type -> pbspot.SetRequestOrder
	60, // 55: pbspot.Api.CancelOrder:input_type -> pbspot.CancelRequestOrder
	59, // 56: pbspot.Api.GetOrders:input_type -> pbspot.GetRequestOrdersManual
	62, // 57: pbspot.Api.GetGraph:input_type -> pbspot.GetRequestGraph
	64, // 58: pbspot.Api.GetTransfers:input_type -> pbspot.GetRequestTransfers
	66, // 59: pbspot.Api.GetTrades:input_type -> pbspot.GetRequestTrades
	24, // 60: pbspot.Api.GetPrice:input_type -> pbspot.GetRequestPriceManual
	68, // 61: pbspot.Api.GetTransactions:input_type -> pbspot.GetRequestTransactionsManual
	70, // 62: pbspot.Api.SetWithdraw:input_type -> pbspot.SetRequestWithdraw
	71, // 63: pbspot.Api.CancelWithdraw:input_type -> pbspot.CancelRequestWithdraw
	24, // 64: pbspot.Api.GetMarketPriceRule:input_type -> pbspot.GetRequestPriceManual
	38, // 65: pbspot.Api.SetCurrencyRule:input_type -> pbspot.SetRequestCurrencyRule
	37, // 66: pbspot.Api.GetCurrencyRule:input_type -> pbspot.GetRequestCurrencyRule
	36, // 67: pbspot.Api.GetCurrenciesRule:input_type -> pbspot.GetRequestCurrenciesRule
	39, // 68: pbspot.Api.DeleteCurrencyRule:input_type -> pbspot.DeleteRequestCurrencyRule
	31, // 69: pbspot.Api.GetChainsRule:input_type -> pbspot.GetRequestChainsRule
	32, // 70: pbspot.Api.GetChainRule:input_type -> pbspot.GetRequestChainRule
	33, // 71: pbspot.Api.SetChainRule:input_type -> pbspot.SetRequestChainRule
	34, // 72: pbspot.Api.DeleteChainRule:input_type -> pbspot.DeleteRequestChainRule
	43, // 73: pbspot.Api.GetPairsRule:input_type -> pbspot.GetRequestPairsRule
	44, // 74: pbspot.Api.GetPairRule:input_type -> pbspot.GetRequestPairRule
	45, // 75: pbspot.Api.SetPairRule:input_type -> pbspot.SetRequestPairRule
	46, // 76: pbspot.Api.DeletePairRule:input_type -> pbspot.DeleteRequestPairRule
	26, // 77: pbspot.Api.GetContractsRule:input_type -> pbspot.GetRequestContractsRule
	27, // 78: pbspot.Api.GetContractRule:input_type -> pbspot.GetRequestContractRule
	28, // 79: pbspot.Api.SetContractRule:input_type -> pbspot.SetRequestContractRule
	29, // 80: pbspot.Api.DeleteContractRule:input_type -> pbspot.DeleteRequestContractRule
	68, // 81: pbspot.Api.GetTransactionsRule:input_type -> pbspot.GetRequestTransactionsManual
	59, // 82: pbspot.Api.GetOrdersRule:input_type -> pbspot.GetRequestOrdersManual
	48, // 83: pbspot.Api.GetAssetsRule:input_type -> pbspot.GetRequestAssetsManual
	51, // 84: pbspot.Api.SetAsset:output_type -> pbspot.ResponseAsset
	51, // 85: pbspot.Api.GetAssets:output_type -> pbspot.ResponseAsset
	51, // 86: pbspot.Api.GetAsset:output_type -> pbspot.ResponseAsset
	53, // 87: pbspot.Api.GetSymbol:output_type -> pbspot.ResponseSymbol
	55, // 88: pbspot.Api.GetAnalysis:output_type -> pbspot.ResponseAnalysis
	57, // 89: pbspot.Api.GetMarkers:output_type -> pbspot.ResponseMarker
	47, // 90: pbspot.Api.GetPairs:output_type -> pbspot.ResponsePair
	47, // 91: pbspot.Api.GetPair:output_type -> pbspot.ResponsePair
	61, // 92: pbspot.Api.SetOrder:output_type -> pbspot.ResponseOrder
	61, // 93: pbspot.Api.CancelOrder:output_type -> pbspot.ResponseOrder
	61, // 94: pbspot.Api.GetOrders:output_type -> pbspot.ResponseOrder
	63, // 95: pbspot.Api.GetGraph:output_type -> pbspot.ResponseGraph
	65, // 96: pbspot.Api.GetTransfers:output_type -> pbspot.ResponseTransfer
	67, // 97: pbspot.Api.GetTrades:output_type -> pbspot.ResponseTrades
	25, // 98: pbspot.Api.GetPrice:output_type -> pbspot.ResponsePrice
	69, // 99: pbspot.Api.GetTransactions:output_type -> pbspot.ResponseTransaction
	72, // 100: pbspot.Api.SetWithdraw:output_type -> pbspot.ResponseWithdraw
	72, // 101: pbspot.Api.CancelWithdraw:output_type -> pbspot.ResponseWithdraw
	25, // 102: pbspot.Api.GetMarketPriceRule:output_type -> pbspot.ResponsePrice
	40, // 103: pbspot.Api.SetCurrencyRule:output_type -> pbspot.ResponseCurrency
	40, // 104: pbspot.Api.GetCurrencyRule:output_type -> pbspot.ResponseCurrency
	40, // 105: pbspot.Api.GetCurrenciesRule:output_type -> pbspot.ResponseCurrency
	40, // 106: pbspot.Api.DeleteCurrencyRule:output_type -> pbspot.ResponseCurrency
	35, // 107: pbspot.Api.GetChainsRule:output_type -> pbspot.ResponseChain
	35, // 108: pbspot.Api.GetChainRule:output_type -> pbspot.ResponseChain
	35, // 109: pbspot.Api.SetChainRule:output_type -> pbspot.ResponseChain
	35, // 110: pbspot.Api.DeleteChainRule:output_type -> pbspot.ResponseChain
	47, // 111: pbspot.Api.GetPairsRule:output_type -> pbspot.ResponsePair
	47, // 112: pbspot.Api.GetPairRule:output_type -> pbspot.ResponsePair
	47, // 113: pbspot.Api.SetPairRule:output_type -> pbspot.ResponsePair
	47, // 114: pbspot.Api.DeletePairRule:output_type -> pbspot.ResponsePair
	30, // 115: pbspot.Api.GetContractsRule:output_type -> pbspot.ResponseContract
	30, // 116: pbspot.Api.GetContractRule:output_type -> pbspot.ResponseContract
	30, // 117: pbspot.Api.SetContractRule:output_type -> pbspot.ResponseContract
	30, // 118: pbspot.Api.DeleteContractRule:output_type -> pbspot.ResponseContract
	69, // 119: pbspot.Api.GetTransactionsRule:output_type -> pbspot.ResponseTransaction
	61, // 120: pbspot.Api.GetOrdersRule:output_type -> pbspot.ResponseOrder
	51, // 121: pbspot.Api.GetAssetsRule:output_type -> pbspot.ResponseAsset
	84, // [84:122] is the sub-list for method output_type
	46, // [46:84] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_server_proto_pbspot_spot_proto_init() }
func file_server_proto_pbspot_spot_proto_init() {
	if File_server_proto_pbspot_spot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_pbspot_spot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestPriceManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestContractsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestContractRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestChainsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestChainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestCurrenciesRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestCurrencyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestPairs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestPairsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequestPairRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestAssetsManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestMarkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestOrdersManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequestOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequestTransactionsManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequestWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequestWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_pbspot_spot_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_pbspot_spot_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_pbspot_spot_proto_goTypes,
		DependencyIndexes: file_server_proto_pbspot_spot_proto_depIdxs,
		EnumInfos:         file_server_proto_pbspot_spot_proto_enumTypes,
		MessageInfos:      file_server_proto_pbspot_spot_proto_msgTypes,
	}.Build()
	File_server_proto_pbspot_spot_proto = out.File
	file_server_proto_pbspot_spot_proto_rawDesc = nil
	file_server_proto_pbspot_spot_proto_goTypes = nil
	file_server_proto_pbspot_spot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	// Set asset address.
	SetAsset(ctx context.Context, in *SetRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get assets.
	GetAssets(ctx context.Context, in *GetRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get asset.
	GetAsset(ctx context.Context, in *GetRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error)
	// Get symbol.
	GetSymbol(ctx context.Context, in *GetRequestSymbol, opts ...grpc.CallOption) (*ResponseSymbol, error)
	// Get analysis.
	GetAnalysis(ctx context.Context, in *GetRequestAnalysis, opts ...grpc.CallOption) (*ResponseAnalysis, error)
	// Get markers.
	GetMarkers(ctx context.Context, in *GetRequestMarkers, opts ...grpc.CallOption) (*ResponseMarker, error)
	// Get pairs.
	GetPairs(ctx context.Context, in *GetRequestPairs, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get pair.
	GetPair(ctx context.Context, in *GetRequestPair, opts ...grpc.CallOption) (*ResponsePair, error)
	// Set order.
	SetOrder(ctx context.Context, in *SetRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Cancel order.
	CancelOrder(ctx context.Context, in *CancelRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get order.
	GetOrders(ctx context.Context, in *GetRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get graph.
	GetGraph(ctx context.Context, in *GetRequestGraph, opts ...grpc.CallOption) (*ResponseGraph, error)
	// Get trade transfers.
	GetTransfers(ctx context.Context, in *GetRequestTransfers, opts ...grpc.CallOption) (*ResponseTransfer, error)
	// Get trades.
	GetTrades(ctx context.Context, in *GetRequestTrades, opts ...grpc.CallOption) (*ResponseTrades, error)
	// Get price.
	GetPrice(ctx context.Context, in *GetRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error)
	// Get transactions.
	GetTransactions(ctx context.Context, in *GetRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error)
	// Set withdraw.
	SetWithdraw(ctx context.Context, in *SetRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error)
	// Cancel withdraw.
	CancelWithdraw(ctx context.Context, in *CancelRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error)
	// Administration api.
	// Get market-price.
	GetMarketPriceRule(ctx context.Context, in *GetRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error)
	// Set currency.
	SetCurrencyRule(ctx context.Context, in *SetRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get currency.
	GetCurrencyRule(ctx context.Context, in *GetRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get currencies.
	GetCurrenciesRule(ctx context.Context, in *GetRequestCurrenciesRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Delete currency.
	DeleteCurrencyRule(ctx context.Context, in *DeleteRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error)
	// Get chains.
	GetChainsRule(ctx context.Context, in *GetRequestChainsRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Get chain.
	GetChainRule(ctx context.Context, in *GetRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Set chain.
	SetChainRule(ctx context.Context, in *SetRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Delete chain.
	DeleteChainRule(ctx context.Context, in *DeleteRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error)
	// Get pairs.
	GetPairsRule(ctx context.Context, in *GetRequestPairsRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get pair.
	GetPairRule(ctx context.Context, in *GetRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Set pair.
	SetPairRule(ctx context.Context, in *SetRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Delete pair.
	DeletePairRule(ctx context.Context, in *DeleteRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error)
	// Get contracts.
	GetContractsRule(ctx context.Context, in *GetRequestContractsRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Get contract.
	GetContractRule(ctx context.Context, in *GetRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Set contract.
	SetContractRule(ctx context.Context, in *SetRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Delete contract.
	DeleteContractRule(ctx context.Context, in *DeleteRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error)
	// Get transactions.
	GetTransactionsRule(ctx context.Context, in *GetRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error)
	// Get orders.
	GetOrdersRule(ctx context.Context, in *GetRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error)
	// Get assets.
	GetAssetsRule(ctx context.Context, in *GetRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SetAsset(ctx context.Context, in *SetRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAssets(ctx context.Context, in *GetRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAsset(ctx context.Context, in *GetRequestAsset, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSymbol(ctx context.Context, in *GetRequestSymbol, opts ...grpc.CallOption) (*ResponseSymbol, error) {
	out := new(ResponseSymbol)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAnalysis(ctx context.Context, in *GetRequestAnalysis, opts ...grpc.CallOption) (*ResponseAnalysis, error) {
	out := new(ResponseAnalysis)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarkers(ctx context.Context, in *GetRequestMarkers, opts ...grpc.CallOption) (*ResponseMarker, error) {
	out := new(ResponseMarker)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetMarkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPairs(ctx context.Context, in *GetRequestPairs, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPair(ctx context.Context, in *GetRequestPair, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetOrder(ctx context.Context, in *SetRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CancelOrder(ctx context.Context, in *CancelRequestOrder, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/pbspot.Api/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrders(ctx context.Context, in *GetRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetGraph(ctx context.Context, in *GetRequestGraph, opts ...grpc.CallOption) (*ResponseGraph, error) {
	out := new(ResponseGraph)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransfers(ctx context.Context, in *GetRequestTransfers, opts ...grpc.CallOption) (*ResponseTransfer, error) {
	out := new(ResponseTransfer)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTrades(ctx context.Context, in *GetRequestTrades, opts ...grpc.CallOption) (*ResponseTrades, error) {
	out := new(ResponseTrades)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPrice(ctx context.Context, in *GetRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error) {
	out := new(ResponsePrice)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransactions(ctx context.Context, in *GetRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error) {
	out := new(ResponseTransaction)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetWithdraw(ctx context.Context, in *SetRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error) {
	out := new(ResponseWithdraw)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CancelWithdraw(ctx context.Context, in *CancelRequestWithdraw, opts ...grpc.CallOption) (*ResponseWithdraw, error) {
	out := new(ResponseWithdraw)
	err := c.cc.Invoke(ctx, "/pbspot.Api/CancelWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMarketPriceRule(ctx context.Context, in *GetRequestPriceManual, opts ...grpc.CallOption) (*ResponsePrice, error) {
	out := new(ResponsePrice)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetMarketPriceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetCurrencyRule(ctx context.Context, in *SetRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetCurrencyRule(ctx context.Context, in *GetRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetCurrenciesRule(ctx context.Context, in *GetRequestCurrenciesRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetCurrenciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteCurrencyRule(ctx context.Context, in *DeleteRequestCurrencyRule, opts ...grpc.CallOption) (*ResponseCurrency, error) {
	out := new(ResponseCurrency)
	err := c.cc.Invoke(ctx, "/pbspot.Api/DeleteCurrencyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetChainsRule(ctx context.Context, in *GetRequestChainsRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetChainsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetChainRule(ctx context.Context, in *GetRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetChainRule(ctx context.Context, in *SetRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteChainRule(ctx context.Context, in *DeleteRequestChainRule, opts ...grpc.CallOption) (*ResponseChain, error) {
	out := new(ResponseChain)
	err := c.cc.Invoke(ctx, "/pbspot.Api/DeleteChainRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPairsRule(ctx context.Context, in *GetRequestPairsRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetPairsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPairRule(ctx context.Context, in *GetRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetPairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetPairRule(ctx context.Context, in *SetRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetPairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeletePairRule(ctx context.Context, in *DeleteRequestPairRule, opts ...grpc.CallOption) (*ResponsePair, error) {
	out := new(ResponsePair)
	err := c.cc.Invoke(ctx, "/pbspot.Api/DeletePairRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetContractsRule(ctx context.Context, in *GetRequestContractsRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetContractsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetContractRule(ctx context.Context, in *GetRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetContractRule(ctx context.Context, in *SetRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/pbspot.Api/SetContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteContractRule(ctx context.Context, in *DeleteRequestContractRule, opts ...grpc.CallOption) (*ResponseContract, error) {
	out := new(ResponseContract)
	err := c.cc.Invoke(ctx, "/pbspot.Api/DeleteContractRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTransactionsRule(ctx context.Context, in *GetRequestTransactionsManual, opts ...grpc.CallOption) (*ResponseTransaction, error) {
	out := new(ResponseTransaction)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetTransactionsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrdersRule(ctx context.Context, in *GetRequestOrdersManual, opts ...grpc.CallOption) (*ResponseOrder, error) {
	out := new(ResponseOrder)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetOrdersRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAssetsRule(ctx context.Context, in *GetRequestAssetsManual, opts ...grpc.CallOption) (*ResponseAsset, error) {
	out := new(ResponseAsset)
	err := c.cc.Invoke(ctx, "/pbspot.Api/GetAssetsRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	// Set asset address.
	SetAsset(context.Context, *SetRequestAsset) (*ResponseAsset, error)
	// Get assets.
	GetAssets(context.Context, *GetRequestAssetsManual) (*ResponseAsset, error)
	// Get asset.
	GetAsset(context.Context, *GetRequestAsset) (*ResponseAsset, error)
	// Get symbol.
	GetSymbol(context.Context, *GetRequestSymbol) (*ResponseSymbol, error)
	// Get analysis.
	GetAnalysis(context.Context, *GetRequestAnalysis) (*ResponseAnalysis, error)
	// Get markers.
	GetMarkers(context.Context, *GetRequestMarkers) (*ResponseMarker, error)
	// Get pairs.
	GetPairs(context.Context, *GetRequestPairs) (*ResponsePair, error)
	// Get pair.
	GetPair(context.Context, *GetRequestPair) (*ResponsePair, error)
	// Set order.
	SetOrder(context.Context, *SetRequestOrder) (*ResponseOrder, error)
	// Cancel order.
	CancelOrder(context.Context, *CancelRequestOrder) (*ResponseOrder, error)
	// Get order.
	GetOrders(context.Context, *GetRequestOrdersManual) (*ResponseOrder, error)
	// Get graph.
	GetGraph(context.Context, *GetRequestGraph) (*ResponseGraph, error)
	// Get trade transfers.
	GetTransfers(context.Context, *GetRequestTransfers) (*ResponseTransfer, error)
	// Get trades.
	GetTrades(context.Context, *GetRequestTrades) (*ResponseTrades, error)
	// Get price.
	GetPrice(context.Context, *GetRequestPriceManual) (*ResponsePrice, error)
	// Get transactions.
	GetTransactions(context.Context, *GetRequestTransactionsManual) (*ResponseTransaction, error)
	// Set withdraw.
	SetWithdraw(context.Context, *SetRequestWithdraw) (*ResponseWithdraw, error)
	// Cancel withdraw.
	CancelWithdraw(context.Context, *CancelRequestWithdraw) (*ResponseWithdraw, error)
	// Administration api.
	// Get market-price.
	GetMarketPriceRule(context.Context, *GetRequestPriceManual) (*ResponsePrice, error)
	// Set currency.
	SetCurrencyRule(context.Context, *SetRequestCurrencyRule) (*ResponseCurrency, error)
	// Get currency.
	GetCurrencyRule(context.Context, *GetRequestCurrencyRule) (*ResponseCurrency, error)
	// Get currencies.
	GetCurrenciesRule(context.Context, *GetRequestCurrenciesRule) (*ResponseCurrency, error)
	// Delete currency.
	DeleteCurrencyRule(context.Context, *DeleteRequestCurrencyRule) (*ResponseCurrency, error)
	// Get chains.
	GetChainsRule(context.Context, *GetRequestChainsRule) (*ResponseChain, error)
	// Get chain.
	GetChainRule(context.Context, *GetRequestChainRule) (*ResponseChain, error)
	// Set chain.
	SetChainRule(context.Context, *SetRequestChainRule) (*ResponseChain, error)
	// Delete chain.
	DeleteChainRule(context.Context, *DeleteRequestChainRule) (*ResponseChain, error)
	// Get pairs.
	GetPairsRule(context.Context, *GetRequestPairsRule) (*ResponsePair, error)
	// Get pair.
	GetPairRule(context.Context, *GetRequestPairRule) (*ResponsePair, error)
	// Set pair.
	SetPairRule(context.Context, *SetRequestPairRule) (*ResponsePair, error)
	// Delete pair.
	DeletePairRule(context.Context, *DeleteRequestPairRule) (*ResponsePair, error)
	// Get contracts.
	GetContractsRule(context.Context, *GetRequestContractsRule) (*ResponseContract, error)
	// Get contract.
	GetContractRule(context.Context, *GetRequestContractRule) (*ResponseContract, error)
	// Set contract.
	SetContractRule(context.Context, *SetRequestContractRule) (*ResponseContract, error)
	// Delete contract.
	DeleteContractRule(context.Context, *DeleteRequestContractRule) (*ResponseContract, error)
	// Get transactions.
	GetTransactionsRule(context.Context, *GetRequestTransactionsManual) (*ResponseTransaction, error)
	// Get orders.
	GetOrdersRule(context.Context, *GetRequestOrdersManual) (*ResponseOrder, error)
	// Get assets.
	GetAssetsRule(context.Context, *GetRequestAssetsManual) (*ResponseAsset, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) SetAsset(context.Context, *SetRequestAsset) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAsset not implemented")
}
func (*UnimplementedApiServer) GetAssets(context.Context, *GetRequestAssetsManual) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (*UnimplementedApiServer) GetAsset(context.Context, *GetRequestAsset) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (*UnimplementedApiServer) GetSymbol(context.Context, *GetRequestSymbol) (*ResponseSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbol not implemented")
}
func (*UnimplementedApiServer) GetAnalysis(context.Context, *GetRequestAnalysis) (*ResponseAnalysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (*UnimplementedApiServer) GetMarkers(context.Context, *GetRequestMarkers) (*ResponseMarker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkers not implemented")
}
func (*UnimplementedApiServer) GetPairs(context.Context, *GetRequestPairs) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairs not implemented")
}
func (*UnimplementedApiServer) GetPair(context.Context, *GetRequestPair) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPair not implemented")
}
func (*UnimplementedApiServer) SetOrder(context.Context, *SetRequestOrder) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrder not implemented")
}
func (*UnimplementedApiServer) CancelOrder(context.Context, *CancelRequestOrder) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedApiServer) GetOrders(context.Context, *GetRequestOrdersManual) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (*UnimplementedApiServer) GetGraph(context.Context, *GetRequestGraph) (*ResponseGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (*UnimplementedApiServer) GetTransfers(context.Context, *GetRequestTransfers) (*ResponseTransfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (*UnimplementedApiServer) GetTrades(context.Context, *GetRequestTrades) (*ResponseTrades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (*UnimplementedApiServer) GetPrice(context.Context, *GetRequestPriceManual) (*ResponsePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (*UnimplementedApiServer) GetTransactions(context.Context, *GetRequestTransactionsManual) (*ResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedApiServer) SetWithdraw(context.Context, *SetRequestWithdraw) (*ResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWithdraw not implemented")
}
func (*UnimplementedApiServer) CancelWithdraw(context.Context, *CancelRequestWithdraw) (*ResponseWithdraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithdraw not implemented")
}
func (*UnimplementedApiServer) GetMarketPriceRule(context.Context, *GetRequestPriceManual) (*ResponsePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceRule not implemented")
}
func (*UnimplementedApiServer) SetCurrencyRule(context.Context, *SetRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrencyRule not implemented")
}
func (*UnimplementedApiServer) GetCurrencyRule(context.Context, *GetRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyRule not implemented")
}
func (*UnimplementedApiServer) GetCurrenciesRule(context.Context, *GetRequestCurrenciesRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrenciesRule not implemented")
}
func (*UnimplementedApiServer) DeleteCurrencyRule(context.Context, *DeleteRequestCurrencyRule) (*ResponseCurrency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyRule not implemented")
}
func (*UnimplementedApiServer) GetChainsRule(context.Context, *GetRequestChainsRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainsRule not implemented")
}
func (*UnimplementedApiServer) GetChainRule(context.Context, *GetRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainRule not implemented")
}
func (*UnimplementedApiServer) SetChainRule(context.Context, *SetRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChainRule not implemented")
}
func (*UnimplementedApiServer) DeleteChainRule(context.Context, *DeleteRequestChainRule) (*ResponseChain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChainRule not implemented")
}
func (*UnimplementedApiServer) GetPairsRule(context.Context, *GetRequestPairsRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairsRule not implemented")
}
func (*UnimplementedApiServer) GetPairRule(context.Context, *GetRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairRule not implemented")
}
func (*UnimplementedApiServer) SetPairRule(context.Context, *SetRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPairRule not implemented")
}
func (*UnimplementedApiServer) DeletePairRule(context.Context, *DeleteRequestPairRule) (*ResponsePair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePairRule not implemented")
}
func (*UnimplementedApiServer) GetContractsRule(context.Context, *GetRequestContractsRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsRule not implemented")
}
func (*UnimplementedApiServer) GetContractRule(context.Context, *GetRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractRule not implemented")
}
func (*UnimplementedApiServer) SetContractRule(context.Context, *SetRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContractRule not implemented")
}
func (*UnimplementedApiServer) DeleteContractRule(context.Context, *DeleteRequestContractRule) (*ResponseContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractRule not implemented")
}
func (*UnimplementedApiServer) GetTransactionsRule(context.Context, *GetRequestTransactionsManual) (*ResponseTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsRule not implemented")
}
func (*UnimplementedApiServer) GetOrdersRule(context.Context, *GetRequestOrdersManual) (*ResponseOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersRule not implemented")
}
func (*UnimplementedApiServer) GetAssetsRule(context.Context, *GetRequestAssetsManual) (*ResponseAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsRule not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_SetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetAsset(ctx, req.(*SetRequestAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestAssetsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAssets(ctx, req.(*GetRequestAssetsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAsset(ctx, req.(*GetRequestAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSymbol(ctx, req.(*GetRequestSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAnalysis(ctx, req.(*GetRequestAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestMarkers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetMarkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarkers(ctx, req.(*GetRequestMarkers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPairs(ctx, req.(*GetRequestPairs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPair(ctx, req.(*GetRequestPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetOrder(ctx, req.(*SetRequestOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequestOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CancelOrder(ctx, req.(*CancelRequestOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestOrdersManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrders(ctx, req.(*GetRequestOrdersManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetGraph(ctx, req.(*GetRequestGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTransfers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransfers(ctx, req.(*GetRequestTransfers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTrades)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTrades(ctx, req.(*GetRequestTrades))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPriceManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPrice(ctx, req.(*GetRequestPriceManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTransactionsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransactions(ctx, req.(*GetRequestTransactionsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetWithdraw(ctx, req.(*SetRequestWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CancelWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequestWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CancelWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/CancelWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CancelWithdraw(ctx, req.(*CancelRequestWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMarketPriceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPriceManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMarketPriceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetMarketPriceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMarketPriceRule(ctx, req.(*GetRequestPriceManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetCurrencyRule(ctx, req.(*SetRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetCurrencyRule(ctx, req.(*GetRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetCurrenciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestCurrenciesRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetCurrenciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetCurrenciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetCurrenciesRule(ctx, req.(*GetRequestCurrenciesRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestCurrencyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/DeleteCurrencyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteCurrencyRule(ctx, req.(*DeleteRequestCurrencyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetChainsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestChainsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetChainsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetChainsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetChainsRule(ctx, req.(*GetRequestChainsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetChainRule(ctx, req.(*GetRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetChainRule(ctx, req.(*SetRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteChainRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestChainRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteChainRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/DeleteChainRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteChainRule(ctx, req.(*DeleteRequestChainRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPairsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPairsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPairsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetPairsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPairsRule(ctx, req.(*GetRequestPairsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetPairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPairRule(ctx, req.(*GetRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetPairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetPairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetPairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetPairRule(ctx, req.(*SetRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeletePairRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestPairRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeletePairRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/DeletePairRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeletePairRule(ctx, req.(*DeleteRequestPairRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetContractsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestContractsRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetContractsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetContractsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetContractsRule(ctx, req.(*GetRequestContractsRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetContractRule(ctx, req.(*GetRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/SetContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetContractRule(ctx, req.(*SetRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteContractRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequestContractRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteContractRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/DeleteContractRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteContractRule(ctx, req.(*DeleteRequestContractRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTransactionsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestTransactionsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTransactionsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetTransactionsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTransactionsRule(ctx, req.(*GetRequestTransactionsManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrdersRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestOrdersManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrdersRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetOrdersRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrdersRule(ctx, req.(*GetRequestOrdersManual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAssetsRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestAssetsManual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAssetsRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbspot.Api/GetAssetsRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAssetsRule(ctx, req.(*GetRequestAssetsManual))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbspot.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAsset",
			Handler:    _Api_SetAsset_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _Api_GetAssets_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _Api_GetAsset_Handler,
		},
		{
			MethodName: "GetSymbol",
			Handler:    _Api_GetSymbol_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _Api_GetAnalysis_Handler,
		},
		{
			MethodName: "GetMarkers",
			Handler:    _Api_GetMarkers_Handler,
		},
		{
			MethodName: "GetPairs",
			Handler:    _Api_GetPairs_Handler,
		},
		{
			MethodName: "GetPair",
			Handler:    _Api_GetPair_Handler,
		},
		{
			MethodName: "SetOrder",
			Handler:    _Api_SetOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Api_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _Api_GetOrders_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _Api_GetGraph_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _Api_GetTransfers_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Api_GetTrades_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _Api_GetPrice_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Api_GetTransactions_Handler,
		},
		{
			MethodName: "SetWithdraw",
			Handler:    _Api_SetWithdraw_Handler,
		},
		{
			MethodName: "CancelWithdraw",
			Handler:    _Api_CancelWithdraw_Handler,
		},
		{
			MethodName: "GetMarketPriceRule",
			Handler:    _Api_GetMarketPriceRule_Handler,
		},
		{
			MethodName: "SetCurrencyRule",
			Handler:    _Api_SetCurrencyRule_Handler,
		},
		{
			MethodName: "GetCurrencyRule",
			Handler:    _Api_GetCurrencyRule_Handler,
		},
		{
			MethodName: "GetCurrenciesRule",
			Handler:    _Api_GetCurrenciesRule_Handler,
		},
		{
			MethodName: "DeleteCurrencyRule",
			Handler:    _Api_DeleteCurrencyRule_Handler,
		},
		{
			MethodName: "GetChainsRule",
			Handler:    _Api_GetChainsRule_Handler,
		},
		{
			MethodName: "GetChainRule",
			Handler:    _Api_GetChainRule_Handler,
		},
		{
			MethodName: "SetChainRule",
			Handler:    _Api_SetChainRule_Handler,
		},
		{
			MethodName: "DeleteChainRule",
			Handler:    _Api_DeleteChainRule_Handler,
		},
		{
			MethodName: "GetPairsRule",
			Handler:    _Api_GetPairsRule_Handler,
		},
		{
			MethodName: "GetPairRule",
			Handler:    _Api_GetPairRule_Handler,
		},
		{
			MethodName: "SetPairRule",
			Handler:    _Api_SetPairRule_Handler,
		},
		{
			MethodName: "DeletePairRule",
			Handler:    _Api_DeletePairRule_Handler,
		},
		{
			MethodName: "GetContractsRule",
			Handler:    _Api_GetContractsRule_Handler,
		},
		{
			MethodName: "GetContractRule",
			Handler:    _Api_GetContractRule_Handler,
		},
		{
			MethodName: "SetContractRule",
			Handler:    _Api_SetContractRule_Handler,
		},
		{
			MethodName: "DeleteContractRule",
			Handler:    _Api_DeleteContractRule_Handler,
		},
		{
			MethodName: "GetTransactionsRule",
			Handler:    _Api_GetTransactionsRule_Handler,
		},
		{
			MethodName: "GetOrdersRule",
			Handler:    _Api_GetOrdersRule_Handler,
		},
		{
			MethodName: "GetAssetsRule",
			Handler:    _Api_GetAssetsRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proto/pbspot/spot.proto",
}
