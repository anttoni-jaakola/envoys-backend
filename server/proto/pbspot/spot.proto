syntax = "proto3";

package pbspot;

option go_package = "server/proto/pbspot";

import "google/api/annotations.proto";
import "server/proto/basic.proto";

service Api {
    // Set asset address.
    rpc SetAsset (SetRequestAsset) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/spot/set-asset",
            body: "*"
        };
    }
    // Get assets.
    rpc GetAssets (GetRequestAssetsManual) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/spot/get-assets",
            body: "*"
        };
    }
    // Get asset.
    rpc GetAsset (GetRequestAsset) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/spot/get-asset",
            body: "*"
        };
    }
    // Get symbol.
    rpc GetSymbol (GetRequestSymbol) returns (ResponseSymbol) {
        option (google.api.http) = {
            post: "/v2/spot/get-symbol",
            body: "*"
        };
    }
    // Get analysis.
    rpc GetAnalysis (GetRequestAnalysis) returns (ResponseAnalysis) {
        option (google.api.http) = {
            post: "/v2/spot/get-analysis",
            body: "*"
        };
    }
    // Get markers.
    rpc GetMarkers (GetRequestMarkers) returns (ResponseMarker) {
        option (google.api.http) = {
            post: "/v2/spot/get-markers",
            body: "*"
        };
    }
    // Get pairs.
    rpc GetPairs (GetRequestPairs) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/spot/get-pairs",
            body: "*"
        };
    }
    // Get pair.
    rpc GetPair (GetRequestPair) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/spot/get-pair",
            body: "*"
        };
    }
    // Set order.
    rpc SetOrder (SetRequestOrder) returns (ResponseOrder) {
        option (google.api.http) = {
            post: "/v2/spot/set-order",
            body: "*"
        };
    }
    // Cancel order.
    rpc CancelOrder (CancelRequestOrder) returns (ResponseOrder) {
        option (google.api.http) = {
            post: "/v2/spot/cancel-order",
            body: "*"
        };
    }
    // Get order.
    rpc GetOrders (GetRequestOrders) returns (ResponseOrder) {
        option (google.api.http) = {
            post: "/v2/spot/get-orders",
            body: "*"
        };
    }
    // Get ticker.
    rpc GetTicker (GetRequestTicker) returns (ResponseTicker) {
        option (google.api.http) = {
            post: "/v2/spot/get-ticker",
            body: "*"
            additional_bindings {
                get: "/v2/spot/get-ticker"
            }
        };
    }
    // Get trades.
    rpc GetTrades (GetRequestTrades) returns (ResponseTrade) {
        option (google.api.http) = {
            post: "/v2/spot/get-trades",
            body: "*"
        };
    }
    // Get price.
    rpc GetPrice (GetRequestPriceManual) returns (ResponsePrice) {
        option (google.api.http) = {
            get: "/v2/spot/get-price"
        };
    }
    // Get transactions.
    rpc GetTransactions (GetRequestTransactionsManual) returns (ResponseTransaction) {
        option (google.api.http) = {
            post: "/v2/spot/get-transactions",
            body: "*"
        };
    }
    // Set withdraw.
    rpc SetWithdraw (SetRequestWithdraw) returns (ResponseWithdraw) {
        option (google.api.http) = {
            post: "/v2/spot/set-withdraw",
            body: "*"
        };
    }
    // Cancel withdraw.
    rpc CancelWithdraw (CancelRequestWithdraw) returns (ResponseWithdraw) {
        option (google.api.http) = {
            post: "/v2/spot/cancel-withdraw",
            body: "*"
        };
    }

    // Administration api.
    // Get market-price.
    rpc GetMarketPriceRule (GetRequestPriceManual) returns (ResponsePrice) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-market-price",
            body: "*"
        };
    }
    // Set asset.
    rpc SetAssetRule (SetRequestAssetRule) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-asset",
            body: "*"
        };
    }
    // Get asset.
    rpc GetAssetRule (GetRequestAssetRule) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-asset",
            body: "*"
        };
    }
    // Get assets.
    rpc GetAssetsRule (GetRequestAssetsRule) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-assets",
            body: "*"
        };
    }
    // Delete asset.
    rpc DeleteAssetRule (DeleteRequestAssetRule) returns (ResponseAsset) {
        option (google.api.http) = {
            post: "/v2/admin/spot/delete-asset",
            body: "*"
        };
    }
    // Get chains.
    rpc GetChainsRule (GetRequestChainsRule) returns (ResponseChain) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-chains",
            body: "*"
        };
    }
    // Get chain.
    rpc GetChainRule (GetRequestChainRule) returns (ResponseChain) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-chain",
            body: "*"
        };
    }
    // This code is an example of an RPC (Remote Procedure Call) in the Google API. It is used to set a chain rule,
    // which is a rule that is used to determine how data should be linked together or processed. The code defines
    // the URL that should be used to send the request, as well as the format of the body of the request. This code
    // allows the client to send a request to the API and receive a response, allowing the API to handle the chain rule.
    rpc SetChainRule (SetRequestChainRule) returns (ResponseChain) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-chain",
            body: "*"
        };
    }
    // This code is defining an RPC (remote procedure call) called DeleteChainRule. This RPC will be used to delete a
    // chain rule from a system using an HTTP POST request. The request body of the POST request must contain the
    // DeleteRequestChainRule object, and the response will be a ResponseChain object.
    rpc DeleteChainRule (DeleteRequestChainRule) returns (ResponseChain) {
        option (google.api.http) = {
            post: "/v2/admin/spot/delete-chain",
            body: "*"
        };
    }
    // This RPC is used to retrieve a specific pair rule from a server. The GetRequestPairsRule is a request object
    // that contains the parameters needed to retrieve the desired pair rule and the ResponsePair is the response
    // object that contains the requested pair rule. The option "google.api.http" specifies the HTTP method and URL
    // that the request should be sent to in order to retrieve the pair rule.
    rpc GetPairsRule (GetRequestPairsRule) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-pairs",
            body: "*"
        };
    }
    // This is an RPC (remote procedure call) which is used to retrieve a pair rule from a server. The request is
    // sent using an HTTP POST request to the "/v2/admin/spot/get-pair" endpoint and the body of the request contains
    // the data that is needed to retrieve the pair rule. The response is returned as a ResponsePair.
    rpc GetPairRule (GetRequestPairRule) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-pair",
            body: "*"
        };
    }
    // This code is used to set the request and response pair rule for the RPC (remote procedure call). The
    // SetPairRule RPC takes the SetRequestPairRule as an input and returns the ResponsePair as an output. The
    // google.api.http option specifies that when this RPC is called, the data should be sent as a POST request to
    // the "/v2/admin/spot/set-pair" endpoint and the body of the request should include all of the data.
    rpc SetPairRule (SetRequestPairRule) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-pair",
            body: "*"
        };
    }
    // This code is part of an RPC (Remote Procedure Call) which allows the DeletePairRule function to delete a pair
    // rule on a remote server. The function takes in a DeleteRequestPairRule object as an argument and returns a
    // ResponsePair object. The option (google.api.http) further specifies that the post request will be sent to
    // "/v2/admin/spot/delete-pair" with the body being whatever is passed in as an argument.
    rpc DeletePairRule (DeleteRequestPairRule) returns (ResponsePair) {
        option (google.api.http) = {
            post: "/v2/admin/spot/delete-pair",
            body: "*"
        };
    }
    // This is an RPC (remote procedure call) that allows a client to make an HTTP POST request to the specified URL
    // in order to get a list of contracts and their associated rules. The request and response are specified as the
    // "GetRequestContractsRule" and "ResponseContract" types, respectively.
    rpc GetContractsRule (GetRequestContractsRule) returns (ResponseContract) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-contracts",
            body: "*"
        };
    }
    // This rpc is used to get the rules and details of a specific contract. The GetRequestContractRule is used to
    // send a request for the contract details, and the ResponseContract will contain the details of the contract.
    // The google.api.http option is used to specify the HTTP method and endpoint path for the request.
    rpc GetContractRule (GetRequestContractRule) returns (ResponseContract) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-contract",
            body: "*"
        };
    }
    // This code is part of a remote procedure call (RPC) that provides a service to set contract rules. The purpose
    // of this RPC is to set a contract rule that can be used to control access to a certain service. The code
    // specifies the type of request (SetRequestContractRule) and response (ResponseContract) that will be sent and
    // received with respect to this service, as well as the HTTP method (POST) and URL "/v2/admin/spot/set-contract"
    // that should be used to access the service.
    rpc SetContractRule (SetRequestContractRule) returns (ResponseContract) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-contract",
            body: "*"
        };
    }
    // This is a remote procedure call (RPC) that is used to delete a contract rule. It takes a
    // DeleteRequestContractRule as an argument, and returns a ResponseContract. The option provided indicates that a
    // POST request is made to the "/v2/admin/spot/delete-contract" endpoint of the API, with the request body
    // containing the DeleteRequestContractRule argument.
    rpc DeleteContractRule (DeleteRequestContractRule) returns (ResponseContract) {
        option (google.api.http) = {
            post: "/v2/admin/spot/delete-contract",
            body: "*"
        };
    }
    // This code is part of a Remote Procedure Call (RPC) that is used to retrieve transaction information from an
    // admin spot. It defines a function, GetTransactionsRule, which takes an input of GetRequestTransactionsManual
    // and returns a ResponseTransaction. The "option" clause specifies the HTTP method (POST) and the body format
    // ("*") that the request will use.
    rpc GetTransactionsRule (GetRequestTransactionsManual) returns (ResponseTransaction) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-transactions",
            body: "*"
        };
    }
    // This rpc is used to get the assets rule from the GetRequestBalancesRule and return a response in the form of a
    // ResponseBalance. The option (google.api.http) defines an HTTP request with a POST method at
    // "/v2/admin/spot/get-balances" and specifies the body of the request as "*".
    rpc GetBalancesRule (GetRequestBalancesRule) returns (ResponseBalance) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-balances",
            body: "*"
        };
    }
    // This code is part of a gRPC API and is used to create an HTTP endpoint for a service to get reserves rule
    // information. The endpoint created by this code is "/v2/admin/spot/get-reserves" and it accepts a POST request
    // with a body containing the request parameters. The response from the endpoint will be a ResponseReserveobject.
    rpc GetReservesRule (GetRequestReservesManual) returns (ResponseReserve) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-reserves",
            body: "*"
        };
    }
    // This RPC function is used to set a reserve unlock rule. It takes a SetRequestReserveUnlockManual as an
    // argument and returns a ResponseReserve in response. The option provided is a Google API http configuration
    // that specifies the post request path and the body of the request.
    rpc SetReserveUnlockRule (SetRequestReserveUnlockManual) returns (ResponseReserve) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-reserve-unlock",
            body: "*"
        };
    }
    // This code is used to create a remote procedure call (RPC) for an API. The RPC is named GetRepaymentsRule and
    // takes in a GetRequestRepaymentsRule as an argument, and returns a ResponseRepayment as the result. The API
    // call is specified as a POST request to the "/v2/admin/spot/get-repayments" URL, and the body of the request will be "*".
    rpc GetRepaymentsRule (GetRequestRepaymentsRule) returns (ResponseRepayment) {
        option (google.api.http) = {
            post: "/v2/admin/spot/get-repayments",
            body: "*"
        };
    }
    // This RPC (remote procedure call) sets a repayment rule for a loan account. The SetRequestRepaymentRule object
    // contains all the information needed to set the repayment rule for a loan, and the ResponseRepayment object
    // contains the response from the server regarding the set rule. The google.api.http option specifies the URL (in
    // this case, '/v2/admin/spot/set-repayment') and the type of request (in this case, 'post' request) that should be used to access the RPC.
    rpc SetRepaymentsRule (SetRequestRepaymentRule) returns (ResponseRepayment) {
        option (google.api.http) = {
            post: "/v2/admin/spot/set-repayment",
            body: "*"
        };
    }
}

// The enum Tag is an enumerated data type that allows a programmer to assign unique numerical values to a list of
// identifiers (in this case, the names of different cryptocurrencies). This allows a programmer to easily reference
// those cryptocurrencies in other parts of their code. For example, if a program is designed to track the prices of
// different cryptocurrencies, they could use the enum Tag to refer to each one.
enum Tag {
    C_NONE = 0;
    C_BITCOIN = 1;
    C_ETHEREUM = 2;
    C_BINANCE = 3;
    C_TRON = 4;
    C_POLYGON = 5;
    C_CRONOS = 6;
    C_FANTOM = 7;
    C_AVALANCHE = 8;
}

// The purpose of the enum Protocol is to define a set of constants for different types of blockchain protocols. Each
// constant has a numerical value associated with it, which can be used to identify the protocol type. This makes it
// easier to programmatically identify which protocol is being used in a particular context.
enum Protocol {
    MAINNET = 0;
    ERC20 = 1;
    ERC721 = 2;
    ERC1155 = 3;
    ERC998 = 4;
    ERC223 = 5;
    BEP20 = 6;
    BEP721 = 7;
    BEP1155 = 8;
    TRC20 = 9;
    TRC721 = 10;
    BEP998 = 11;
    BEP223 = 12;
    PRC20 = 13;
    PRC721 = 14;
    PRC1155 = 15;
    PRC998 = 16;
    PRC223 = 17;
    CRC20 = 18;
    CRC721 = 19;
    CRC1155 = 20;
    CRC998 = 21;
    CRC223 = 22;
    FRC20 = 23;
    FRC721 = 24;
    FRC1155 = 25;
    FRC998 = 26;
    FRC223 = 27;
    ARC20 = 28;
    ARC721 = 29;
    ARC1155 = 30;
    ARC998 = 31;
    ARC223 = 32;
}

// Enums are used to define a set of named constants. In this example, the enum Allocation defines three named constants:
// External, Internal, and Fees. These constants can be used to assign a numerical value to the constants, which makes
// them easier to work with in code.
enum Allocation {
    EXTERNAL = 0;
    INTERNAL = 1;
    REWARD = 2;
}

// Enums are used in programming to create a set of named constants. In this example, the enum Type is used to
// categorize financial types, specifically Crypto and Fiat. The = 0 and = 1 are used to assign numerical values to the
// constants for easier comparison.
enum Type {
    CRYPTO = 0;
    FIAT = 1;
}

// The enum Platform is used to assign numerical values to different types of platforms. This allows for easier
// comparison and identification between different types of platforms. For example, if someone was looking for a
// platform with a numerical value of 2, they would know to look for TRON. This is a useful tool for developers and can
// help streamline the process of comparing and distinguishing between different types of platforms.
enum Platform {
    BITCOIN = 0;
    ETHEREUM = 1;
    TRON = 2;
    VISA = 3;
    MASTERCARD = 4;
}

// This is a message contract used by a programming language such as Protocol Buffers. It is used to define a data
// structure that can be used to store information about an asset or service. The message contract lists the different
// fields that will be used to store the asset or service information, such as the id, chain_id, chain_name,
// parent_symbol, symbol, address, fees_withdraw, decimals, platform, and protocol. This message contract can be used to
// create a data structure that can be used to store information about an asset or service, which can then be used in
// applications or services.
message Contract {
    int64 id = 1;
    int64 chain_id = 2;
    string chain_name = 3;
    string parent_symbol = 4;
    string symbol = 5;
    string address = 6;
    double fees = 7;
    int32 decimals = 8;
    Platform platform = 9;
    Protocol protocol = 10;
}

// Asset message structure.
message Asset {
    int64 id = 1;
    string name = 2;
    string symbol = 3;
    string create_at = 4;
    double balance = 5;
    double fees_trade = 6;
    double fees_discount = 7;
    double fees_charges = 8;
    double fees_costs = 9;
    double min_withdraw = 10;
    double max_withdraw = 11;
    double min_trade = 12;
    double max_trade = 13;
    double volume = 14;
    repeated Chain chains = 15;
    repeated Pair pairs = 16;
    repeated int64 chains_ids = 17;
    bool marker = 18;
    bool icon = 19;
    bool status = 20;
    Type type = 21;
}

// Chain message structure.
message Chain {
    int64 id = 1;
    string name = 2;
    string parent_symbol = 3;
    string explorer_link = 4;
    string address = 5;
    string rpc = 6;
    int64 block = 7;
    int64 network = 8;
    int64 confirmation = 9;
    int64 time_withdraw = 10;
    bool status = 11;
    bool exist = 12;
    double reserve = 13;
    double fees = 14;
    int32 decimals = 15;
    Platform platform = 16;
    Contract contract = 17;
    Tag tag = 18;
}

// Pair message structure.
message Pair {
    int64 id = 1;
    string symbol = 2;
    string base_unit = 3;
    string quote_unit = 4;
    string icon = 5;
    double price = 6;
    double ratio = 7;
    double base_decimal = 8;
    double quote_decimal = 9;
    bool status = 10;
    bool graph_clear = 11;
}

// Ticker message structure.
message Ticker {
    int64 id = 1;
    int64 time = 2;
    string base_unit = 3;
    string quote_unit = 4;
    double high = 5;
    double low = 6;
    double open = 7;
    double close = 8;
    double price = 9;
    double volume = 10;
    double ask_price = 11;
    double bid_price = 12;
}

// Graph stats message structure.
message Stats {
    double high = 1;
    double low = 2;
    double last = 3;
    double first = 5;
    double previous = 4;
    double volume = 6;
    int32 count = 7;
}

// Order message structure.
message Order {
    int64 id = 1;
    int64 user_id = 2;
    string base_unit = 3;
    string quote_unit = 4;
    string create_at = 5;
    double price = 6;
    double value = 7;
    double quantity = 8;
    double fees = 9;
    int32 count = 10;
    basic.Assigning assigning = 11;
    basic.Trading trading = 12;
    basic.Status status = 13;
}

// This message provides a structure for a transaction on a blockchain network. It defines the transaction's internal ID,
// chain/blockchain internal ID, account user internal ID, currency symbol, blockchain hash ID, transaction creation
// time, recipient's address, address from whom the transfer was made, number of funds, blockchain network fee for
// transferring funds, freeze currency conversion price, blockchain network confirmations, number of blocks in the
// blockchain network, data update via socket gateway, allocation, assignment, type, platform, protocol, status, chain,
// and parent.
message Transaction {
    int64 id = 1;
    int64 chain_id = 2;
    int64 user_id = 3;
    string symbol = 4;
    string hash = 5;
    string create_at = 6;
    string to = 7;
    string from = 8;
    double value = 9;
    double fees = 10;
    double price = 11;
    int64 confirmation = 12;
    int64 block = 13;
    bool hook = 14;
    Allocation allocation = 15;
    Type type = 16;
    Platform platform = 17;
    Protocol protocol = 18;
    Chain chain = 19;
    basic.Assignment assignment = 20;
    basic.Status status = 21;
    int64 parent = 22;
}

// Analysis message structure.
message Analysis {
    int64 id = 1;
    string base_unit = 2;
    string quote_unit = 3;
    double price = 4;
    double buy_ratio = 5;
    double sel_ratio = 6;
    repeated double ticker = 7;
}

// Trade message structure.
message Trade {
    int64 id = 1;
    int64 user_id = 2;
    string base_unit = 3;
    string quote_unit = 4;
    string create_at = 5;
    double price = 6;
    double quantity = 7;
    double fees = 8;
    bool maker = 9;
    basic.Assigning assigning = 10;
}

// Balance message structure.
message Balance {
    int64 id = 1;
    double value = 2;
    string symbol = 3;
}

// Balance structure.
message GetRequestBalancesRule {
    int64 id = 1;
    int64 limit = 2;
    int64 page = 3;
}
message ResponseBalance {
    repeated Balance fields = 1;
    int32 count = 2;
}

// Price structure.
message GetRequestPriceManual {
    string base_unit = 1;
    string quote_unit = 2;
}
message ResponsePrice {
    double price = 1;
}

// Contract structure.
message GetRequestContractsRule {
    int64 limit = 1;
    int64 page = 2;
    string search = 3;
}
message GetRequestContractRule {
    int64 id = 1;
}
message SetRequestContractRule {
    int64 id = 1;
    Contract contract = 2;
}
message DeleteRequestContractRule {
    int64 id = 1;
}
message ResponseContract {
    repeated Contract fields = 1;
    int32 count = 2;
    bool success = 3;
}

// Chain structure.
message GetRequestChainsRule {
    int64 limit = 1;
    int64 page = 2;
}
message GetRequestChainRule {
    int64 id = 1;
}
message SetRequestChainRule {
    int64 id = 1;
    Chain chain = 2;
}
message DeleteRequestChainRule {
    int64 id = 1;
}
message ResponseChain {
    repeated Chain fields = 1;
    int32 count = 2;
    bool success = 3;
}

// Assets structure.
message GetRequestAssetsRule {
    string search = 1;
    int64 limit = 2;
    int64 page = 3;
}
message GetRequestAssetRule {
    string symbol = 1;
}
message SetRequestAssetRule {
    string symbol = 1;
    bytes image = 2;
    Asset asset = 3;
}
message DeleteRequestAssetRule {
    string symbol = 1;
}
message GetRequestAssetsManual {
    int64 id = 1;
    int64 limit = 2;
    int64 page = 3;
}
message GetRequestAsset {
    string symbol = 1;
}
message SetRequestAsset {
    string symbol = 1;
    Platform platform = 2;
    Protocol protocol = 3;
    Type type = 4;
}
message ResponseAsset {
    repeated Asset fields = 1;
    string address = 2;
    bool success = 3;
    int32 count = 4;
}

// Pair structure.
message GetRequestPairs {
    string symbol = 1;
}
message GetRequestPair {
    string base_unit = 1;
    string quote_unit = 2;
}
message GetRequestPairsRule {
    int64 limit = 1;
    int64 page = 2;
    string search = 3;
}
message GetRequestPairRule {
    int64 id = 1;
}
message SetRequestPairRule {
    int64 id = 1;
    Pair pair = 2;
}
message DeleteRequestPairRule {
    int64 id = 1;
}
message ResponsePair {
    repeated Pair fields = 1;
    int32 count = 2;
    bool success = 3;
}

// Symbol structure.
message GetRequestSymbol {
    string base_unit = 1;
    string quote_unit = 2;
}
message ResponseSymbol {
    bool success = 1;
}

// Analysis structure.
message GetRequestAnalysis {
    int64 limit = 1;
    int64 page = 2;
}
message ResponseAnalysis {
    repeated Analysis fields = 1;
    int32 count = 2;
}

// Marker structure.
message GetRequestMarkers {}
message ResponseMarker {
    repeated string fields = 1;
}

// Order structure.
message SetRequestOrder {
    double price = 1;
    double quantity = 2;
    string base_unit = 3;
    string quote_unit = 4;
    basic.Trading trading = 5;
    basic.Assigning assigning = 6;
}
message GetRequestOrders {
    bool owner = 1;
    int64 user_id = 2;
    int64 limit = 3;
    int64 page = 4;
    string base_unit = 5;
    string quote_unit = 6;
    basic.Assigning assigning = 7;
    basic.Status status = 8;
}
message CancelRequestOrder {
    int64 id = 1;
}
message ResponseOrder {
    repeated Order fields = 1;
    double volume = 2;
    int32 count = 3;
    bool success = 4;
}

// Ticker structure.
message GetRequestTicker {
    int64 limit = 1;
    int64 from = 2;
    int64 to = 3;
    string base_unit = 4;
    string quote_unit = 5;
    string resolution = 6;
}
message ResponseTicker {
    repeated Ticker fields = 1;
    Stats stats = 2;
}

// Trade structure.
message GetRequestTrades {
    bool owner = 1;
    int64 limit = 2;
    int64 order_id = 3;
    basic.Assigning assigning = 4;
}
message ResponseTrade {
    repeated Trade fields = 1;
}

// Transaction structure.
message GetRequestTransactionsManual {
    int64 id = 1;
    int64 limit = 2;
    int64 page = 3;
    string symbol = 4;
    string search = 5;
    basic.Assignment assignment = 6;
}
message ResponseTransaction {
    repeated Transaction fields = 1;
    int32 count = 2;
}

// Withdraw structure.
message SetRequestWithdraw {
    int64 id = 1;
    string symbol = 2;
    string address = 3;
    string email_code = 4;
    string factor_code = 6;
    double price = 7;
    double quantity = 8;
    bool refresh = 9;
    Platform platform = 10;
}
message CancelRequestWithdraw {
    int64 id = 1;
}
message ResponseWithdraw {
    bool success = 1;
}

// Reserve structures.
message Reserve {
    int64 id = 1;
    int64 user_id = 2;
    string address = 3;
    string symbol = 4;
    double value = 5;
    double reverse = 6;
    bool lock = 7;
    Protocol protocol = 8;
    Platform platform = 9;
}
message GetRequestReservesManual {
    int64 id = 1;
    int64 limit = 2;
    int64 page = 3;
    string search = 5;
}
message SetRequestReserveUnlockManual {
    string id = 1;
}
message ResponseReserve {
    repeated Reserve fields = 1;
    int32 count = 2;
}

// Repayments structures.
message Repayment {
    int64 id = 1;
    int64 chain_id = 2;
    double value = 3;
    double fees = 4;
    string symbol = 5;
    string parent_symbol = 6;
    string create_at = 7;
    bool repayment = 8;
    Protocol protocol = 9;
    Platform platform = 10;
    Allocation allocation = 11;
    basic.Status status = 12;
}
message GetRequestRepaymentsRule {
    int64 limit = 1;
    int64 page = 2;
    basic.Status status = 3;
}
message SetRequestRepaymentRule {
    string id = 1;
}
message ResponseRepayment {
    repeated Repayment fields = 1;
    int32 count = 2;
    bool success = 3;
}