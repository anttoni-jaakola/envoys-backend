syntax = "proto3";

package pbstock;

option go_package = "server/proto/pbstock";

import "google/api/annotations.proto";
import "server/proto/basic.proto";

service Api {
  rpc SetAgent (SetRequestAgent) returns (ResponseAgent) {
    option (google.api.http) = {
      post: "/v2/stock/set-agent",
      body: "*"
    };
  }
  rpc GetAgent (GetRequestAgent) returns (ResponseAgent) {
    option (google.api.http) = {
      post: "/v2/stock/get-agent",
      body: "*"
    };
  }
  rpc GetBrokers (GetRequestBrokers) returns (ResponseBroker) {
    option (google.api.http) = {
      post: "/v2/stock/get-brokers",
      body: "*"
    };
  }
  rpc GetRequests (GetRequestRequests) returns (ResponseAgent) {
    option (google.api.http) = {
      post: "/v2/stock/get-requests",
      body: "*"
    };
  }
  rpc DeleteAgent (GetRequestDeleteAgent) returns (ResponseAgent) {
    option (google.api.http) = {
      post: "/v2/stock/delete-agent",
      body: "*"
    };
  }
  rpc SetSetting (GetRequestSetting) returns (ResponseSetting) {
    option (google.api.http) = {
      post: "/v2/stock/request/set-setting",
      body: "*"
    };
  }
  rpc GetAgents (GetRequestAgents) returns (ResponseAgent) {
    option (google.api.http) = {
      post: "/v2/stock/get-agents",
      body: "*"
    };
  }
  rpc SetBlocked (SetRequestAgentBlocked) returns (ResponseBlocked) {
    option (google.api.http) = {
      post: "/v2/stock/agent/set-blocked",
      body: "*"
    };
  }
  rpc GetAssets (GetRequestAssets) returns (ResponseAsset) {
    option (google.api.http) = {
      post: "/v2/stock/get-assets",
      body: "*"
    };
  }
  rpc GetAsset (GetRequestAsset) returns (ResponseAsset) {
    option (google.api.http) = {
      post: "/v2/stock/get-asset",
      body: "*"
    };
  }
  rpc SetAsset (SetRequestAsset) returns (ResponseAsset) {
    option (google.api.http) = {
      post: "/v2/stock/set-asset",
      body: "*"
    };
  }
  rpc SetWithdraw (SetRequestWithdraw) returns (ResponseWithdraw) {
    option (google.api.http) = {
      post: "/v2/stock/set-withdraw",
      body: "*"
    };
  }
  rpc GetWithdraws (GetRequestWithdraws) returns (ResponseWithdraw) {
    option (google.api.http) = {
      post: "/v2/stock/get-withdraws",
      body: "*"
    };
  }
  rpc CancelWithdraw (CancelRequestWithdraw) returns (ResponseWithdraw) {
    option (google.api.http) = {
      post: "/v2/stock/cancel-withdraw",
      body: "*"
    };
  }
  rpc SetBrokerAsset (SetRequestBrokerAsset) returns (ResponseBrokerAsset) {
    option (google.api.http) = {
      post: "/v2/stock/broker/set-asset",
      body: "*"
    };
  }
  rpc GetCandles (GetRequestCandles) returns (ResponseCandles) {
    option (google.api.http) = {
      post: "/v2/stock/get-candles",
      body: "*"
      additional_bindings {
        get: "/v2/stock/get-candles"
      }
    };
  }
  rpc GetPair (GetRequestPair) returns (ResponsePair) {
    option (google.api.http) = {
      post: "/v2/stock/get-pair",
      body: "*"
    };
  }
  rpc GetPairs (GetRequestPairs) returns (ResponsePair) {
    option (google.api.http) = {
      post: "/v2/stock/get-pairs",
      body: "*"
    };
  }
  rpc GetPrice (GetRequestPrice) returns (ResponsePrice) {
    option (google.api.http) = {
      get: "/v2/stock/get-price"
    };
  }
  rpc SetOrder (SetRequestOrder) returns (ResponseOrder) {
    option (google.api.http) = {
      post: "/v2/stock/set-order",
      body: "*"
    };
  }
  rpc CancelOrder (CancelRequestOrder) returns (ResponseOrder) {
    option (google.api.http) = {
      post: "/v2/stock/cancel-order",
      body: "*"
    };
  }
  rpc GetOrders (GetRequestOrders) returns (ResponseOrder) {
    option (google.api.http) = {
      post: "/v2/stock/get-orders",
      body: "*"
    };
  }
}

enum Type {
  AGENT = 0;
  BROKER = 1;
}

enum Tag {
  DEFAULT = 0;
  FIAT = 1;
}

// Order structure.
message Order {
  int64 id = 1;
  int64 user_id = 2;
  string base_unit = 3;
  string quote_unit = 4;
  string create_at = 5;
  double price = 6;
  double value = 7;
  double quantity = 8;
  int32 count = 9;
  basic.Assigning assigning = 10;
  basic.Trading trading = 11;
  basic.Status status = 12;
}
message SetRequestOrder {
  double price = 1;
  double quantity = 2;
  string base_unit = 3;
  string quote_unit = 4;
  basic.Trading trading = 5;
  basic.Assigning assigning = 6;
}
message GetRequestOrders {
  bool owner = 1;
  int64 user_id = 2;
  int64 limit = 3;
  int64 page = 4;
  string base_unit = 5;
  string quote_unit = 6;
  basic.Assigning assigning = 7;
  basic.Status status = 8;
}
message CancelRequestOrder {
  int64 id = 1;
}
message ResponseOrder {
  repeated Order fields = 1;
  double volume = 2;
  int32 count = 3;
  bool success = 4;
}

// Price structure.
message GetRequestPrice{
  string base_unit = 1;
  string quote_unit = 2;
}
message ResponsePrice {
  double price = 1;
}

message Pair {
  int64 id = 1;
  string name = 2;
  string symbol = 3;
  string base_unit = 4;
  string quote_unit = 5;
  double price = 6;
  double ratio = 7;
  double base_decimal = 8;
  double quote_decimal = 9;
  bool status = 10;
}
message GetRequestPair {
  string base_unit = 1;
  string quote_unit = 2;
}
message GetRequestPairs {
  string symbol = 1;
}
message ResponsePair {
  repeated Pair fields = 1;
}

// Candles message structure.
message Candles {
  int64 id = 1;
  int64 time = 2;
  string base_unit = 3;
  string quote_unit = 4;
  double high = 5;
  double low = 6;
  double open = 7;
  double close = 8;
  double price = 9;
  double volume = 10;
}
// Graph stats message structure.
message Stats {
  double high = 1;
  double low = 2;
  double last = 3;
  double first = 5;
  double previous = 4;
  double volume = 6;
  int32 count = 7;
}
message GetRequestCandles {
  int64 limit = 1;
  int64 from = 2;
  int64 to = 3;
  string base_unit = 4;
  string quote_unit = 5;
  string resolution = 6;
}
message ResponseCandles {
  repeated Candles fields = 1;
  Stats stats = 2;
}

message SetRequestBrokerAsset {
  string symbol = 1;
  double quantity = 2;
  bool unshift = 3;
}
message ResponseBrokerAsset {
  bool success = 1;
}

message Withdraw {
  int64 id = 1;
  int64 user_id = 2;
  int64 broker_id = 3;
  string symbol = 4;
  string name = 5;
  double value = 6;
  basic.Status status = 7;
  string create_at = 8;
}

message SetRequestWithdraw {
  string symbol = 1;
  double quantity = 2;
}
message GetRequestWithdraws {
  bool unshift = 1;
  string symbol = 2;
  int64 limit = 3;
  int64 page = 4;
}
message CancelRequestWithdraw {
  int64 id = 1;
  bool unshift = 2;
}
message ResponseWithdraw {
  repeated Withdraw fields = 1;
  int32 count = 2;
  bool success = 3;
}

message Asset {
  int64 id = 1;
  string name = 2;
  string symbol = 3;
  string zone = 4;
  double price = 5;
  double balance = 6;
  double volume = 7;
  bool status = 8;
  bool exist = 9;
  Tag tag = 10;
  Type type = 11;
  basic.Status agent_status = 12;
}

message GetRequestAssets {
  bool fiat = 1;
}
message GetRequestAsset {
  string symbol = 1;
}
message SetRequestAsset {
  string symbol = 1;
}
message ResponseAsset {
  repeated Asset fields = 1;
}


message SetRequestAgentBlocked {
  int64 id = 1;
}
message ResponseBlocked {
  bool success = 1;
}

message GetRequestSetting {
  int64 user_id = 1;
  basic.Status status = 2;
}
message ResponseSetting {
  bool success = 1;
}

message Agent {
  int64 id = 1;
  int64 user_id = 2;
  int64 broker_id = 3;
  string name = 4;
  string email = 5;
  string applicant = 6;
  Type type = 7;
  basic.Status status = 8;
  string create_at = 9;
  bool success = 10;
}

message SetRequestAgent {
  string name = 1;
  int64 broker_id = 2;
  Type type = 3;
}
message GetRequestBrokers {
  string search = 1;
  int64 limit = 2;
  int64 page = 3;
}
message ResponseBroker {
  repeated Agent fields = 1;
  int32 count = 2;
}
message GetRequestAgent {}
message GetRequestAgents {
  int64 limit = 1;
  int64 page = 2;
}
message GetRequestDeleteAgent {
  int64 id = 1;
}
message ResponseAgent {
  repeated Agent fields = 1;
  int32 count = 2;
}

message GetRequestRequests {
  int64 limit = 1;
  int64 page = 2;
}
message ResponseRequest {
  repeated Agent fields = 1;
  int32 count = 2;
}