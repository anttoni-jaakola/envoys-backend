syntax = "proto3";

package pbstock;

option go_package = "server/proto/pbstock";

import "google/api/annotations.proto";

service Api {
  // Get symbol.
  rpc GetSymbol (GetRequestSymbol) returns (ResponseSymbol) {
    option (google.api.http) = {
      post: "/v2/stock/get-symbol",
      body: "*"
    };
  }

  // Administration api.
  rpc SetMarketRule (SetRequestMarketRule) returns (ResponseMarket) {
    option (google.api.http) = {
      post: "/v2/admin/stock/set-market",
      body: "*"
    };
  }
  rpc GetMarketRule (GetRequestMarketRule) returns (ResponseMarket) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-market",
      body: "*"
    };
  }
  rpc GetMarketsRule (GetRequestMarketsRule) returns (ResponseMarket) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-markets",
      body: "*"
    };
  }
  rpc DeleteMarketRule (DeleteRequestMarketRule) returns (ResponseMarket) {
    option (google.api.http) = {
      post: "/v2/admin/stock/delete-market",
      body: "*"
    };
  }
  rpc SetSectorRule (SetRequestSectorRule) returns (ResponseSector) {
    option (google.api.http) = {
      post: "/v2/admin/stock/set-sector",
      body: "*"
    };
  }
  rpc GetSectorRule (GetRequestSectorRule) returns (ResponseSector) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-sector",
      body: "*"
    };
  }
  rpc GetSectorsRule (GetRequestSectorsRule) returns (ResponseSector) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-sectors",
      body: "*"
    };
  }
  rpc DeleteSectorRule (DeleteRequestSectorRule) returns (ResponseSector) {
    option (google.api.http) = {
      post: "/v2/admin/stock/delete-sector",
      body: "*"
    };
  }
  rpc SetRegistrarRule (SetRequestRegistrarRule) returns (ResponseRegistrar) {
    option (google.api.http) = {
      post: "/v2/admin/stock/set-registrar",
      body: "*"
    };
  }
  rpc GetRegistrarRule (GetRequestRegistrarRule) returns (ResponseRegistrar) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-registrar",
      body: "*"
    };
  }
  rpc GetRegistrarsRule (GetRequestRegistrarsRule) returns (ResponseRegistrar) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-registrars",
      body: "*"
    };
  }
  rpc DeleteRegistrarRule (DeleteRequestRegistrarRule) returns (ResponseRegistrar) {
    option (google.api.http) = {
      post: "/v2/admin/stock/delete-registrar",
      body: "*"
    };
  }
  rpc SetDepositaryRule (SetRequestDepositaryRule) returns (ResponseDepositary) {
    option (google.api.http) = {
      post: "/v2/admin/stock/set-depositary",
      body: "*"
    };
  }
  rpc GetDepositaryRule (GetRequestDepositaryRule) returns (ResponseDepositary) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-depositary",
      body: "*"
    };
  }
  rpc GetDepositariesRule (GetRequestDepositariesRule) returns (ResponseDepositary) {
    option (google.api.http) = {
      post: "/v2/admin/stock/get-depositaries",
      body: "*"
    };
  }
  rpc DeleteDepositaryRule (DeleteRequestDepositaryRule) returns (ResponseDepositary) {
    option (google.api.http) = {
      post: "/v2/admin/stock/delete-depositary",
      body: "*"
    };
  }
}

// Symbol structure.
message GetRequestSymbol {
  string base_unit = 1;
  string quote_unit = 2;
}
message ResponseSymbol {
  bool success = 1;
}

message Depositary {

}
message SetRequestDepositaryRule {
  int64 id = 1;
  Depositary depositary = 2;
}
message GetRequestDepositaryRule {
  int64 id = 1;
}
message GetRequestDepositariesRule {
  int64 limit = 1;
  int64 page = 2;
}
message DeleteRequestDepositaryRule {
  int64 id = 1;
}
message ResponseDepositary {
  repeated Depositary fields = 1;
  int32 count = 2;
}

enum Exchange {
  E_DIGITAL = 0;
  E_FREEDOM_FINANCE = 1;
  E_EXANTE = 2;
}

enum Method {
  M_COUNTER_BIDDING = 0;
  M_FRANKFURT = 1;
}

enum Kind {
  K_SECURITIES = 0;
  K_FUNDS = 1;
  K_BONDS = 2;
  K_BLOCKS = 3;
}

enum Type {
  T_ORDINARY_SHARES = 0;
  T_PREFERENCE_SHARES = 1;
}

// Sector structures.
message Sector {
  int64 id = 1;
  string name = 2;
  string symbol = 3;
  bool status = 4;
}

// Market structure.
message Market {
  int64 id = 1;
  string name = 2;
  string symbol = 3;
  string unit = 4;
  string code = 5;
  string address = 6;
  string start_at = 7;
  string stop_at = 8;
  string create_at = 9;
  double qty_shares = 10;
  double price_buy = 11;
  double price_sell = 12;
  double price_market = 13;
  string sector = 14;
  bool icon = 15;
  bool status = 16;
  Exchange exchange = 17;
  Method method = 18;
  Kind kind = 19;
  Type type = 20;
}

// Registrar structures.
message Registrar {
  int64 id = 1;
  string name = 2;
  string chapter = 3;
  int64 invoice = 4;
  int64 rate = 5;
}

// Market structures.
message SetRequestMarketRule {
  string symbol = 1;
  bytes image = 2;
  Market market = 3;
}
message GetRequestMarketRule {
  string symbol = 1;
}
message GetRequestMarketsRule {
  string search = 1;
  int64 limit = 2;
  int64 page = 3;
}
message DeleteRequestMarketRule {
  int64 id = 1;
}
message ResponseMarket {
  repeated Market fields = 1;
  int32 count = 2;
}

// Sector structures.
message SetRequestSectorRule {
  int64 id = 1;
  Sector sector = 2;
}
message GetRequestSectorRule {
  int64 id = 1;
}
message DeleteRequestSectorRule {
  int64 id = 1;
}
message GetRequestSectorsRule {
  int64 limit = 1;
  int64 page = 2;
}
message ResponseSector {
  repeated Sector fields = 1;
  int32 count = 2;
}

// Registrar structures.
message SetRequestRegistrarRule {
  int64 id = 1;
}
message GetRequestRegistrarRule {
  int64 id = 1;
}
message GetRequestRegistrarsRule {
  string search = 1;
  int64 limit = 2;
  int64 page = 3;
}
message DeleteRequestRegistrarRule {
  int64 id = 1;
}
message ResponseRegistrar {
  repeated Registrar fields = 1;
  int32 count = 2;
}