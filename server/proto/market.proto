syntax = "proto3";

package proto;

option go_package = "server/proto";

import "google/api/annotations.proto";

service Market {
    // Get currencies and instruments available.
    rpc GetInstruments (GetMarketRequestInstrument) returns (ResponseInstrument) {
        option (google.api.http) = {
            post: "/v2/market/get-instruments",
            body: "*"
            additional_bindings {
                get: "/v2/market/get-instruments"
            }
        };
    }
    // Get next deal id, positions, orders and settlement orders snapshot.
    rpc GetPositions (GetMarketRequestPosition) returns (ResponsePosition) {
        option (google.api.http) = {
            post: "/v2/market/get-positions",
            body: "*"
            additional_bindings {
                get: "/v2/market/get-positions"
            }
        };
    }
    // Get global limits snapshot.
    rpc GetLimits (GetMarketRequestLimit) returns (ResponseLimit) {
        option (google.api.http) = {
            post: "/v2/market/get-limits",
            body: "*"
            additional_bindings {
                get: "/v2/market/get-limits"
            }
        };
    }
    // Get counterparty limits snapshot.
    rpc GetCounterpartyLimits (GetMarketRequestCounterpartyLimit) returns (ResponseCounterpartyLimit) {
        option (google.api.http) = {
            post: "/v2/market/counterparty/get-limits",
            body: "*"
            additional_bindings {
                get: "/v2/market/counterparty/get-limits"
            }
        };
    }
    // Get requests for incoming and outgoing settlement.
    rpc GetSettlementRequests (GetMarketRequestSettlementRequest) returns (ResponseSettlementRequest) {
        option (google.api.http) = {
            post: "/v2/market/settlement/get-requests",
            body: "*"
            additional_bindings {
                get: "/v2/market/settlement/get-requests"
            }
        };
    }
    // Get incoming and outgoing settlement transactions.
    rpc GetSettlementTransactions (GetMarketRequestSettlementTransaction) returns (ResponseSettlementTransaction) {
        option (google.api.http) = {
            post: "/v2/market/settlement/get-transactions",
            body: "*"
            additional_bindings {
                get: "/v2/market/settlement/get-transactions"
            }
        };
    }
    // Get a snapshot of the specified order book with max 25 levels on each side.
    rpc GetBook (GetMarketRequestBook) returns (ResponseBook) {
        option (google.api.http) = {
            post: "/v2/market/get-book",
            body: "*"
            additional_bindings {
                get: "/v2/market/get-book"
            }
        };
    }
    // Set places an order. Taker can specify order volume instead of order size.
    rpc SetOrder (SetMarketRequestOrder) returns (ResponseMarketOrder) {
        option (google.api.http) = {
            post: "/v2/market/set-order",
            body: "*"
        };
    }
    // Set places an order. Taker can specify order volume instead of order size.
    rpc GetOrders (GetMarketRequestOrder) returns (ResponseMarketOrder) {
        option (google.api.http) = {
            post: "/v2/market/get-orders",
            body: "*"
            additional_bindings {
                get: "/v2/market/get-orders"
            }
        };
    }
}

// Market set order.
message MarketOrder {
    // Order id.
    int64 id = 1;
    // Instrument name.
    string symbol = 2;
    // Internal client id.
    int64 uid = 3;
    // Counterparty Id.
    int64 cid = 4;
    // Order price.
    double price = 5;
    // Order volume.
    double volume = 6;
    // Quantity value.
    double size = 7;
    //  Order side, "bid" - buy and "ask" - sell.
    string side = 8;
    // Order types "limitIOC", "limitFOK", "marketIOC", "marketFOK".
    string type = 9;
    // Create order at.
    string create_at = 10;
}

message GetMarketRequestOrder {
    // Instrument name.
    string symbol = 1;
    int64 limit = 2;
    int64 page = 3;
}

message SetMarketRequestOrder {
    // Instrument name.
    string symbol = 1;
    // Order limit price (for postOnly and limit orders).
    double price = 2;
    // Order size. If specified - volume shouldn't be used.
    double size = 3;
    // Order volume to be filled. Can be used by takers only. If specified - size shouldn't be used.
    double volume = 4;
    // Order side, use "bid" to buy and "ask" to sell.
    string side = 5;
    // Order types "limitIOC", "limitFOK", "marketIOC", "marketFOK" can only be used by market takers. "postOnly" and "limit" can only be used by market makers..
    string type = 6;
}
message ResponseMarketOrder {
    repeated MarketOrder fields = 1;
    int32 count = 2;
}

// Market depth.
message MarketDepth {
    message Attributes {
        string assigning = 1;
        string action = 2;
        // Level price.
        double price = 3;
        // Level total size.
        double size = 4;
    }
    string symbol = 1;
    repeated Attributes fields = 2;
}

// Market book.
message MarketBook {
    message Book {
        // Level price.
        double price = 1;
        // Level total size.
        double size = 2;
    }
    repeated Book bid = 1;
    repeated Book ask = 2;
}

message GetMarketRequestBook {
    // Instrument name.
    string instrument = 1;
    // Whether to return Tradable order book. By default method returns Global order book.
    bool tradable = 2;
}
message ResponseBook {
    MarketBook fields = 1;
}

// Market settlement.
message SettlementRequest {
    message Item {
        // Counterparty Id.
        int64 cid = 1;
        // Currency name.
        string name = 2;
        // 0 - No flags.
        // 1 - Fee paid by recipient.
        int32 flags = 3;
        // Requested amount. If zero, the full outstanding position is supposed to be settled.
        double size = 4;
        // Comment.
        string comment = 5;
        // Request expiration time in milliseconds. If 0, request won't be expired.
        int64 timestamp = 6;
    }
    repeated Item incoming = 1;
    repeated Item outgoing = 2;
}

message GetMarketRequestSettlementRequest {}
message ResponseSettlementRequest {
    SettlementRequest fields = 1;
}

// Market settlement transaction.
message SettlementTransaction {
    message Item {
        // Counterparty Id.
        int64 cid = 1;
        // Currency name.
        string name = 2;
        // Requested amount. If zero, the full outstanding position is supposed to be settled.
        double size = 3;
        // Settlement order id.
        int64 oid = 4;
        // Comment.
        string comment = 5;
        // Created at.
        int64 create_at = 6;
        // Tx id.
        string tx_id = 7;
        // Sent at.
        int64 sent_at = 8;
        // Settlement transaction flags
        // Bits 0-1
        // 0 = Committed by receiver
        // 1 = Committed by admin
        // 2 = Cancelled by sender
        // 3 = Cancelled by admin
        // Bit 2
        // 1 = Network fee paid by recipient.
        int32 flags = 9;
        // Transaction moment.
        int64 timestamp = 10;
        // Transaction id.
        int64 deal_id = 11;
        // Network fee.
        double fee = 12;
    }
    repeated Item incoming = 1;
    repeated Item outgoing = 2;
}

message GetMarketRequestSettlementTransaction {}
message ResponseSettlementTransaction {
    SettlementTransaction fields = 1;
}

// Limit counterparty.
message CounterpartyLimit {
    // Counterparty id.
    int64 cid = 1;
    // Currency name.
    string name = 2;
    // Net limit.
    double net_limit = 3;
    // Gross limit.
    double gross_limit = 4;
    // Net limit utilisation.
    double net_utilisation = 5;
    // Gross limit utilisation.
    double gross_utilisation = 6;
    // Reserved.
    int32 reserved = 7;
    // Taker markup.
    int32 taker_markup = 8;
}

// Market counterparty limit.
message GetMarketRequestCounterpartyLimit {}
message ResponseCounterpartyLimit {
    repeated CounterpartyLimit fields = 1;
}

// Limit.
message Limit {
    // Currency name.
    string name = 1;
    // Net limit.
    double net_limit = 2;
    // Gross limit.
    double gross_limit = 3;
    // Net limit utilisation.
    double net_utilisation = 4;
    // Gross limit utilisation.
    double gross_utilisation = 5;
    // Reserved.
    int32 reserved = 6;
}

// Market limit.
message GetMarketRequestLimit {}
message ResponseLimit {
    repeated Limit fields = 1;
}

// Position.
message Position {
    message Position {
        // Counterparty Id.
        int64 cid = 1;
        // Currency name.
        string name = 2;
        // Value.
        double value = 3;
    }
    message Order {
        // Instrument id.
        int64 id = 1;
        // Instrument name.
        string symbol = 2;
        // Order Type
        // 0 - limit
        // 1 - post only
        // 2 - limit IOC
        // 3 - limit FOK
        // 4 - market IOC
        // 5 - market FOK.
        int32 type = 3;
        // Side
        // 0 - bid
        // 1 - ask.
        int32 side = 4;
        // Cancel reason
        // 0 - in place or filled
        // 1 - by client
        // 2 - as non-book order
        // 3 - by self-trade prevention
        // 4 - cancel-on-disconnect
        int32 status = 5;
        // Client order id.
        int64 cid = 6;
        // Order price.
        double price = 7;
        // Order initial size or volume (depending on order was initially created by size or volume).
        double volume = 8;
        // Remaining order size or volume (depending on order was initially created by size or volume).
        double size = 9;
        // If order was created by size or by volume
        // 0 - by size
        // 1 - by volume
        int32 created_by = 10;
        // Created at.
        int64 timestamp = 11;
    }
    message Settlement {
        // Settlement order id.
        int64 id = 1;
        // Currency 1.
        string base_name = 2;
        // Currency 2.
        string quote_name = 3;
        // Size 1.
        double base_size = 4;
        // Size 2.
        double quote_size = 5;
        // Counterparty id.
        int64 cid = 6;
        // Created at.
        int64 timestamp = 7;
    }
    // Next deal or settlement id.
    int64 id = 1;
    // Asset positions.
    repeated Position positions = 2;
    // Active orders (for makers only).
    repeated Order orders = 3;
    // Active settlement orders.
    repeated Settlement settlements = 4;
}

// Market position.
message GetMarketRequestPosition {}
message ResponsePosition {
    Position fields = 1;
}

// Instrument.
message Instrument {
    message Currency {
        // Currency id.
        int64 id = 1;
        // Currency name.
        string name = 2;
        // Balance Step, minimum fraction of currency. From 1 to 1000000.
        double size = 3;
        // Current USD valuation for risk control.
        double price = 4;
    }
    message Pair {
        // Instrument id
        int64 id = 1;
        // Instrument name.
        string symbol = 2;
        // Asset currency name.
        string base_name = 3;
        // Balance currency name.
        string quote_name = 4;
    }
    repeated Currency currencies = 1;
    repeated Pair pairs = 2;
}

// Market instrument.
message GetMarketRequestInstrument {}
message ResponseInstrument {
    Instrument fields = 1;
}