// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: server/proto/market.proto

package proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Market book.
type GetMarketRequestBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument name.
	Instrument string `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Whether to return Tradable order book. By default method returns Global order book.
	Tradable bool `protobuf:"varint,2,opt,name=tradable,proto3" json:"tradable,omitempty"`
}

func (x *GetMarketRequestBook) Reset() {
	*x = GetMarketRequestBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestBook) ProtoMessage() {}

func (x *GetMarketRequestBook) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestBook.ProtoReflect.Descriptor instead.
func (*GetMarketRequestBook) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{0}
}

func (x *GetMarketRequestBook) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *GetMarketRequestBook) GetTradable() bool {
	if x != nil {
		return x.Tradable
	}
	return false
}

type ResponseBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseBook) Reset() {
	*x = ResponseBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBook) ProtoMessage() {}

func (x *ResponseBook) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBook.ProtoReflect.Descriptor instead.
func (*ResponseBook) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{1}
}

// Market settlement request.
type SettlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incoming []*SettlementRequest_Item `protobuf:"bytes,1,rep,name=incoming,proto3" json:"incoming,omitempty"`
	Outgoing []*SettlementRequest_Item `protobuf:"bytes,2,rep,name=outgoing,proto3" json:"outgoing,omitempty"`
}

func (x *SettlementRequest) Reset() {
	*x = SettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementRequest) ProtoMessage() {}

func (x *SettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementRequest.ProtoReflect.Descriptor instead.
func (*SettlementRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{2}
}

func (x *SettlementRequest) GetIncoming() []*SettlementRequest_Item {
	if x != nil {
		return x.Incoming
	}
	return nil
}

func (x *SettlementRequest) GetOutgoing() []*SettlementRequest_Item {
	if x != nil {
		return x.Outgoing
	}
	return nil
}

type GetMarketRequestSettlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestSettlementRequest) Reset() {
	*x = GetMarketRequestSettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestSettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestSettlementRequest) ProtoMessage() {}

func (x *GetMarketRequestSettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestSettlementRequest.ProtoReflect.Descriptor instead.
func (*GetMarketRequestSettlementRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{3}
}

type ResponseSettlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *SettlementRequest `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseSettlementRequest) Reset() {
	*x = ResponseSettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSettlementRequest) ProtoMessage() {}

func (x *ResponseSettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSettlementRequest.ProtoReflect.Descriptor instead.
func (*ResponseSettlementRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseSettlementRequest) GetFields() *SettlementRequest {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Market settlement transaction.
type SettlementTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incoming []*SettlementTransaction_Item `protobuf:"bytes,1,rep,name=incoming,proto3" json:"incoming,omitempty"`
	Outgoing []*SettlementTransaction_Item `protobuf:"bytes,2,rep,name=outgoing,proto3" json:"outgoing,omitempty"`
}

func (x *SettlementTransaction) Reset() {
	*x = SettlementTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementTransaction) ProtoMessage() {}

func (x *SettlementTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementTransaction.ProtoReflect.Descriptor instead.
func (*SettlementTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{5}
}

func (x *SettlementTransaction) GetIncoming() []*SettlementTransaction_Item {
	if x != nil {
		return x.Incoming
	}
	return nil
}

func (x *SettlementTransaction) GetOutgoing() []*SettlementTransaction_Item {
	if x != nil {
		return x.Outgoing
	}
	return nil
}

type GetMarketRequestSettlementTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestSettlementTransaction) Reset() {
	*x = GetMarketRequestSettlementTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestSettlementTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestSettlementTransaction) ProtoMessage() {}

func (x *GetMarketRequestSettlementTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestSettlementTransaction.ProtoReflect.Descriptor instead.
func (*GetMarketRequestSettlementTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{6}
}

type ResponseSettlementTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *SettlementTransaction `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseSettlementTransaction) Reset() {
	*x = ResponseSettlementTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSettlementTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSettlementTransaction) ProtoMessage() {}

func (x *ResponseSettlementTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSettlementTransaction.ProtoReflect.Descriptor instead.
func (*ResponseSettlementTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseSettlementTransaction) GetFields() *SettlementTransaction {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Limit counterparty.
type CounterpartyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counterparty id.
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Currency name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Net limit.
	NetLimit float64 `protobuf:"fixed64,3,opt,name=net_limit,json=netLimit,proto3" json:"net_limit,omitempty"`
	// Gross limit.
	GrossLimit float64 `protobuf:"fixed64,4,opt,name=gross_limit,json=grossLimit,proto3" json:"gross_limit,omitempty"`
	// Net limit utilisation.
	NetUtilisation float64 `protobuf:"fixed64,5,opt,name=net_utilisation,json=netUtilisation,proto3" json:"net_utilisation,omitempty"`
	// Gross limit utilisation.
	GrossUtilisation float64 `protobuf:"fixed64,6,opt,name=gross_utilisation,json=grossUtilisation,proto3" json:"gross_utilisation,omitempty"`
	// Reserved.
	Reserved int32 `protobuf:"varint,7,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// Taker markup.
	TakerMarkup int32 `protobuf:"varint,8,opt,name=taker_markup,json=takerMarkup,proto3" json:"taker_markup,omitempty"`
}

func (x *CounterpartyLimit) Reset() {
	*x = CounterpartyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterpartyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterpartyLimit) ProtoMessage() {}

func (x *CounterpartyLimit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterpartyLimit.ProtoReflect.Descriptor instead.
func (*CounterpartyLimit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{8}
}

func (x *CounterpartyLimit) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CounterpartyLimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterpartyLimit) GetNetLimit() float64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *CounterpartyLimit) GetGrossLimit() float64 {
	if x != nil {
		return x.GrossLimit
	}
	return 0
}

func (x *CounterpartyLimit) GetNetUtilisation() float64 {
	if x != nil {
		return x.NetUtilisation
	}
	return 0
}

func (x *CounterpartyLimit) GetGrossUtilisation() float64 {
	if x != nil {
		return x.GrossUtilisation
	}
	return 0
}

func (x *CounterpartyLimit) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *CounterpartyLimit) GetTakerMarkup() int32 {
	if x != nil {
		return x.TakerMarkup
	}
	return 0
}

// Market counterparty limit.
type GetMarketRequestCounterpartyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestCounterpartyLimit) Reset() {
	*x = GetMarketRequestCounterpartyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestCounterpartyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestCounterpartyLimit) ProtoMessage() {}

func (x *GetMarketRequestCounterpartyLimit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestCounterpartyLimit.ProtoReflect.Descriptor instead.
func (*GetMarketRequestCounterpartyLimit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{9}
}

type ResponseCounterpartyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*CounterpartyLimit `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseCounterpartyLimit) Reset() {
	*x = ResponseCounterpartyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCounterpartyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCounterpartyLimit) ProtoMessage() {}

func (x *ResponseCounterpartyLimit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCounterpartyLimit.ProtoReflect.Descriptor instead.
func (*ResponseCounterpartyLimit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{10}
}

func (x *ResponseCounterpartyLimit) GetFields() []*CounterpartyLimit {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Limit.
type Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Net limit.
	NetLimit float64 `protobuf:"fixed64,2,opt,name=net_limit,json=netLimit,proto3" json:"net_limit,omitempty"`
	// Gross limit.
	GrossLimit float64 `protobuf:"fixed64,3,opt,name=gross_limit,json=grossLimit,proto3" json:"gross_limit,omitempty"`
	// Net limit utilisation.
	NetUtilisation float64 `protobuf:"fixed64,4,opt,name=net_utilisation,json=netUtilisation,proto3" json:"net_utilisation,omitempty"`
	// Gross limit utilisation.
	GrossUtilisation float64 `protobuf:"fixed64,5,opt,name=gross_utilisation,json=grossUtilisation,proto3" json:"gross_utilisation,omitempty"`
	// Reserved.
	Reserved int32 `protobuf:"varint,6,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *Limit) Reset() {
	*x = Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{11}
}

func (x *Limit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Limit) GetNetLimit() float64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *Limit) GetGrossLimit() float64 {
	if x != nil {
		return x.GrossLimit
	}
	return 0
}

func (x *Limit) GetNetUtilisation() float64 {
	if x != nil {
		return x.NetUtilisation
	}
	return 0
}

func (x *Limit) GetGrossUtilisation() float64 {
	if x != nil {
		return x.GrossUtilisation
	}
	return 0
}

func (x *Limit) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

// Market limit.
type GetMarketRequestLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestLimit) Reset() {
	*x = GetMarketRequestLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestLimit) ProtoMessage() {}

func (x *GetMarketRequestLimit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestLimit.ProtoReflect.Descriptor instead.
func (*GetMarketRequestLimit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{12}
}

type ResponseLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Limit `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseLimit) Reset() {
	*x = ResponseLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLimit) ProtoMessage() {}

func (x *ResponseLimit) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLimit.ProtoReflect.Descriptor instead.
func (*ResponseLimit) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseLimit) GetFields() []*Limit {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next deal or settlement id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Asset positions.
	Positions []*Position_Position `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	// Active orders (for makers only).
	Orders []*Position_Order `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	// Active settlement orders.
	Settlements []*Position_Settlement `protobuf:"bytes,4,rep,name=settlements,proto3" json:"settlements,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{14}
}

func (x *Position) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Position) GetPositions() []*Position_Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Position) GetOrders() []*Position_Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *Position) GetSettlements() []*Position_Settlement {
	if x != nil {
		return x.Settlements
	}
	return nil
}

// Market position.
type GetMarketRequestPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestPosition) Reset() {
	*x = GetMarketRequestPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestPosition) ProtoMessage() {}

func (x *GetMarketRequestPosition) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestPosition.ProtoReflect.Descriptor instead.
func (*GetMarketRequestPosition) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{15}
}

type ResponsePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *Position `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponsePosition) Reset() {
	*x = ResponsePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePosition) ProtoMessage() {}

func (x *ResponsePosition) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePosition.ProtoReflect.Descriptor instead.
func (*ResponsePosition) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{16}
}

func (x *ResponsePosition) GetFields() *Position {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Instrument.
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []*Instrument_Currency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
	Pairs      []*Instrument_Pair     `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{17}
}

func (x *Instrument) GetCurrencies() []*Instrument_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *Instrument) GetPairs() []*Instrument_Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// Market instrument.
type GetMarketRequestInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMarketRequestInstrument) Reset() {
	*x = GetMarketRequestInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequestInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequestInstrument) ProtoMessage() {}

func (x *GetMarketRequestInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequestInstrument.ProtoReflect.Descriptor instead.
func (*GetMarketRequestInstrument) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{18}
}

type ResponseInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields *Instrument `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResponseInstrument) Reset() {
	*x = ResponseInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInstrument) ProtoMessage() {}

func (x *ResponseInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInstrument.ProtoReflect.Descriptor instead.
func (*ResponseInstrument) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{19}
}

func (x *ResponseInstrument) GetFields() *Instrument {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SettlementRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counterparty Id.
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Currency name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 0 - No flags.
	// 1 - Fee paid by recipient.
	Flags int32 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Requested amount. If zero, the full outstanding position is supposed to be settled.
	Size float64 `protobuf:"fixed64,4,opt,name=size,proto3" json:"size,omitempty"`
	// Comment.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// Request expiration time in milliseconds. If 0, request won't be expired.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SettlementRequest_Item) Reset() {
	*x = SettlementRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementRequest_Item) ProtoMessage() {}

func (x *SettlementRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementRequest_Item.ProtoReflect.Descriptor instead.
func (*SettlementRequest_Item) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SettlementRequest_Item) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *SettlementRequest_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SettlementRequest_Item) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SettlementRequest_Item) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SettlementRequest_Item) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SettlementRequest_Item) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SettlementTransaction_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counterparty Id.
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Currency name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Requested amount. If zero, the full outstanding position is supposed to be settled.
	Size float64 `protobuf:"fixed64,3,opt,name=size,proto3" json:"size,omitempty"`
	// Settlement order id.
	Oid int64 `protobuf:"varint,4,opt,name=oid,proto3" json:"oid,omitempty"`
	// Comment.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// Created at.
	CreateAt int64 `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Tx id.
	TxId string `protobuf:"bytes,7,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Sent at.
	SentAt int64 `protobuf:"varint,8,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	// Settlement transaction flags
	// Bits 0-1
	// 0 = Committed by receiver
	// 1 = Committed by admin
	// 2 = Cancelled by sender
	// 3 = Cancelled by admin
	// Bit 2
	// 1 = Network fee paid by recipient.
	Flags int32 `protobuf:"varint,9,opt,name=flags,proto3" json:"flags,omitempty"`
	// Transaction moment.
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Transaction id.
	DealId int64 `protobuf:"varint,11,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	// Network fee.
	Fee float64 `protobuf:"fixed64,12,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *SettlementTransaction_Item) Reset() {
	*x = SettlementTransaction_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementTransaction_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementTransaction_Item) ProtoMessage() {}

func (x *SettlementTransaction_Item) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementTransaction_Item.ProtoReflect.Descriptor instead.
func (*SettlementTransaction_Item) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SettlementTransaction_Item) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *SettlementTransaction_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SettlementTransaction_Item) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SettlementTransaction_Item) GetOid() int64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SettlementTransaction_Item) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SettlementTransaction_Item) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SettlementTransaction_Item) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SettlementTransaction_Item) GetSentAt() int64 {
	if x != nil {
		return x.SentAt
	}
	return 0
}

func (x *SettlementTransaction_Item) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SettlementTransaction_Item) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SettlementTransaction_Item) GetDealId() int64 {
	if x != nil {
		return x.DealId
	}
	return 0
}

func (x *SettlementTransaction_Item) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type Position_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counterparty Id.
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Currency name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Position_Position) Reset() {
	*x = Position_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Position) ProtoMessage() {}

func (x *Position_Position) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Position.ProtoReflect.Descriptor instead.
func (*Position_Position) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Position_Position) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Position_Position) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Position_Position) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Position_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Instrument name.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Order Type
	// 0 - limit
	// 1 - post only
	// 2 - limit IOC
	// 3 - limit FOK
	// 4 - market IOC
	// 5 - market FOK.
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Side
	// 0 - bid
	// 1 - ask.
	Side int32 `protobuf:"varint,4,opt,name=side,proto3" json:"side,omitempty"`
	// Cancel reason
	// 0 - in place or filled
	// 1 - by client
	// 2 - as non-book order
	// 3 - by self-trade prevention
	// 4 - cancel-on-disconnect
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// Client order id.
	Cid int64 `protobuf:"varint,6,opt,name=cid,proto3" json:"cid,omitempty"`
	// Order price.
	Price float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	// Order initial size or volume (depending on order was initially created by size or volume).
	Volume float64 `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	// Remaining order size or volume (depending on order was initially created by size or volume).
	Size float64 `protobuf:"fixed64,9,opt,name=size,proto3" json:"size,omitempty"`
	// If order was created by size or by volume
	// 0 - by size
	// 1 - by volume
	CreatedBy int32 `protobuf:"varint,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Created at.
	Timestamp int64 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Position_Order) Reset() {
	*x = Position_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Order) ProtoMessage() {}

func (x *Position_Order) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Order.ProtoReflect.Descriptor instead.
func (*Position_Order) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Position_Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Position_Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position_Order) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Position_Order) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *Position_Order) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Position_Order) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Position_Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Position_Order) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Position_Order) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Position_Order) GetCreatedBy() int32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Position_Order) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Position_Settlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Settlement order id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Currency 1.
	BaseName string `protobuf:"bytes,2,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	// Currency 2.
	QuoteName string `protobuf:"bytes,3,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// Size 1.
	BaseSize float64 `protobuf:"fixed64,4,opt,name=base_size,json=baseSize,proto3" json:"base_size,omitempty"`
	// Size 2.
	QuoteSize float64 `protobuf:"fixed64,5,opt,name=quote_size,json=quoteSize,proto3" json:"quote_size,omitempty"`
	// Counterparty id.
	Cid int64 `protobuf:"varint,6,opt,name=cid,proto3" json:"cid,omitempty"`
	// Created at.
	Timestamp int64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Position_Settlement) Reset() {
	*x = Position_Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position_Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position_Settlement) ProtoMessage() {}

func (x *Position_Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position_Settlement.ProtoReflect.Descriptor instead.
func (*Position_Settlement) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{14, 2}
}

func (x *Position_Settlement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Position_Settlement) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *Position_Settlement) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *Position_Settlement) GetBaseSize() float64 {
	if x != nil {
		return x.BaseSize
	}
	return 0
}

func (x *Position_Settlement) GetQuoteSize() float64 {
	if x != nil {
		return x.QuoteSize
	}
	return 0
}

func (x *Position_Settlement) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Position_Settlement) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Instrument_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Currency name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Balance Step, minimum fraction of currency. From 1 to 1000000.
	Size float64 `protobuf:"fixed64,3,opt,name=size,proto3" json:"size,omitempty"`
	// Current USD valuation for risk control.
	Price float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Instrument_Currency) Reset() {
	*x = Instrument_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument_Currency) ProtoMessage() {}

func (x *Instrument_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument_Currency.ProtoReflect.Descriptor instead.
func (*Instrument_Currency) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Instrument_Currency) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Instrument_Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument_Currency) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Instrument_Currency) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type Instrument_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Instrument name.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Asset currency name.
	BaseName string `protobuf:"bytes,3,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	// Balance currency name.
	QuoteName string `protobuf:"bytes,4,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
}

func (x *Instrument_Pair) Reset() {
	*x = Instrument_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_market_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument_Pair) ProtoMessage() {}

func (x *Instrument_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_market_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument_Pair.ProtoReflect.Descriptor instead.
func (*Instrument_Pair) Descriptor() ([]byte, []int) {
	return file_server_proto_market_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Instrument_Pair) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Instrument_Pair) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Instrument_Pair) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *Instrument_Pair) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

var File_server_proto_market_proto protoreflect.FileDescriptor

var file_server_proto_market_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3d,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x1a, 0x96, 0x02,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x55, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x6e, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd1, 0x05, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x46, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x80, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc4, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1a, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x58, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x6a, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x32, 0xdf, 0x08, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x93, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x7a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22, 0x2f,
	0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0xcc, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x26, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x6f, 0x6f, 0x6b, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x12,
	0x13, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x62, 0x6f, 0x6f, 0x6b, 0x42, 0x0e, 0x5a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_market_proto_rawDescOnce sync.Once
	file_server_proto_market_proto_rawDescData = file_server_proto_market_proto_rawDesc
)

func file_server_proto_market_proto_rawDescGZIP() []byte {
	file_server_proto_market_proto_rawDescOnce.Do(func() {
		file_server_proto_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_market_proto_rawDescData)
	})
	return file_server_proto_market_proto_rawDescData
}

var file_server_proto_market_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_server_proto_market_proto_goTypes = []interface{}{
	(*GetMarketRequestBook)(nil),                  // 0: proto.GetMarketRequestBook
	(*ResponseBook)(nil),                          // 1: proto.ResponseBook
	(*SettlementRequest)(nil),                     // 2: proto.SettlementRequest
	(*GetMarketRequestSettlementRequest)(nil),     // 3: proto.GetMarketRequestSettlementRequest
	(*ResponseSettlementRequest)(nil),             // 4: proto.ResponseSettlementRequest
	(*SettlementTransaction)(nil),                 // 5: proto.SettlementTransaction
	(*GetMarketRequestSettlementTransaction)(nil), // 6: proto.GetMarketRequestSettlementTransaction
	(*ResponseSettlementTransaction)(nil),         // 7: proto.ResponseSettlementTransaction
	(*CounterpartyLimit)(nil),                     // 8: proto.CounterpartyLimit
	(*GetMarketRequestCounterpartyLimit)(nil),     // 9: proto.GetMarketRequestCounterpartyLimit
	(*ResponseCounterpartyLimit)(nil),             // 10: proto.ResponseCounterpartyLimit
	(*Limit)(nil),                                 // 11: proto.Limit
	(*GetMarketRequestLimit)(nil),                 // 12: proto.GetMarketRequestLimit
	(*ResponseLimit)(nil),                         // 13: proto.ResponseLimit
	(*Position)(nil),                              // 14: proto.Position
	(*GetMarketRequestPosition)(nil),              // 15: proto.GetMarketRequestPosition
	(*ResponsePosition)(nil),                      // 16: proto.ResponsePosition
	(*Instrument)(nil),                            // 17: proto.Instrument
	(*GetMarketRequestInstrument)(nil),            // 18: proto.GetMarketRequestInstrument
	(*ResponseInstrument)(nil),                    // 19: proto.ResponseInstrument
	(*SettlementRequest_Item)(nil),                // 20: proto.SettlementRequest.Item
	(*SettlementTransaction_Item)(nil),            // 21: proto.SettlementTransaction.Item
	(*Position_Position)(nil),                     // 22: proto.Position.Position
	(*Position_Order)(nil),                        // 23: proto.Position.Order
	(*Position_Settlement)(nil),                   // 24: proto.Position.Settlement
	(*Instrument_Currency)(nil),                   // 25: proto.Instrument.Currency
	(*Instrument_Pair)(nil),                       // 26: proto.Instrument.Pair
}
var file_server_proto_market_proto_depIdxs = []int32{
	20, // 0: proto.SettlementRequest.incoming:type_name -> proto.SettlementRequest.Item
	20, // 1: proto.SettlementRequest.outgoing:type_name -> proto.SettlementRequest.Item
	2,  // 2: proto.ResponseSettlementRequest.fields:type_name -> proto.SettlementRequest
	21, // 3: proto.SettlementTransaction.incoming:type_name -> proto.SettlementTransaction.Item
	21, // 4: proto.SettlementTransaction.outgoing:type_name -> proto.SettlementTransaction.Item
	5,  // 5: proto.ResponseSettlementTransaction.fields:type_name -> proto.SettlementTransaction
	8,  // 6: proto.ResponseCounterpartyLimit.fields:type_name -> proto.CounterpartyLimit
	11, // 7: proto.ResponseLimit.fields:type_name -> proto.Limit
	22, // 8: proto.Position.positions:type_name -> proto.Position.Position
	23, // 9: proto.Position.orders:type_name -> proto.Position.Order
	24, // 10: proto.Position.settlements:type_name -> proto.Position.Settlement
	14, // 11: proto.ResponsePosition.fields:type_name -> proto.Position
	25, // 12: proto.Instrument.currencies:type_name -> proto.Instrument.Currency
	26, // 13: proto.Instrument.pairs:type_name -> proto.Instrument.Pair
	17, // 14: proto.ResponseInstrument.fields:type_name -> proto.Instrument
	18, // 15: proto.Market.GetInstruments:input_type -> proto.GetMarketRequestInstrument
	15, // 16: proto.Market.GetPositions:input_type -> proto.GetMarketRequestPosition
	12, // 17: proto.Market.GetLimits:input_type -> proto.GetMarketRequestLimit
	9,  // 18: proto.Market.GetCounterpartyLimits:input_type -> proto.GetMarketRequestCounterpartyLimit
	3,  // 19: proto.Market.GetSettlementRequests:input_type -> proto.GetMarketRequestSettlementRequest
	6,  // 20: proto.Market.GetSettlementTransactions:input_type -> proto.GetMarketRequestSettlementTransaction
	0,  // 21: proto.Market.GetBook:input_type -> proto.GetMarketRequestBook
	19, // 22: proto.Market.GetInstruments:output_type -> proto.ResponseInstrument
	16, // 23: proto.Market.GetPositions:output_type -> proto.ResponsePosition
	13, // 24: proto.Market.GetLimits:output_type -> proto.ResponseLimit
	10, // 25: proto.Market.GetCounterpartyLimits:output_type -> proto.ResponseCounterpartyLimit
	4,  // 26: proto.Market.GetSettlementRequests:output_type -> proto.ResponseSettlementRequest
	7,  // 27: proto.Market.GetSettlementTransactions:output_type -> proto.ResponseSettlementTransaction
	1,  // 28: proto.Market.GetBook:output_type -> proto.ResponseBook
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_server_proto_market_proto_init() }
func file_server_proto_market_proto_init() {
	if File_server_proto_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestSettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestSettlementTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSettlementTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterpartyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestCounterpartyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCounterpartyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequestInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementTransaction_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position_Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_market_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_market_proto_goTypes,
		DependencyIndexes: file_server_proto_market_proto_depIdxs,
		MessageInfos:      file_server_proto_market_proto_msgTypes,
	}.Build()
	File_server_proto_market_proto = out.File
	file_server_proto_market_proto_rawDesc = nil
	file_server_proto_market_proto_goTypes = nil
	file_server_proto_market_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketClient interface {
	// Get currencies and instruments available.
	GetInstruments(ctx context.Context, in *GetMarketRequestInstrument, opts ...grpc.CallOption) (*ResponseInstrument, error)
	// Get next deal id, positions, orders and settlement orders snapshot.
	GetPositions(ctx context.Context, in *GetMarketRequestPosition, opts ...grpc.CallOption) (*ResponsePosition, error)
	// Get global limits snapshot.
	GetLimits(ctx context.Context, in *GetMarketRequestLimit, opts ...grpc.CallOption) (*ResponseLimit, error)
	// Get counterparty limits snapshot.
	GetCounterpartyLimits(ctx context.Context, in *GetMarketRequestCounterpartyLimit, opts ...grpc.CallOption) (*ResponseCounterpartyLimit, error)
	// Get requests for incoming and outgoing settlement.
	GetSettlementRequests(ctx context.Context, in *GetMarketRequestSettlementRequest, opts ...grpc.CallOption) (*ResponseSettlementRequest, error)
	// Get incoming and outgoing settlement transactions.
	GetSettlementTransactions(ctx context.Context, in *GetMarketRequestSettlementTransaction, opts ...grpc.CallOption) (*ResponseSettlementTransaction, error)
	// Get a snapshot of the specified order book with max 25 levels on each side.
	GetBook(ctx context.Context, in *GetMarketRequestBook, opts ...grpc.CallOption) (*ResponseBook, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) GetInstruments(ctx context.Context, in *GetMarketRequestInstrument, opts ...grpc.CallOption) (*ResponseInstrument, error) {
	out := new(ResponseInstrument)
	err := c.cc.Invoke(ctx, "/proto.Market/GetInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetPositions(ctx context.Context, in *GetMarketRequestPosition, opts ...grpc.CallOption) (*ResponsePosition, error) {
	out := new(ResponsePosition)
	err := c.cc.Invoke(ctx, "/proto.Market/GetPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetLimits(ctx context.Context, in *GetMarketRequestLimit, opts ...grpc.CallOption) (*ResponseLimit, error) {
	out := new(ResponseLimit)
	err := c.cc.Invoke(ctx, "/proto.Market/GetLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetCounterpartyLimits(ctx context.Context, in *GetMarketRequestCounterpartyLimit, opts ...grpc.CallOption) (*ResponseCounterpartyLimit, error) {
	out := new(ResponseCounterpartyLimit)
	err := c.cc.Invoke(ctx, "/proto.Market/GetCounterpartyLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetSettlementRequests(ctx context.Context, in *GetMarketRequestSettlementRequest, opts ...grpc.CallOption) (*ResponseSettlementRequest, error) {
	out := new(ResponseSettlementRequest)
	err := c.cc.Invoke(ctx, "/proto.Market/GetSettlementRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetSettlementTransactions(ctx context.Context, in *GetMarketRequestSettlementTransaction, opts ...grpc.CallOption) (*ResponseSettlementTransaction, error) {
	out := new(ResponseSettlementTransaction)
	err := c.cc.Invoke(ctx, "/proto.Market/GetSettlementTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetBook(ctx context.Context, in *GetMarketRequestBook, opts ...grpc.CallOption) (*ResponseBook, error) {
	out := new(ResponseBook)
	err := c.cc.Invoke(ctx, "/proto.Market/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
type MarketServer interface {
	// Get currencies and instruments available.
	GetInstruments(context.Context, *GetMarketRequestInstrument) (*ResponseInstrument, error)
	// Get next deal id, positions, orders and settlement orders snapshot.
	GetPositions(context.Context, *GetMarketRequestPosition) (*ResponsePosition, error)
	// Get global limits snapshot.
	GetLimits(context.Context, *GetMarketRequestLimit) (*ResponseLimit, error)
	// Get counterparty limits snapshot.
	GetCounterpartyLimits(context.Context, *GetMarketRequestCounterpartyLimit) (*ResponseCounterpartyLimit, error)
	// Get requests for incoming and outgoing settlement.
	GetSettlementRequests(context.Context, *GetMarketRequestSettlementRequest) (*ResponseSettlementRequest, error)
	// Get incoming and outgoing settlement transactions.
	GetSettlementTransactions(context.Context, *GetMarketRequestSettlementTransaction) (*ResponseSettlementTransaction, error)
	// Get a snapshot of the specified order book with max 25 levels on each side.
	GetBook(context.Context, *GetMarketRequestBook) (*ResponseBook, error)
}

// UnimplementedMarketServer can be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (*UnimplementedMarketServer) GetInstruments(context.Context, *GetMarketRequestInstrument) (*ResponseInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstruments not implemented")
}
func (*UnimplementedMarketServer) GetPositions(context.Context, *GetMarketRequestPosition) (*ResponsePosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (*UnimplementedMarketServer) GetLimits(context.Context, *GetMarketRequestLimit) (*ResponseLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (*UnimplementedMarketServer) GetCounterpartyLimits(context.Context, *GetMarketRequestCounterpartyLimit) (*ResponseCounterpartyLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterpartyLimits not implemented")
}
func (*UnimplementedMarketServer) GetSettlementRequests(context.Context, *GetMarketRequestSettlementRequest) (*ResponseSettlementRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementRequests not implemented")
}
func (*UnimplementedMarketServer) GetSettlementTransactions(context.Context, *GetMarketRequestSettlementTransaction) (*ResponseSettlementTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementTransactions not implemented")
}
func (*UnimplementedMarketServer) GetBook(context.Context, *GetMarketRequestBook) (*ResponseBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_GetInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetInstruments(ctx, req.(*GetMarketRequestInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetPositions(ctx, req.(*GetMarketRequestPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetLimits(ctx, req.(*GetMarketRequestLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetCounterpartyLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestCounterpartyLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetCounterpartyLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetCounterpartyLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetCounterpartyLimits(ctx, req.(*GetMarketRequestCounterpartyLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetSettlementRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetSettlementRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetSettlementRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetSettlementRequests(ctx, req.(*GetMarketRequestSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetSettlementTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestSettlementTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetSettlementTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetSettlementTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetSettlementTransactions(ctx, req.(*GetMarketRequestSettlementTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequestBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Market/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetBook(ctx, req.(*GetMarketRequestBook))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstruments",
			Handler:    _Market_GetInstruments_Handler,
		},
		{
			MethodName: "GetPositions",
			Handler:    _Market_GetPositions_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _Market_GetLimits_Handler,
		},
		{
			MethodName: "GetCounterpartyLimits",
			Handler:    _Market_GetCounterpartyLimits_Handler,
		},
		{
			MethodName: "GetSettlementRequests",
			Handler:    _Market_GetSettlementRequests_Handler,
		},
		{
			MethodName: "GetSettlementTransactions",
			Handler:    _Market_GetSettlementTransactions_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Market_GetBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proto/market.proto",
}
