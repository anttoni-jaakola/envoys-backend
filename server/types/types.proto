syntax = "proto3";

package types;

option go_package = "github.com/cryptogateway/backend-envoys/server/types";

// This is a message contract used by a programming language such as Protocol Buffers. It is used to define a data
// structure that can be used to store information about an asset or service. The message contract lists the different
// fields that will be used to store the asset or service information, such as the id, chain_id, chain_name,
// parent_symbol, symbol, address, fees_withdraw, decimals, platform, and protocol. This message contract can be used to
// create a data structure that can be used to store information about an asset or service, which can then be used in
// applications or services.
message Contract {
  int64 id = 1;
  int64 chain_id = 2;
  string chain_name = 3;
  string parent_symbol = 4;
  string symbol = 5;
  string address = 6;
  double fees = 7;
  int32 decimals = 8;
  string platform = 9;
  string protocol = 10;
}

// The purpose of the message Asset is to define the structure of an Asset object. It outlines the different properties
// of an Asset, including its id, name, symbol, create_at, balance, fees_trade, fees_discount, fees_charges, fees_costs,
// min_withdraw, max_withdraw, min_trade, max_trade, volume, chains, pairs, chains_ids, marker, icon, status, and class.
// This structure can then be used to create Asset objects that can be stored and accessed to retrieve data about an
// Asset.
message Asset {
  int64 id = 1;
  string name = 2;
  string symbol = 3;
  string create_at = 4;
  double balance = 5;
  double fees_trade = 6;
  double fees_discount = 7;
  double fees_charges = 8;
  double fees_costs = 9;
  double min_withdraw = 10;
  double max_withdraw = 11;
  double min_trade = 12;
  double max_trade = 13;
  double volume = 14;
  repeated Chain chains = 15;
  repeated types.Pair pairs = 16;
  repeated int64 chains_ids = 17;
  bool marker = 18;
  bool icon = 19;
  bool status = 20;
  string group = 21;
}

// The purpose of this message Chain is to define the data fields related to a blockchain network. The message Chain
// provides the names of the data fields, as well as the data type for each field. The message Chain could be used to
// create a structured object for storing blockchain-related information. This object could then be used to query,
// filter, and analyze blockchain data.
message Chain {
  int64 id = 1;
  string name = 2;
  string parent_symbol = 3;
  string explorer_link = 4;
  string address = 5;
  string rpc = 6;
  int64 block = 7;
  int64 network = 8;
  int64 confirmation = 9;
  int64 time_withdraw = 10;
  bool status = 11;
  bool exist = 12;
  double reserve = 13;
  double fees = 14;
  int32 decimals = 15;
  string platform = 16;
  Contract contract = 17;
  string tag = 18;
}

// This message provides a structure for a transaction on a blockchain network. It defines the transaction's internal ID,
// chain/blockchain internal ID, account user internal ID, currency symbol, blockchain hash ID, transaction creation
// time, recipient's address, address from whom the transfer was made, number of funds, blockchain network fee for
// transferring funds, freeze currency conversion price, blockchain network confirmations, number of blocks in the
// blockchain network, data update via socket gateway, allocation, assignment, type, platform, protocol, status, chain,and parent.
message Transaction {
  int64 id = 1;
  int64 chain_id = 2;
  int64 user_id = 3;
  string symbol = 4;
  string hash = 5;
  string create_at = 6;
  string to = 7;
  string from = 8;
  double value = 9;
  double fees = 10;
  double price = 11;
  int64 confirmation = 12;
  int64 block = 13;
  bool hook = 14;
  string allocation = 15;
  string group = 16;
  string platform = 17;
  string protocol = 18;
  Chain chain = 19;
  string assignment = 20;
  string status = 21;
  int64 parent = 22;
  string error = 23;
}

// The purpose of this code is to define the data fields for a message containing market analysis information. The fields
// are: id (a numerical identifier), base_unit (the base currency of the pair being analyzed), quote_unit (the quote
// currency of the pair being analyzed), price (the current market price of the pair), buy_ratio (the ratio of buyers to
// sellers at the current price), sel_ratio (the ratio of sellers to buyers at the current price), and ticker (a list of
// the historical prices of the pair).
message Analysis {
  int64 id = 1;
  string base_unit = 2;
  string quote_unit = 3;
  double price = 4;
  double buy_ratio = 5;
  double sel_ratio = 6;
  repeated double ticker = 7;
}

// The purpose of this message is to define the structure of an Order object. The message includes details such as the
// order ID, user ID, base and quote unit, creation time, price, value, quantity, fees, count and the assigning, trading
// and status of the order. This message will be used to create Order objects with the given attributes.
message Order {
  int64 id = 1;
  int64 user_id = 2;
  string base_unit = 3;
  string quote_unit = 4;
  double price = 5;
  double value = 6;
  double quantity = 7;
  double fees = 8;
  int32 count = 9;
  string create_at = 10;
  string assigning = 11;
  string trading = 12;
  string status = 13;
}

// The message Pair is a data structure used to store information about a currency pair. It stores the currency pair's
// ID, symbol, base unit, quote unit, icon, price, ratio, base decimal, quote decimal, status, and graph clearance. This
// data structure is used to provide information about the currency pair to other applications or services.
message Pair {
  int64 id = 1;
  string symbol = 2;
  string base_unit = 3;
  string quote_unit = 4;
  string icon = 5;
  double price = 6;
  double ratio = 7;
  double base_decimal = 8;
  double quote_decimal = 9;
  bool status = 10;
  bool graph_clear = 11;
}

// The message Ticker is a protocol buffer that is used to store and exchange information about a given ticker. This
// includes information such as the ticker's unique identifier, the time, the base unit and quote unit, the high, low,
// open, close, price, volume, ask price, and bid price. This information can then be used to analyze trends in the
// market, track prices, and make predictions.
message Ticker {
  int64 id = 1;
  int64 time = 2;
  string base_unit = 3;
  string quote_unit = 4;
  double high = 5;
  double low = 6;
  double open = 7;
  double close = 8;
  double price = 9;
  double volume = 10;
}

// The purpose of this message Stats is to provide a structure for storing statistics about a particular topic. The
// variables high, low, last, first, previous, volume, and count hold specific values that represent different aspects
// of the topic's statistical information. For example, high might represent the highest value of the topic, low might
// represent the lowest value, and so on. The structure allows for efficient storage and retrieval of the statistical data.
message Stats {
  double high = 1;
  double low = 2;
  double last = 3;
  double first = 5;
  double previous = 4;
  double volume = 6;
  int32 count = 7;
}

// This message is used to define the fields of a Trade. It establishes the type of data that each field can contain
// (i.e. int64, string, double, bool). The purpose of this message is to provide a standard format for communication
// between different systems. By doing so, it allows for more efficient and accurate data exchange.
message Trade {
  int64 id = 1;
  int64 user_id = 2;
  string base_unit = 3;
  string quote_unit = 4;
  string create_at = 5;
  double price = 6;
  double quantity = 7;
  double fees = 8;
  bool maker = 9;
  string assigning = 10;
}

// The message Rules is a data structure that is used to store a list of strings. The repeated keyword indicates that the
// strings will appear more than once in the list. The "default" and "spot" strings are the two strings that will be
// stored in the list.
message Rules {
  repeated string default = 1;
  repeated string spot = 2;
}

// The purpose of the message Counts is to assign an integer value to the fields transaction, order, and asset. This can
// be useful when referring to the fields, as it is easier and faster to identify the field by its number than by its name.
message Counts {
  int32 transaction = 1;
  int32 order = 2;
  int32 asset = 3;
}

// This is a protocol buffer message definition for a User object. It is used to define the structure of a User object,
// including its properties and their data types. The properties include an id (int64), name (string), email (string),
// create_at (string), status (bool), counts (Counts), rules (Rules), actions (repeated Action), sample (repeated
// string), factor_secure (bool), and factor_secret (string).
message User {
  int64 id = 1;
  string name = 2;
  string email = 3;
  string create_at = 4;
  bool status = 5;
  Counts counts = 6;
  Rules rules = 7;
  repeated Action actions = 8;
  repeated string sample = 9;
  bool factor_secure = 10;
  string factor_secret = 11;
  bool kyc_secure = 12;
  string kyc_secret = 13;
}

// The purpose of the above message Action is to provide a data structure for sending and receiving data between two
// systems. It is used to store information such as the ID, operating system, device, IP address, user ID, browser, and
// creation time of the data being sent. This information can then be used to identify the sender and recipient of the
// data, as well as to track the usage of the data.
message Action {
  int64 id = 1;
  string os = 2;
  string device = 3;
  string ip = 4;
  int64 user_id = 6;
  repeated string browser = 7;
  string create_at = 8;
}

// The message "Advertising" is a Protocol Buffers message which is used to define the structure of an advertising
// object. It contains the following fields: id (int64), link (string), title (string), text (string), and type (Ad).
// The purpose of this message is to define the structure of an advertising object so that it can be transmitted over a
// network or stored in a database. This message can be used to ensure that data is transmitted and stored in a standard
// format, which makes it easier to process and access.
message Advertising {
  int64 id = 1;
  string link = 2;
  string title = 3;
  string text = 4;
  string pattern = 5;
}